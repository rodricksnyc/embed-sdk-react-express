{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nlet _ = t => t,\n    _t;\n\nconst _excluded = [\"autoComplete\", \"inputReadOnly\", \"readOnly\", \"onClear\", \"onInputChange\", \"inputValue\", \"freeInput\", \"validate\", \"formatInputValue\", \"onValidationFail\", \"onDuplicate\", \"chipIconLabel\", \"clearIconLabel\"],\n      _excluded2 = [\"selectOnClick\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useCallback, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useForkedRef } from '../../../../utils';\nimport { InputChips, InputChipsBase, joinValues, splitInputValue } from '../../InputChips';\nimport { ComboboxMultiContext } from '../ComboboxContext';\nimport { comboboxStyles } from '../ComboboxInput';\nimport { getComboboxText, formatOptionAsString, parseOption } from '../utils';\nimport { makeHash } from '../utils/makeHash';\nimport { ComboboxActionType, ComboboxState, getOptionsFromValues } from '../utils/state';\nimport { useInputEvents } from '../utils/useInputEvents';\nimport { useInputPropRefs } from '../utils/useInputPropRefs';\n\nfunction parseInputValue(value) {\n  try {\n    const parsed = JSON.parse(value);\n\n    if (Array.isArray(parsed)) {\n      return parsed.map(option => typeof option === 'string' ? option : JSON.stringify(option));\n    }\n\n    return splitInputValue(value);\n  } catch (e) {\n    return splitInputValue(value);\n  }\n}\n\nfunction formatTextToCopy(selectedValues) {\n  let noJson = true;\n  const jsonReadyValues = selectedValues.map(value => {\n    try {\n      JSON.parse(value);\n      noJson = false;\n      return value;\n    } catch (e) {\n      return `\"${value}\"`;\n    }\n  });\n\n  if (noJson) {\n    return joinValues(selectedValues);\n  }\n\n  return `[${jsonReadyValues.join(',')}]`;\n}\n\nexport const ComboboxMultiInputInternal = forwardRef((props, forwardedRef) => {\n  const {\n    autoComplete = true,\n    inputReadOnly = false,\n    readOnly = false,\n    onClear,\n    onInputChange,\n    inputValue: controlledInputValue,\n    freeInput = false,\n    validate,\n    formatInputValue,\n    onValidationFail,\n    onDuplicate,\n    chipIconLabel,\n    clearIconLabel\n  } = props,\n        rest = _objectWithoutProperties(props, _excluded);\n\n  const {\n    data: {\n      navigationOption,\n      options,\n      inputValue: contextInputValue\n    },\n    onChange: contextOnChange,\n    inputCallbackRef,\n    state,\n    transition,\n    id,\n    isVisible\n  } = useContext(ComboboxMultiContext);\n  useInputPropRefs(props, ComboboxMultiContext);\n\n  function handleClear() {\n    transition && transition(ComboboxActionType.CLEAR);\n    contextOnChange && contextOnChange([]);\n    onClear && onClear();\n  }\n\n  function handleChange(values) {\n    transition && transition(ComboboxActionType.CHANGE_VALUES, {\n      inputValues: values\n    });\n    const newOptions = getOptionsFromValues(options, values);\n    contextOnChange && contextOnChange(newOptions);\n  }\n\n  const isInputting = useRef(false);\n  const handleInputValueChange = useCallback(value => {\n    const action = isInputting.current ? ComboboxActionType.CHANGE : ComboboxActionType.CHANGE_SILENT;\n    transition === null || transition === void 0 ? void 0 : transition(action, {\n      inputValue: value\n    });\n  }, [transition]);\n  const latestInputValueRef = useRef();\n  useEffect(() => {\n    if (contextInputValue !== undefined && contextInputValue !== latestInputValueRef.current) {\n      onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(contextInputValue);\n      latestInputValueRef.current = contextInputValue;\n    }\n  }, [contextInputValue]);\n  useEffect(() => {\n    if (controlledInputValue !== undefined) {\n      handleInputValueChange(controlledInputValue);\n      latestInputValueRef.current = controlledInputValue;\n    }\n  }, [controlledInputValue]);\n  const isControlled = controlledInputValue !== undefined;\n  const handleInputChange = useCallback((value, event) => {\n    isInputting.current = event !== undefined;\n\n    if (!isControlled) {\n      handleInputValueChange(value);\n    }\n\n    requestAnimationFrame(() => {\n      isInputting.current = false;\n    });\n  }, [handleInputValueChange, isControlled]);\n  const inputValues = options.map(formatOptionAsString);\n  let inputValue = contextInputValue || '';\n\n  if (autoComplete && (state === ComboboxState.NAVIGATING || state === ComboboxState.INTERACTING) && navigationOption) {\n    inputValue = getComboboxText(navigationOption);\n  }\n\n  const wrappedOnInputChange = useCallback((value, event) => {\n    handleInputChange(value, event);\n    onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(value, event);\n    latestInputValueRef.current = value;\n  }, [handleInputChange, onInputChange]);\n  const inputEvents = useInputEvents(props, ComboboxMultiContext);\n\n  function formatChip(value) {\n    const option = parseOption(value);\n    return option.label || option.value;\n  }\n\n  const {\n    selectOnClick: _selectOnClick\n  } = rest,\n        restForCommonProps = _objectWithoutProperties(rest, _excluded2);\n\n  const commonProps = _objectSpread(_objectSpread(_objectSpread({}, restForCommonProps), inputEvents), {}, {\n    'aria-activedescendant': navigationOption ? String(makeHash(navigationOption ? navigationOption.value : '')) : undefined,\n    'aria-autocomplete': 'both',\n    autoComplete: 'off',\n    chipIconLabel,\n    clearIconLabel,\n    formatChip,\n    formatTextToCopy,\n    id: `listbox-input-${id}`,\n    inputReadOnly,\n    inputValue,\n    isVisibleOptions: isVisible,\n    onChange: handleChange,\n    onClear: handleClear,\n    onInputChange: wrappedOnInputChange,\n    readOnly,\n    showCaret: true,\n    values: inputValues\n  });\n\n  const ref = useForkedRef(inputCallbackRef, forwardedRef);\n  return freeInput ? React.createElement(InputChips, _extends({}, commonProps, {\n    validate: validate,\n    formatInputValue: formatInputValue,\n    onValidationFail: onValidationFail,\n    onDuplicate: onDuplicate,\n    parseInputValue: parseInputValue,\n    ref: ref\n  })) : React.createElement(InputChipsBase, _extends({}, commonProps, {\n    ref: ref\n  }));\n});\nexport const ComboboxMultiInput = styled(ComboboxMultiInputInternal).attrs(_ref => {\n  let {\n    width: _width = '100%'\n  } = _ref;\n  return {\n    width: _width\n  };\n}).withConfig({\n  displayName: \"ComboboxMultiInput\",\n  componentId: \"sc-149ct1j-0\"\n})(_t || (_t = _`\n  ${0}\n  padding-right: 0;\n`), comboboxStyles);","map":{"version":3,"mappings":"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","names":["React","forwardRef","useContext","useCallback","useEffect","useRef","styled","useForkedRef","InputChips","InputChipsBase","joinValues","splitInputValue","ComboboxMultiContext","comboboxStyles","getComboboxText","formatOptionAsString","parseOption","makeHash","ComboboxActionType","ComboboxState","getOptionsFromValues","useInputEvents","useInputPropRefs","parseInputValue","value","parsed","JSON","parse","Array","isArray","map","option","stringify","e","formatTextToCopy","selectedValues","noJson","jsonReadyValues","join","ComboboxMultiInputInternal","props","forwardedRef","autoComplete","inputReadOnly","readOnly","onClear","onInputChange","inputValue","controlledInputValue","freeInput","validate","formatInputValue","onValidationFail","onDuplicate","chipIconLabel","clearIconLabel","rest","_excluded","data","navigationOption","options","contextInputValue","onChange","contextOnChange","inputCallbackRef","state","transition","id","isVisible","handleClear","CLEAR","handleChange","values","CHANGE_VALUES","inputValues","newOptions","isInputting","handleInputValueChange","action","current","CHANGE","CHANGE_SILENT","latestInputValueRef","undefined","isControlled","handleInputChange","event","requestAnimationFrame","NAVIGATING","INTERACTING","wrappedOnInputChange","inputEvents","formatChip","label","selectOnClick","_selectOnClick","restForCommonProps","_excluded2","commonProps","String","isVisibleOptions","showCaret","ref","_extends","ComboboxMultiInput","attrs","width","withConfig","displayName","componentId","_t"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Inputs/Combobox/ComboboxMultiInput/ComboboxMultiInput.tsx"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\n// Much of the following is pulled from https://github.com/reach/reach-ui\n// because their work is fantastic (but is not in TypeScript)\n\nimport type { Ref, FormEvent } from 'react'\nimport React, {\n  forwardRef,\n  useContext,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react'\nimport styled from 'styled-components'\nimport { useForkedRef } from '../../../../utils'\nimport type { InputChipsBaseProps } from '../../InputChips'\nimport {\n  InputChips,\n  InputChipsBase,\n  joinValues,\n  splitInputValue,\n} from '../../InputChips'\nimport { ComboboxMultiContext } from '../ComboboxContext'\nimport { comboboxStyles } from '../ComboboxInput'\nimport type { ComboboxMultiInputProps } from '../types'\nimport { getComboboxText, formatOptionAsString, parseOption } from '../utils'\nimport { makeHash } from '../utils/makeHash'\nimport {\n  ComboboxActionType,\n  ComboboxState,\n  getOptionsFromValues,\n} from '../utils/state'\nimport { useInputEvents } from '../utils/useInputEvents'\nimport { useInputPropRefs } from '../utils/useInputPropRefs'\n\nfunction parseInputValue(value: string) {\n  try {\n    const parsed = JSON.parse(value)\n    if (Array.isArray(parsed)) {\n      return parsed.map(option =>\n        typeof option === 'string' ? option : JSON.stringify(option)\n      )\n    }\n    return splitInputValue(value)\n  } catch (e) {\n    return splitInputValue(value)\n  }\n}\n\nfunction formatTextToCopy(selectedValues: string[]) {\n  let noJson = true\n  const jsonReadyValues = selectedValues.map(value => {\n    try {\n      JSON.parse(value)\n      noJson = false\n      return value\n    } catch (e) {\n      return `\"${value}\"`\n    }\n  })\n  if (noJson) {\n    return joinValues(selectedValues)\n  }\n  // Make it a JSON array string, so it can be parsed via JSON.parse and not need to escape commas\n  return `[${jsonReadyValues.join(',')}]`\n}\n\nexport const ComboboxMultiInputInternal = forwardRef(\n  (props: ComboboxMultiInputProps, forwardedRef: Ref<HTMLInputElement>) => {\n    const {\n      // updates the value in the input when navigating w/ the keyboard\n      autoComplete = true,\n      inputReadOnly = false,\n      readOnly = false,\n\n      // wrapped events\n      onClear,\n      onInputChange,\n\n      // might be controlled\n      inputValue: controlledInputValue,\n\n      // free form input\n      freeInput = false,\n      validate,\n      formatInputValue,\n      onValidationFail,\n      onDuplicate,\n\n      // localization\n      chipIconLabel,\n      clearIconLabel,\n\n      ...rest\n    } = props\n\n    const {\n      data: { navigationOption, options, inputValue: contextInputValue },\n      onChange: contextOnChange,\n      inputCallbackRef,\n      state,\n      transition,\n      id,\n      isVisible,\n    } = useContext(ComboboxMultiContext)\n\n    useInputPropRefs(props, ComboboxMultiContext)\n\n    function handleClear() {\n      transition && transition(ComboboxActionType.CLEAR)\n      contextOnChange && contextOnChange([])\n      onClear && onClear()\n    }\n\n    // if freeInput = false, only called when user removes chips from the input\n    // if freeInput = true, this is called when user inputs values via separators (enter key, comma, tab char, newline)\n    // or, if pasting chips from another ComboboxMultiInput with options where label != value, via JSON\n    function handleChange(values: string[]) {\n      transition &&\n        transition(ComboboxActionType.CHANGE_VALUES, { inputValues: values })\n\n      const newOptions = getOptionsFromValues(options, values)\n      contextOnChange && contextOnChange(newOptions)\n    }\n\n    // Whether controlled or uncontrolled, we need to determine if the inputValue changed\n    // from the user typing in the input - which should open the list, CHANGE - or otherwise\n    // (input being cleared via clear button or value tokenization, external initial state, etc) -\n    // which should not open the list, CHANGE_SILENT\n    const isInputting = useRef(false)\n\n    const handleInputValueChange = useCallback(\n      (value: string) => {\n        const action = isInputting.current\n          ? ComboboxActionType.CHANGE\n          : ComboboxActionType.CHANGE_SILENT\n        transition?.(action, { inputValue: value })\n      },\n      [transition]\n    )\n\n    // Use latestInputValueRef to track whether the contextInputValue change\n    // originated in this component. If it didn't (e.g. an option was selected\n    // or the list was closed) call onInputChange b/c it has not been called yet\n    const latestInputValueRef = useRef<string>()\n    useEffect(() => {\n      if (\n        contextInputValue !== undefined &&\n        contextInputValue !== latestInputValueRef.current\n      ) {\n        onInputChange?.(contextInputValue)\n        latestInputValueRef.current = contextInputValue\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [contextInputValue])\n\n    // If they are controlling the input value we still need to do transitions\n    // and update the context inputValue state\n    useEffect(() => {\n      if (controlledInputValue !== undefined) {\n        handleInputValueChange(controlledInputValue)\n        latestInputValueRef.current = controlledInputValue\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [controlledInputValue])\n\n    const isControlled = controlledInputValue !== undefined\n    // [*]... and when controlled, we don't trigger handleValueChange as the user\n    // types, instead the developer controls it with the onInputChange prop\n    const handleInputChange = useCallback(\n      (value: string, event?: FormEvent<HTMLInputElement>) => {\n        isInputting.current = event !== undefined\n        if (!isControlled) {\n          handleInputValueChange(value)\n        }\n        requestAnimationFrame(() => {\n          isInputting.current = false\n        })\n      },\n      [handleInputValueChange, isControlled]\n    )\n\n    const inputValues = options.map(formatOptionAsString)\n\n    let inputValue = contextInputValue || ''\n    if (\n      autoComplete &&\n      (state === ComboboxState.NAVIGATING ||\n        state === ComboboxState.INTERACTING) &&\n      navigationOption\n    ) {\n      // When idle, we don't have a navigationOption on ArrowUp/Down\n      inputValue = getComboboxText(navigationOption)\n    }\n\n    const wrappedOnInputChange = useCallback(\n      (value: string, event?: FormEvent<HTMLInputElement>) => {\n        handleInputChange(value, event)\n        onInputChange?.(value, event)\n        latestInputValueRef.current = value\n      },\n      [handleInputChange, onInputChange]\n    )\n\n    const inputEvents = useInputEvents(props, ComboboxMultiContext)\n\n    function formatChip(value: string) {\n      const option = parseOption(value)\n      return option.label || option.value\n    }\n\n    const { selectOnClick: _selectOnClick, ...restForCommonProps } = rest\n\n    const commonProps: InputChipsBaseProps = {\n      ...restForCommonProps,\n      ...inputEvents,\n      'aria-activedescendant': navigationOption\n        ? String(makeHash(navigationOption ? navigationOption.value : ''))\n        : undefined,\n      'aria-autocomplete': 'both',\n      autoComplete: 'off',\n      chipIconLabel,\n      clearIconLabel,\n      formatChip,\n      formatTextToCopy,\n      id: `listbox-input-${id}`,\n      inputReadOnly,\n      inputValue,\n      isVisibleOptions: isVisible,\n      onChange: handleChange,\n      onClear: handleClear,\n      onInputChange: wrappedOnInputChange,\n      readOnly,\n      showCaret: true,\n      values: inputValues,\n    }\n\n    const ref = useForkedRef<HTMLInputElement>(inputCallbackRef, forwardedRef)\n\n    return freeInput ? (\n      <InputChips\n        {...commonProps}\n        validate={validate}\n        formatInputValue={formatInputValue}\n        onValidationFail={onValidationFail}\n        onDuplicate={onDuplicate}\n        parseInputValue={parseInputValue}\n        ref={ref}\n      />\n    ) : (\n      <InputChipsBase {...commonProps} ref={ref} />\n    )\n  }\n)\n\nexport const ComboboxMultiInput = styled(ComboboxMultiInputInternal).attrs(\n  ({ width = '100%' }) => ({ width })\n)`\n  ${comboboxStyles}\n  padding-right: 0;\n`\n"]},"metadata":{},"sourceType":"module"}