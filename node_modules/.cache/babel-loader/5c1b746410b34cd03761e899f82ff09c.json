{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"children\", \"indicator\", \"isActive\", \"isSelected\", \"isMulti\"];\nimport React, { cloneElement, isValidElement, useContext, useMemo } from 'react';\nimport { Flex } from '../../../../Layout';\nimport { ComboboxContext, ComboboxMultiContext, OptionContext } from '../ComboboxContext';\n\nfunction isIndicatorFunction(children) {\n  return typeof children === 'function';\n}\n\nexport const ComboboxOptionIndicator = _ref => {\n  let {\n    children,\n    indicator: propsIndicator,\n    isActive,\n    isSelected,\n    isMulti\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  const context = useContext(ComboboxContext);\n  const contextMulti = useContext(ComboboxMultiContext);\n  const contextToUse = isMulti ? contextMulti : context;\n  const {\n    indicatorPropRef\n  } = contextToUse;\n  const indicatorToUse = propsIndicator !== undefined ? propsIndicator : indicatorPropRef && indicatorPropRef.current;\n  const option = useContext(OptionContext) || {\n    value: ''\n  };\n  const {\n    label,\n    value\n  } = option;\n  const indicator = useMemo(() => {\n    const indicatorProps = {\n      isActive,\n      isSelected,\n      label,\n      value\n    };\n\n    if (isValidElement(indicatorToUse)) {\n      return cloneElement(indicatorToUse, indicatorProps);\n    } else if (isIndicatorFunction(indicatorToUse)) {\n      return indicatorToUse(indicatorProps);\n    }\n\n    return indicatorToUse;\n  }, [indicatorToUse, isActive, isSelected, value, label]);\n  const content = indicator === undefined ? children : indicator;\n  return React.createElement(Flex, _extends({\n    width: content ? 'small' : 'none',\n    alignItems: \"flex-start\",\n    flexShrink: 0,\n    justifyContent: \"center\",\n    mr: \"xsmall\"\n  }, props), content);\n};","map":{"version":3,"mappings":";;;AAKA,OAAOA,KAAP,IAAgBC,YAAhB,EAA8BC,cAA9B,EAA8CC,UAA9C,EAA0DC,OAA1D,QAAyE,OAAzE;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SACEC,eADF,EAEEC,oBAFF,EAGEC,aAHF,QAIO,oBAJP;;AAUA,SAASC,mBAAT,CACEC,QADF,EAE+C;EAC7C,OAAO,OAAOA,QAAP,KAAoB,UAA3B;AACF;;AAEA,OAAO,MAAMC,uBAAuB,GAAGC,QAOH;EAAA,IAPI;IACtCF,QADsC;IAEtCG,SAAS,EAAEC,cAF2B;IAGtCC,QAHsC;IAItCC,UAJsC;IAKtCC;EALsC,IAOTL,IAAK;EAAA,IAD/BM,KAAK,4CAC0B;;EAClC,MAAMC,OAAO,GAAGhB,UAAU,CAACG,eAAD,CAA1B;EACA,MAAMc,YAAY,GAAGjB,UAAU,CAACI,oBAAD,CAA/B;EACA,MAAMc,YAAY,GAAGJ,OAAO,GAAGG,YAAH,GAAkBD,OAA9C;EACA,MAAM;IAAEG;EAAF,IAAuBD,YAA7B;EACA,MAAME,cAAc,GAClBT,cAAc,KAAKU,SAAnBV,GACIA,cADJA,GAEIQ,gBAAgB,IAAIA,gBAAgB,CAACG,OAH3C;EAKA,MAAMC,MAAM,GAAGvB,UAAU,CAACK,aAAD,CAAVL,IAA6B;IAAEwB,KAAK,EAAE;EAAT,CAA5C;EACA,MAAM;IAAEC,KAAF;IAASD;EAAT,IAAmBD,MAAzB;EAEA,MAAMb,SAAS,GAAGT,OAAO,CAAC,MAAM;IAC9B,MAAMyB,cAAc,GAAG;MAAEd,QAAF;MAAYC,UAAZ;MAAwBY,KAAxB;MAA+BD;IAA/B,CAAvB;;IACA,IAAIzB,cAAc,CAACqB,cAAD,CAAlB,EAAoC;MAClC,OAAOtB,YAAY,CAACsB,cAAD,EAAiBM,cAAjB,CAAnB;IACD,CAFD,MAEO,IAAIpB,mBAAmB,CAACc,cAAD,CAAvB,EAAyC;MAC9C,OAAOA,cAAc,CAACM,cAAD,CAArB;IACF;;IACA,OAAON,cAAP;EACD,CARwB,EAQtB,CAACA,cAAD,EAAiBR,QAAjB,EAA2BC,UAA3B,EAAuCW,KAAvC,EAA8CC,KAA9C,CARsB,CAAzB;EAUA,MAAME,OAAO,GAAGjB,SAAS,KAAKW,SAAdX,GAA0BH,QAA1BG,GAAqCA,SAArD;EAEA,OACEb,oBAACK,IAAD,EAAK0B;IACHC,KAAK,EAAEF,OAAO,GAAG,OAAH,GAAa,MADxB;IAEHG,UAAU,EAAC,YAFR;IAGHC,UAAU,EAAE,CAHT;IAIHC,cAAc,EAAC,QAJZ;IAKHC,EAAE,EAAC;EALA,GAMClB,KAND,CAAL,EAQGY,OARH,CADF;AAYD,CA5CM","names":["React","cloneElement","isValidElement","useContext","useMemo","Flex","ComboboxContext","ComboboxMultiContext","OptionContext","isIndicatorFunction","children","ComboboxOptionIndicator","_ref","indicator","propsIndicator","isActive","isSelected","isMulti","props","context","contextMulti","contextToUse","indicatorPropRef","indicatorToUse","undefined","current","option","value","label","indicatorProps","content","_extends","width","alignItems","flexShrink","justifyContent","mr"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Inputs/Combobox/ComboboxOptionIndicator/ComboboxOptionIndicator.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { ReactNode } from 'react'\nimport React, { cloneElement, isValidElement, useContext, useMemo } from 'react'\nimport { Flex } from '../../../../Layout'\nimport {\n  ComboboxContext,\n  ComboboxMultiContext,\n  OptionContext,\n} from '../ComboboxContext'\nimport type {\n  ComboboxOptionIndicatorFunction,\n  ComboboxOptionIndicatorProps,\n} from '../types'\n\nfunction isIndicatorFunction(\n  children: ReactNode | ComboboxOptionIndicatorFunction\n): children is ComboboxOptionIndicatorFunction {\n  return typeof children === 'function'\n}\n\nexport const ComboboxOptionIndicator = ({\n  children,\n  indicator: propsIndicator,\n  isActive,\n  isSelected,\n  isMulti,\n  ...props\n}: ComboboxOptionIndicatorProps) => {\n  const context = useContext(ComboboxContext)\n  const contextMulti = useContext(ComboboxMultiContext)\n  const contextToUse = isMulti ? contextMulti : context\n  const { indicatorPropRef } = contextToUse\n  const indicatorToUse =\n    propsIndicator !== undefined\n      ? propsIndicator\n      : indicatorPropRef && indicatorPropRef.current\n\n  const option = useContext(OptionContext) || { value: '' }\n  const { label, value } = option\n\n  const indicator = useMemo(() => {\n    const indicatorProps = { isActive, isSelected, label, value }\n    if (isValidElement(indicatorToUse)) {\n      return cloneElement(indicatorToUse, indicatorProps)\n    } else if (isIndicatorFunction(indicatorToUse)) {\n      return indicatorToUse(indicatorProps)\n    }\n    return indicatorToUse\n  }, [indicatorToUse, isActive, isSelected, value, label])\n\n  const content = indicator === undefined ? children : indicator\n\n  return (\n    <Flex\n      width={content ? 'small' : 'none'}\n      alignItems=\"flex-start\"\n      flexShrink={0}\n      justifyContent=\"center\"\n      mr=\"xsmall\"\n      {...props}\n    >\n      {content}\n    </Flex>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}