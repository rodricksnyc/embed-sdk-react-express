{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"onClick\", \"disabled\", \"role\"],\n      _excluded2 = [\"onKeyUp\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { useMemo } from 'react';\nimport { useFocusVisible } from './useFocusVisible';\nexport function useClickable(_ref) {\n  let {\n    onClick,\n    disabled,\n    role\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  const _useFocusVisible = useFocusVisible(rest),\n        {\n    onKeyUp\n  } = _useFocusVisible,\n        focusVisibleProps = _objectWithoutProperties(_useFocusVisible, _excluded2);\n\n  return useMemo(() => _objectSpread(_objectSpread({\n    disabled\n  }, focusVisibleProps), {}, {\n    onClick: e => {\n      if (!disabled) {\n        onClick === null || onClick === void 0 ? void 0 : onClick(e);\n      }\n    },\n    onKeyUp: e => {\n      const shouldHandle = !disabled && e.currentTarget === e.target;\n\n      if (shouldHandle) {\n        switch (e.key) {\n          case 'Enter':\n          case ' ':\n            onClick === null || onClick === void 0 ? void 0 : onClick(e);\n            break;\n        }\n      }\n\n      onKeyUp(e);\n    },\n    role: role || (onClick ? 'button' : undefined),\n    tabIndex: disabled ? undefined : 0\n  }), [disabled, role, onClick, onKeyUp, focusVisibleProps]);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,SAASA,OAAT,QAAwB,OAAxB;AAEA,SAASC,eAAT,QAAgC,mBAAhC;AAyBA,OAAO,SAASC,YAAT,CAAqBC,IAArB,EAKyC;EAAA,IALI;IAClDC,OADkD;IAElDC,QAFkD;IAGlDC;EAHkD,IAK7BH,IAAyB;EAAA,IAD3CI,IAAI,4CACuC;;EAC9C,yBAA0CN,eAAe,CAACM,IAAD,CAAzD;EAAA,MAAM;IAAEC;EAAF,IAAiCC,gBAAvC;EAAA,MAAoBC,iBAAiB,yDAArC;;EAEA,OAAOV,OAAO,CACZ;IACEK;EADF,GAEKK,iBAFL,GAEsB,EAFtB,EAEsB;IACpBN,OAAO,EAAGO,CAAiC,IAAK;MAC9C,IAAI,CAACN,QAAL,EAAe;QAEbD,OAAO,SAAPA,WAAO,WAAPA,GAAO,MAAPA,UAAO,CAAGO,CAAH,CAAPP;MACF;IACD,CANmB;IAOpBI,OAAO,EAAGG,CAAmB,IAAK;MAChC,MAAMC,YAAY,GAAG,CAACP,QAAD,IAAaM,CAAC,CAACE,aAAFF,KAAoBA,CAAC,CAACG,MAAxD;;MACA,IAAIF,YAAJ,EAAkB;QAChB,QAAQD,CAAC,CAACI,GAAV;UACE,KAAK,OAAL;UACA,KAAK,GAAL;YACEX,OAAO,SAAPA,WAAO,WAAPA,GAAO,MAAPA,UAAO,CAAGO,CAAH,CAAPP;YACA;QAJJ;MAMF;;MACAI,OAAO,CAACG,CAAD,CAAPH;IACD,CAlBmB;IAqBpBF,IAAI,EAAEA,IAAI,KAAKF,OAAO,GAAG,QAAH,GAAcY,SAA1B,CArBU;IAsBpBC,QAAQ,EAAEZ,QAAQ,GAAGW,SAAH,GAAe;EAtBb,CAFtB,CADY,EA2BZ,CAACX,QAAD,EAAWC,IAAX,EAAiBF,OAAjB,EAA0BI,OAA1B,EAAmCE,iBAAnC,CA3BY,CAAd;AA6BF","names":["useMemo","useFocusVisible","useClickable","_ref","onClick","disabled","role","rest","onKeyUp","_useFocusVisible","focusVisibleProps","e","shouldHandle","currentTarget","target","key","undefined","tabIndex"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useClickable.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { CompatibleHTMLProps } from '@looker/design-tokens'\nimport type { KeyboardEvent, MouseEvent as ReactMouseEvent } from 'react'\nimport { useMemo } from 'react'\nimport type { FocusVisibleProps } from './useFocusVisible'\nimport { useFocusVisible } from './useFocusVisible'\n\n// Helper interfaces for components using this hook\nexport type GenericOnClick<E extends HTMLElement> = (\n  e: ReactMouseEvent<E, MouseEvent> | KeyboardEvent<E>\n) => void\n\nexport interface GenericClickProps<E extends HTMLElement>\n  extends Omit<CompatibleHTMLProps<E>, 'onClick'> {\n  onClick?: GenericOnClick<E>\n}\n\ntype Attributes = 'disabled' | 'onBlur' | 'onKeyUp' | 'role'\n\nexport interface UseClickableProps<E extends HTMLElement>\n  extends Pick<CompatibleHTMLProps<E>, Attributes>,\n    Pick<GenericClickProps<E>, 'onClick'> {}\n\nexport interface UseClickableResult<E extends HTMLElement>\n  extends Pick<CompatibleHTMLProps<E>, Attributes | 'onClick' | 'tabIndex'>,\n    FocusVisibleProps {}\n/**\n * This hook provides keyboard accessibility for any component that renders a non-button element\n * that is both focus-able and clickable. The component should handle styling for focusVisible.\n */\nexport function useClickable<E extends HTMLElement>({\n  onClick,\n  disabled,\n  role,\n  ...rest\n}: UseClickableProps<E>): UseClickableResult<E> {\n  const { onKeyUp, ...focusVisibleProps } = useFocusVisible(rest)\n\n  return useMemo(\n    () => ({\n      disabled,\n      ...focusVisibleProps,\n      onClick: (e: ReactMouseEvent<E, MouseEvent>) => {\n        if (!disabled) {\n          // use onClick from useFocusVisible â€“ it's the true click handler\n          onClick?.(e)\n        }\n      },\n      onKeyUp: (e: KeyboardEvent<E>) => {\n        const shouldHandle = !disabled && e.currentTarget === e.target\n        if (shouldHandle) {\n          switch (e.key) {\n            case 'Enter':\n            case ' ':\n              onClick?.(e)\n              break\n          }\n        }\n        onKeyUp(e)\n      },\n      // if onClick is used, role should be 'button' unless otherwise specified\n      // otherwise undefined b/c depending on usage, 'button' could be misleading\n      role: role || (onClick ? 'button' : undefined),\n      tabIndex: disabled ? undefined : 0,\n    }),\n    [disabled, role, onClick, onKeyUp, focusVisibleProps]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}