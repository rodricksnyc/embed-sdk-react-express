{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"ref\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { useMeasuredElement, useCallbackRef } from '../utils';\nimport { useRipple } from './useRipple';\nexport const useBoundedRipple = _ref => {\n  let {\n    ref: forwardedRef\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  const [element, ref] = useCallbackRef(forwardedRef);\n  const [{\n    height,\n    width\n  }] = useMeasuredElement(element);\n  const result = useRipple(_objectSpread(_objectSpread({}, props), {}, {\n    bounded: true,\n    height,\n    width\n  }));\n  return _objectSpread(_objectSpread({}, result), {}, {\n    ref\n  });\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,SAASA,kBAAT,EAA6BC,cAA7B,QAAmD,UAAnD;AACA,SAASC,SAAT,QAA0B,aAA1B;AAOA,OAAO,MAAMC,gBAAgB,GAAGC,QAG6B;EAAA,IAHS;IACpEC,GAAG,EAAEC;EAD+D,IAG3CF,IAAkC;EAAA,IADxDG,KAAK,4CACmD;;EAC3D,MAAM,CAACC,OAAD,EAAUH,GAAV,IAAiBJ,cAAc,CAACK,YAAD,CAArC;EACA,MAAM,CAAC;IAAEG,MAAF;IAAUC;EAAV,CAAD,IAAsBV,kBAAkB,CAACQ,OAAD,CAA9C;EACA,MAAMG,MAAM,GAAGT,SAAS,iCAAMK,KAAN,GAAW,EAAX,EAAW;IAAEK,OAAO,EAAE,IAAX;IAAiBH,MAAjB;IAAyBC;EAAzB,CAAX,EAAxB;EACA,uCAAYC,MAAZ,GAAkB,EAAlB,EAAkB;IAAEN;EAAF,CAAlB;AACD,CARM","names":["useMeasuredElement","useCallbackRef","useRipple","useBoundedRipple","_ref","ref","forwardedRef","props","element","height","width","result","bounded"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Ripple/useBoundedRipple.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { useMeasuredElement, useCallbackRef } from '../utils'\nimport { useRipple } from './useRipple'\nimport type { UseBoundedRippleProps, UseBoundedRippleResponse } from './types'\n\n/**\n * @returns callbacks should be mapped to DOM event handlers (see useRippleHandlers)\n * and remaining props should be passed to an internal element that includes rippleStyle\n */\nexport const useBoundedRipple = <T extends HTMLElement = HTMLElement>({\n  ref: forwardedRef,\n  ...props\n}: UseBoundedRippleProps<T>): UseBoundedRippleResponse<T> => {\n  const [element, ref] = useCallbackRef(forwardedRef)\n  const [{ height, width }] = useMeasuredElement(element)\n  const result = useRipple({ ...props, bounded: true, height, width })\n  return { ...result, ref }\n}\n"]},"metadata":{},"sourceType":"module"}