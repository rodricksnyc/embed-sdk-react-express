{"ast":null,"code":"import { useState } from 'react';\nexport const useSelectManager = function (possibilities) {\n  let defaultSelections = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const [selections, setSelections] = useState(defaultSelections);\n\n  const onSelect = selectionId => {\n    setSelections(selections.includes(selectionId) ? selections.filter(itemId => possibilities.includes(itemId) && itemId !== selectionId) : [...selections, selectionId]);\n  };\n\n  const onSelectAll = () => {\n    setSelections(selections.length ? [] : possibilities);\n  };\n\n  return {\n    onSelect,\n    onSelectAll,\n    selections,\n    setSelections\n  };\n};","map":{"version":3,"mappings":"AAKA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,UAC9BC,aAD8B,EAG3B;EAAA,IADHC,iBACG,uEAD2B,EAC3B;EACH,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAWG,iBAAX,CAA5C;;EAEA,MAAMG,QAAQ,GAAIC,WAAmB,IAAK;IAMxCF,aAAa,CACXD,UAAU,CAACI,QAAXJ,CAAoBG,WAApBH,IACIA,UAAU,CAACK,MAAXL,CACEM,MAAM,IAAIR,aAAa,CAACM,QAAdN,CAAuBQ,MAAvBR,KAAkCQ,MAAM,KAAKH,WADzDH,CADJA,GAII,CAAC,GAAGA,UAAJ,EAAgBG,WAAhB,CALO,CAAbF;EAOD,CAbD;;EAeA,MAAMM,WAAW,GAAG,MAAM;IACxBN,aAAa,CAACD,UAAU,CAACQ,MAAXR,GAAoB,EAApBA,GAAyBF,aAA1B,CAAbG;EACD,CAFD;;EAIA,OAAO;IAAEC,QAAF;IAAYK,WAAZ;IAAyBP,UAAzB;IAAqCC;EAArC,CAAP;AACD,CA1BM","names":["useState","useSelectManager","possibilities","defaultSelections","selections","setSelections","onSelect","selectionId","includes","filter","itemId","onSelectAll","length"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/DataTable/utils/useSelectManager.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useState } from 'react'\n\nexport const useSelectManager = (\n  possibilities: string[],\n  defaultSelections: string[] = []\n) => {\n  const [selections, setSelections] = useState<string[]>(defaultSelections)\n\n  const onSelect = (selectionId: string) => {\n    /*\n      Note: In the event that selections includes the item being selected, we call filter only on selectableItems.\n      This is to avoid the situation where you have non-displayed items selected but only some displayed items.\n      Doing the above will mean you have selected items that cannot be unselected (i.e. there's no way to interact with non-displayed items).\n     */\n    setSelections(\n      selections.includes(selectionId)\n        ? selections.filter(\n            itemId => possibilities.includes(itemId) && itemId !== selectionId\n          )\n        : [...selections, selectionId]\n    )\n  }\n\n  const onSelectAll = () => {\n    setSelections(selections.length ? [] : possibilities)\n  }\n\n  return { onSelect, onSelectAll, selections, setSelections }\n}\n"]},"metadata":{},"sourceType":"module"}