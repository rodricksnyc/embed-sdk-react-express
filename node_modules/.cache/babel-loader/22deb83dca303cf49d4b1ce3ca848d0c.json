{"ast":null,"code":"import { useEffect } from 'react';\nimport some from 'lodash/some';\nimport every from 'lodash/every';\nexport function useMixedStateCheckbox(_ref) {\n  let {\n    parent,\n    children\n  } = _ref;\n  useEffect(() => {\n    if (every(children, ['state', true])) {\n      parent.setState(true);\n    } else if (some(children, ['state', true])) {\n      parent.setState('mixed');\n    } else {\n      parent.setState(false);\n    }\n  }, [children, parent]);\n\n  const handleParentChange = () => {\n    const newState = parent.state !== true;\n    parent.setState(newState);\n    children.map(child => child.setState(newState));\n  };\n\n  return handleParentChange;\n}","map":{"version":3,"mappings":"AAKA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAaA,OAAO,SAASC,qBAAT,OAAmE;EAAA,IAApC;IAAEC,MAAF;IAAUC;EAAV,CAAoC;EACxEL,SAAS,CAAC,MAAM;IACd,IAAIE,KAAK,CAACG,QAAD,EAAW,CAAC,OAAD,EAAU,IAAV,CAAX,CAAT,EAAsC;MACpCD,MAAM,CAACE,QAAPF,CAAgB,IAAhBA;IACD,CAFD,MAEO,IAAIH,IAAI,CAACI,QAAD,EAAW,CAAC,OAAD,EAAU,IAAV,CAAX,CAAR,EAAqC;MAC1CD,MAAM,CAACE,QAAPF,CAAgB,OAAhBA;IACD,CAFM,MAEA;MACLA,MAAM,CAACE,QAAPF,CAAgB,KAAhBA;IACF;EACD,CARQ,EAQN,CAACC,QAAD,EAAWD,MAAX,CARM,CAATJ;;EAUA,MAAMO,kBAAkB,GAAG,MAAM;IAC/B,MAAMC,QAAQ,GAAGJ,MAAM,CAACK,KAAPL,KAAiB,IAAlC;IACAA,MAAM,CAACE,QAAPF,CAAgBI,QAAhBJ;IACAC,QAAQ,CAACK,GAATL,CAAaM,KAAK,IAAIA,KAAK,CAACL,QAANK,CAAeH,QAAfG,CAAtBN;EACD,CAJD;;EAMA,OAAOE,kBAAP;AACF","names":["useEffect","some","every","useMixedStateCheckbox","parent","children","setState","handleParentChange","newState","state","map","child"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Inputs/Checkbox/useMixedStateCheckbox.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { Dispatch, SetStateAction } from 'react'\nimport { useEffect } from 'react'\nimport some from 'lodash/some'\nimport every from 'lodash/every'\nimport type { MixedBoolean } from './Checkbox'\n\nexport interface CheckboxTreeAction {\n  state: MixedBoolean\n  setState: Dispatch<SetStateAction<MixedBoolean>>\n}\n\nexport interface CheckboxTree {\n  parent: CheckboxTreeAction\n  children: CheckboxTreeAction[]\n}\n\nexport function useMixedStateCheckbox({ parent, children }: CheckboxTree) {\n  useEffect(() => {\n    if (every(children, ['state', true])) {\n      parent.setState(true)\n    } else if (some(children, ['state', true])) {\n      parent.setState('mixed')\n    } else {\n      parent.setState(false)\n    }\n  }, [children, parent])\n\n  const handleParentChange = () => {\n    const newState = parent.state !== true\n    parent.setState(newState)\n    children.map(child => child.setState(newState))\n  }\n\n  return handleParentChange\n}\n"]},"metadata":{},"sourceType":"module"}