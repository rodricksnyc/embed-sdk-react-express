{"ast":null,"code":"let _2 = t => t,\n    _t;\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Grid } from '../Layout';\nexport const DaysOfWeek = styled(_ref => {\n  let {\n    className,\n    firstDayOfWeek,\n    locale\n  } = _ref;\n  const allDays = Array.from(Array(7), (_, i) => {\n    var _locale$localize;\n\n    return (_locale$localize = locale.localize) === null || _locale$localize === void 0 ? void 0 : _locale$localize.day(i, {\n      width: 'narrow'\n    });\n  });\n  const daysOfWeek = [...allDays.slice(firstDayOfWeek), ...allDays.slice(0, firstDayOfWeek)];\n  return React.createElement(\"div\", {\n    className: className\n  }, React.createElement(Grid, {\n    columns: 7,\n    gap: \"none\"\n  }, daysOfWeek.map((day, i) => React.createElement(\"div\", {\n    key: i\n  }, day))));\n}).withConfig({\n  displayName: \"DaysOfWeek\",\n  componentId: \"sc-10k3m05-0\"\n})(_t || (_t = _2`\n  background: ${0};\n  ${0} {\n    padding-left: ${0};\n    width: fit-content;\n    div {\n      color: ${0};\n      font-family: ${0};\n      font-size: ${0};\n      line-height: ${0};\n      text-align: center;\n      width: ${0};\n    }\n  }\n`), _ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return theme.colors.ui1;\n}, Grid, _ref3 => {\n  let {\n    theme\n  } = _ref3;\n  return theme.space.u5;\n}, _ref4 => {\n  let {\n    theme\n  } = _ref4;\n  return theme.colors.text2;\n}, _ref5 => {\n  let {\n    theme\n  } = _ref5;\n  return theme.fonts.body;\n}, _ref6 => {\n  let {\n    theme\n  } = _ref6;\n  return theme.fontSizes.xsmall;\n}, _ref7 => {\n  let {\n    theme\n  } = _ref7;\n  return theme.space.u8;\n}, _ref8 => {\n  let {\n    theme\n  } = _ref8;\n  return theme.space.u8;\n});","map":{"version":3,"mappings":";;;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,QAAqB,WAArB;AAOA,OAAO,MAAMC,UAAU,GAAGF,MAAM,CAC9B,QAA4D;EAAA,IAA3D;IAAEG,SAAF;IAAaC,cAAb;IAA6BC;EAA7B,CAA2D;EAC1D,MAAMC,OAAiB,GAAGC,KAAK,CAACC,IAAND,CAAWA,KAAK,CAAC,CAAD,CAAhBA,EAAqB,CAACE,CAAD,EAAIC,CAAJ,KAAK;IAAA;;IAAA,2BAClDL,MAAM,CAACM,QAD2C,MACnC,IADmC,IACnCC,2BADmC,GACnC,MADmC,GAClDA,iBAAiBC,GAAjB,CAAqBH,CAArB,EAAwB;MAAEI,KAAK,EAAE;IAAT,CAAxB,CADkD;EACN,CADpBP,CAA1B;EAGA,MAAMQ,UAAU,GAAG,CACjB,GAAGT,OAAO,CAACU,KAARV,CAAcF,cAAdE,CADc,EAEjB,GAAGA,OAAO,CAACU,KAARV,CAAc,CAAdA,EAAiBF,cAAjBE,CAFc,CAAnB;EAKA,OACEP;IAAKI,SAAS,EAAEA;EAAhB,GACEJ,oBAACE,IAAD,EAAK;IAACgB,OAAO,EAAE,CAAV;IAAaC,GAAG,EAAC;EAAjB,CAAL,EACGH,UAAU,CAACI,GAAXJ,CAAe,CAACF,GAAD,EAAMH,CAAN,KACdX;IAAKqB,GAAG,EAAEV;EAAV,GAAcG,GAAd,CADDE,CADH,CADF,CADF;AASD,CAnB6B,CAANf,CAoBzBqB,UApByBrB,CAoBzB;EAAAsB;EAAAC;AAAA,CApByBvB,EAoBzBwB,cAAC;AACF,gBAAc,CAAkC;AAChD,IAAE,CAAO;AACT,oBAAkB,CAAgC;AAClD;AACA;AACA,eAAa,CAAoC;AACjD,qBAAmB,CAAkC;AACrD,mBAAiB,CAAwC;AACzD,qBAAmB,CAAgC;AACnD;AACA,eAAa,CAAgC;AAC7C;AACA;AACA,CAdC,CApByBxB,EAqBV;EAAA,IAAC;IAAEyB;EAAF,CAAD;EAAA,OAAeA,KAAK,CAACC,MAAND,CAAaE,GAA5B;AAAA,CArBU3B,EAsBtBC,IAtBsBD,EAuBN;EAAA,IAAC;IAAEyB;EAAF,CAAD;EAAA,OAAeA,KAAK,CAACG,KAANH,CAAYI,EAA3B;AAAA,CAvBM7B,EA0BX;EAAA,IAAC;IAAEyB;EAAF,CAAD;EAAA,OAAeA,KAAK,CAACC,MAAND,CAAaK,KAA5B;AAAA,CA1BW9B,EA2BL;EAAA,IAAC;IAAEyB;EAAF,CAAD;EAAA,OAAeA,KAAK,CAACM,KAANN,CAAYO,IAA3B;AAAA,CA3BKhC,EA4BP;EAAA,IAAC;IAAEyB;EAAF,CAAD;EAAA,OAAeA,KAAK,CAACQ,SAANR,CAAgBS,MAA/B;AAAA,CA5BOlC,EA6BL;EAAA,IAAC;IAAEyB;EAAF,CAAD;EAAA,OAAeA,KAAK,CAACG,KAANH,CAAYU,EAA3B;AAAA,CA7BKnC,EA+BX;EAAA,IAAC;IAAEyB;EAAF,CAAD;EAAA,OAAeA,KAAK,CAACG,KAANH,CAAYU,EAA3B;AAAA,CA/BWnC,CAAnB","names":["React","styled","Grid","DaysOfWeek","className","firstDayOfWeek","locale","allDays","Array","from","_","i","localize","_locale$localize","day","width","daysOfWeek","slice","columns","gap","map","key","withConfig","displayName","componentId","_t","theme","colors","ui1","space","u5","text2","fonts","body","fontSizes","xsmall","u8"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Calendar/DaysOfWeek.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Grid } from '../Layout'\nimport type { CalendarLocaleProps } from './types'\n\nexport type DaysOfWeekProps = CalendarLocaleProps & {\n  className?: string\n}\n\nexport const DaysOfWeek = styled(\n  ({ className, firstDayOfWeek, locale }: DaysOfWeekProps) => {\n    const allDays: string[] = Array.from(Array(7), (_, i) =>\n      locale.localize?.day(i, { width: 'narrow' })\n    )\n    const daysOfWeek = [\n      ...allDays.slice(firstDayOfWeek),\n      ...allDays.slice(0, firstDayOfWeek),\n    ]\n\n    return (\n      <div className={className}>\n        <Grid columns={7} gap=\"none\">\n          {daysOfWeek.map((day, i) => (\n            <div key={i}>{day}</div>\n          ))}\n        </Grid>\n      </div>\n    )\n  }\n)`\n  background: ${({ theme }) => theme.colors.ui1};\n  ${Grid} {\n    padding-left: ${({ theme }) => theme.space.u5};\n    width: fit-content;\n    div {\n      color: ${({ theme }) => theme.colors.text2};\n      font-family: ${({ theme }) => theme.fonts.body};\n      font-size: ${({ theme }) => theme.fontSizes.xsmall};\n      line-height: ${({ theme }) => theme.space.u8};\n      text-align: center;\n      width: ${({ theme }) => theme.space.u8};\n    }\n  }\n`\n"]},"metadata":{},"sourceType":"module"}