{"ast":null,"code":"import { LookerEmbedSDK } from \"@looker/embed-sdk\";\nexport const EmbedSDKInit = () => {\n  LookerEmbedSDK.init(process.env.LOOKERSDK_EMBED_HOST, {\n    // The location of the service which will privately create a signed URL\n    url: '/api/auth',\n    headers: [// include some factor which your auth service can use to uniquely identify a user, so that a user specific url can be returned. This could be a token or ID\n    {\n      name: 'usertoken',\n      value: 'user1'\n    }]\n  });\n};\n_c = EmbedSDKInit;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmbedSDKInit\");","map":{"version":3,"names":["LookerEmbedSDK","EmbedSDKInit","init","process","env","LOOKERSDK_EMBED_HOST","url","headers","name","value"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/src/components/EmbedInit.js"],"sourcesContent":["import { LookerEmbedSDK } from \"@looker/embed-sdk\"\n\n  export const EmbedSDKInit = () => {\n        LookerEmbedSDK.init(\n            process.env.LOOKERSDK_EMBED_HOST,\n            {\n              // The location of the service which will privately create a signed URL\n              url: '/api/auth'\n              , headers: [\n                // include some factor which your auth service can use to uniquely identify a user, so that a user specific url can be returned. This could be a token or ID\n                { name: 'usertoken', value: 'user1' }\n              ]\n            }\n          )\n    }\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,mBAA/B;AAEE,OAAO,MAAMC,YAAY,GAAG,MAAM;EAC5BD,cAAc,CAACE,IAAf,CACIC,OAAO,CAACC,GAAR,CAAYC,oBADhB,EAEI;IACE;IACAC,GAAG,EAAE,WAFP;IAGIC,OAAO,EAAE,CACT;IACA;MAAEC,IAAI,EAAE,WAAR;MAAqBC,KAAK,EAAE;IAA5B,CAFS;EAHb,CAFJ;AAWH,CAZI;KAAMR,Y"},"metadata":{},"sourceType":"module"}