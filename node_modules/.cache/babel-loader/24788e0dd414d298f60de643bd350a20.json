{"ast":null,"code":"import React from 'react';\nimport isEqual from 'lodash/isEqual';\n\nfunction checkDeps(deps) {\n  if (!deps || !deps.length) {\n    throw new Error('useEffectDeepEquals should not be used with no dependencies. Use React.useEffect instead.');\n  }\n\n  if (deps.every(isPrimitive)) {\n    throw new Error('useEffectDeepEquals should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n  }\n}\n\nfunction isPrimitive(val) {\n  return val == null || /^[sbn]/.test(typeof val);\n}\n\nexport function useDeepCompareMemoize(value) {\n  const ref = React.useRef(value);\n  const signalRef = React.useRef(0);\n\n  if (!isEqual(value, ref.current)) {\n    ref.current = value;\n    signalRef.current += 1;\n  }\n\n  return React.useMemo(() => ref.current, [signalRef.current]);\n}\nexport const useEffectDeepEquals = (callback, dependencies) => {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies);\n  }\n\n  return React.useEffect(callback, useDeepCompareMemoize(dependencies));\n};","map":{"version":3,"mappings":"AAKA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAMA,SAASC,SAAT,CAAmBC,IAAnB,EAAyC;EACvC,IAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACC,MAAnB,EAA2B;IACzB,MAAM,IAAIC,KAAJ,CACJ,2FADI,CAAN;EAGF;;EACA,IAAIF,IAAI,CAACG,KAALH,CAAWI,WAAXJ,CAAJ,EAA6B;IAC3B,MAAM,IAAIE,KAAJ,CACJ,sHADI,CAAN;EAGF;AACF;;AAEA,SAASE,WAAT,CAAqBC,GAArB,EAAmC;EACjC,OAAOA,GAAG,IAAI,IAAPA,IAAe,SAASC,IAAT,CAAc,OAAOD,GAArB,CAAtB;AACF;;AAMA,OAAO,SAASE,qBAAT,CAAkCC,KAAlC,EAA4C;EACjD,MAAMC,GAAG,GAAGZ,KAAK,CAACa,MAANb,CAAgBW,KAAhBX,CAAZ;EACA,MAAMc,SAAS,GAAGd,KAAK,CAACa,MAANb,CAAqB,CAArBA,CAAlB;;EAEA,IAAI,CAACC,OAAO,CAACU,KAAD,EAAQC,GAAG,CAACG,OAAZ,CAAZ,EAAkC;IAChCH,GAAG,CAACG,OAAJH,GAAcD,KAAdC;IACAE,SAAS,CAACC,OAAVD,IAAqB,CAArBA;EACF;;EAGA,OAAOd,KAAK,CAACgB,OAANhB,CAAc,MAAMY,GAAG,CAACG,OAAxBf,EAAiC,CAACc,SAAS,CAACC,OAAX,CAAjCf,CAAP;AACF;AAUA,OAAO,MAAMiB,mBAAmB,GAAG,CACjCC,QADiC,EAEjCC,YAFiC,KAGxB;EACT,IAAIC,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;IACzClB,SAAS,CAACiB,YAAD,CAATjB;EACF;;EAEA,OAAOF,KAAK,CAACuB,SAANvB,CAAgBkB,QAAhBlB,EAA0BU,qBAAqB,CAACS,YAAD,CAA/CnB,CAAP;AACD,CATM","names":["React","isEqual","checkDeps","deps","length","Error","every","isPrimitive","val","test","useDeepCompareMemoize","value","ref","useRef","signalRef","current","useMemo","useEffectDeepEquals","callback","dependencies","process","env","NODE_ENV","useEffect"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useEffectDeepEquals.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport isEqual from 'lodash/isEqual'\n\ntype UseEffectParams = Parameters<typeof React.useEffect>\ntype EffectCallback = UseEffectParams[0]\ntype DependencyList = UseEffectParams[1]\n\nfunction checkDeps(deps: DependencyList) {\n  if (!deps || !deps.length) {\n    throw new Error(\n      'useEffectDeepEquals should not be used with no dependencies. Use React.useEffect instead.'\n    )\n  }\n  if (deps.every(isPrimitive)) {\n    throw new Error(\n      'useEffectDeepEquals should not be used with dependencies that are all primitive values. Use React.useEffect instead.'\n    )\n  }\n}\n\nfunction isPrimitive(val: unknown) {\n  return val == null || /^[sbn]/.test(typeof val)\n}\n\n/**\n * @param value the value to be memoized (usually a dependency list)\n * @returns a memoized version of the value as long as it remains deeply equal\n */\nexport function useDeepCompareMemoize<T>(value: T) {\n  const ref = React.useRef<T>(value)\n  const signalRef = React.useRef<number>(0)\n\n  if (!isEqual(value, ref.current)) {\n    ref.current = value\n    signalRef.current += 1\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useMemo(() => ref.current, [signalRef.current])\n}\n\n/**\n * An alternative rewrite to useEffect for situations where you need\n * to compare complex, deeply nested objects in the dependency array.\n *\n * @param callback function to call when dependencies change\n * @param dependencies an array of objects to compare\n */\n\nexport const useEffectDeepEquals = (\n  callback: EffectCallback,\n  dependencies: DependencyList\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies)\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useEffect(callback, useDeepCompareMemoize(dependencies))\n}\n"]},"metadata":{},"sourceType":"module"}