{"ast":null,"code":"import React, { useContext } from 'react';\nimport { HoverDisclosureContext } from './HoverDisclosureContext';\nexport const HoverDisclosure = _ref => {\n  let {\n    children,\n    width,\n    visible\n  } = _ref;\n  const context = useContext(HoverDisclosureContext);\n  const isVisible = visible || context.visible;\n  const style = width ? {\n    flexBasis: width,\n    flexShrink: 0,\n    width\n  } : {};\n  return React.createElement(\"div\", {\n    style: style\n  }, isVisible ? children : null);\n};","map":{"version":3,"mappings":"AAMA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAaA,OAAO,MAAMC,eAAe,GAAG,QAIH;EAAA,IAJI;IAC9BC,QAD8B;IAE9BC,KAF8B;IAG9BC;EAH8B,CAIJ;EAC1B,MAAMC,OAAO,GAAGN,UAAU,CAACC,sBAAD,CAA1B;EACA,MAAMM,SAAS,GAAGF,OAAO,IAAIC,OAAO,CAACD,OAArC;EAEA,MAAMG,KAAoB,GAAGJ,KAAK,GAC9B;IAAEK,SAAS,EAAEL,KAAb;IAAoBM,UAAU,EAAE,CAAhC;IAAmCN;EAAnC,CAD8B,GAE9B,EAFJ;EAIA,OAAOL;IAAKS,KAAK,EAAEA;EAAZ,GAAoBD,SAAS,GAAGJ,QAAH,GAAc,IAA3C,CAAP;AACD,CAbM","names":["React","useContext","HoverDisclosureContext","HoverDisclosure","children","width","visible","context","isVisible","style","flexBasis","flexShrink"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/HoverDisclosure/HoverDisclosure.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { CSSProperties, ReactNode } from 'react'\nimport React, { useContext } from 'react'\nimport { HoverDisclosureContext } from './HoverDisclosureContext'\n\nexport interface HoverDisclosureProps {\n  visible?: boolean\n  /**\n   * In some circumstances it's required to reserve space for the hidden content\n   * before it is revealed. Specifying this will reserve a space of the specified\n   * width (in pixels)\n   */\n  width?: number\n  children?: ReactNode\n}\n\nexport const HoverDisclosure = ({\n  children,\n  width,\n  visible,\n}: HoverDisclosureProps) => {\n  const context = useContext(HoverDisclosureContext)\n  const isVisible = visible || context.visible\n\n  const style: CSSProperties = width\n    ? { flexBasis: width, flexShrink: 0, width }\n    : {}\n\n  return <div style={style}>{isVisible ? children : null}</div>\n}\n"]},"metadata":{},"sourceType":"module"}