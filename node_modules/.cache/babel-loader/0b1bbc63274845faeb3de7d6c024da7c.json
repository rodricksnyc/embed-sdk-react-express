{"ast":null,"code":"import getLuminance from 'polished/lib/color/getLuminance';\nimport mix from 'polished/lib/color/mix';\nimport { scaleMixAmount } from './scaleMixAmount';\nexport const mixScaledColors = (mixAmount, foreground, background) => {\n  const colorLuminance = getLuminance(background);\n  const luminanceAdjustmentScale = {\n    lower: 1.3,\n    lowest: 1.7\n  };\n  let adjustment = mixAmount;\n\n  if (colorLuminance < 0.16 && colorLuminance > 0.08) {\n    adjustment = luminanceAdjustmentScale.lower;\n  } else if (colorLuminance < 0.08) {\n    adjustment = luminanceAdjustmentScale.lowest;\n  }\n\n  const mixAdjustment = colorLuminance > 0.3 ? mixAmount : scaleMixAmount(mixAmount, adjustment);\n  return mix(mixAdjustment / 100, foreground, background);\n};","map":{"version":3,"mappings":"AAKA,OAAOA,YAAP,MAAyB,iCAAzB;AACA,OAAOC,GAAP,MAAgB,wBAAhB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,MAAMC,eAAe,GAAG,CAC7BC,SAD6B,EAE7BC,UAF6B,EAG7BC,UAH6B,KAI1B;EAEH,MAAMC,cAAc,GAAGP,YAAY,CAACM,UAAD,CAAnC;EAIA,MAAME,wBAAwB,GAAG;IAC/BC,KAAK,EAAE,GADwB;IAE/BC,MAAM,EAAE;EAFuB,CAAjC;EAMA,IAAIC,UAAU,GAAGP,SAAjB;;EACA,IAAIG,cAAc,GAAG,IAAjBA,IAAyBA,cAAc,GAAG,IAA9C,EAAoD;IAClDI,UAAU,GAAGH,wBAAwB,CAACC,KAAtCE;EACD,CAFD,MAEO,IAAIJ,cAAc,GAAG,IAArB,EAA2B;IAChCI,UAAU,GAAGH,wBAAwB,CAACE,MAAtCC;EACF;;EAIA,MAAMC,aAAa,GACjBL,cAAc,GAAG,GAAjBA,GAAuBH,SAAvBG,GAAmCL,cAAc,CAACE,SAAD,EAAYO,UAAZ,CADnD;EAGA,OAAOV,GAAG,CAACW,aAAa,GAAG,GAAjB,EAAsBP,UAAtB,EAAkCC,UAAlC,CAAV;AACD,CA7BM","names":["getLuminance","mix","scaleMixAmount","mixScaledColors","mixAmount","foreground","background","colorLuminance","luminanceAdjustmentScale","lower","lowest","adjustment","mixAdjustment"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/design-tokens/src/color/utils/mixScaledColors.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport getLuminance from 'polished/lib/color/getLuminance'\nimport mix from 'polished/lib/color/mix'\nimport { scaleMixAmount } from './scaleMixAmount'\n\nexport const mixScaledColors = (\n  mixAmount: number,\n  foreground: string,\n  background: string\n) => {\n  // Get the background colors luminance, if low, we need to scale the mix amount\n  const colorLuminance = getLuminance(background)\n\n  // We use this adjustment scale to to modify our blends based on the backgrounds luminosity\n  // The lower luminosity, the more intense we need to scale the blend\n  const luminanceAdjustmentScale = {\n    lower: 1.3,\n    lowest: 1.7,\n  }\n\n  // Adjust the mixAmount based on the background colors luminosity\n  let adjustment = mixAmount\n  if (colorLuminance < 0.16 && colorLuminance > 0.08) {\n    adjustment = luminanceAdjustmentScale.lower\n  } else if (colorLuminance < 0.08) {\n    adjustment = luminanceAdjustmentScale.lowest\n  }\n\n  // If the background's colors luminosity is greater than 0.3 use the default mix amount\n  // otherwise use the scaled mix\n  const mixAdjustment =\n    colorLuminance > 0.3 ? mixAmount : scaleMixAmount(mixAmount, adjustment)\n\n  return mix(mixAdjustment / 100, foreground, background)\n}\n"]},"metadata":{},"sourceType":"module"}