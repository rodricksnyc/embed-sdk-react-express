{"ast":null,"code":"import throttle from 'lodash/throttle';\nimport { useSafeLayoutEffect } from './useSafeLayoutEffect';\nexport const useResize = (element, handler) => {\n  useSafeLayoutEffect(() => {\n    const throttledHandler = throttle(handler, 100);\n\n    if (!element) {\n      return;\n    }\n\n    handler();\n    const resizeObserver = new ResizeObserver(() => throttledHandler());\n\n    if (element) {\n      resizeObserver.observe(element);\n    }\n\n    window.addEventListener('resize', throttledHandler);\n    return () => {\n      window.removeEventListener('resize', throttledHandler);\n\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [handler, element]);\n};","map":{"version":3,"mappings":"AAKA,OAAOA,QAAP,MAAqB,iBAArB;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAQA,OAAO,MAAMC,SAAS,GAAG,CAACC,OAAD,EAA8BC,OAA9B,KAAsD;EAC7EH,mBAAmB,CAAC,MAAM;IACxB,MAAMI,gBAAgB,GAAGL,QAAQ,CAACI,OAAD,EAAU,GAAV,CAAjC;;IAEA,IAAI,CAACD,OAAL,EAAc;MACZ;IACF;;IAEAC,OAAO;IAEP,MAAME,cAAc,GAAG,IAAIC,cAAJ,CAAmB,MAAMF,gBAAgB,EAAzC,CAAvB;;IAEA,IAAIF,OAAJ,EAAa;MACXG,cAAc,CAACE,OAAfF,CAAuBH,OAAvBG;IACF;;IAEAG,MAAM,CAACC,gBAAPD,CAAwB,QAAxBA,EAAkCJ,gBAAlCI;IAEA,OAAO,MAAM;MACXA,MAAM,CAACE,mBAAPF,CAA2B,QAA3BA,EAAqCJ,gBAArCI;;MACA,IAAIH,cAAJ,EAAoB;QAClBA,cAAc,CAACM,UAAfN;MACF;IACD,CALD;EAMD,CAvBkB,EAuBhB,CAACF,OAAD,EAAUD,OAAV,CAvBgB,CAAnBF;AAwBD,CAzBM","names":["throttle","useSafeLayoutEffect","useResize","element","handler","throttledHandler","resizeObserver","ResizeObserver","observe","window","addEventListener","removeEventListener","disconnect"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useResize.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport throttle from 'lodash/throttle'\nimport { useSafeLayoutEffect } from './useSafeLayoutEffect'\n\n/**\n * Calls the provided handler function when the element is resized.\n * If the handler contains a state setter, it should be wrapped in useCallback to avoid an infinite loop.\n * @param element the element to observe\n * @param handler the function to call on resize\n */\nexport const useResize = (element: HTMLElement | null, handler: () => void) => {\n  useSafeLayoutEffect(() => {\n    const throttledHandler = throttle(handler, 100)\n\n    if (!element) {\n      return\n    }\n\n    handler()\n\n    const resizeObserver = new ResizeObserver(() => throttledHandler())\n\n    if (element) {\n      resizeObserver.observe(element as unknown as HTMLElement)\n    }\n\n    window.addEventListener('resize', throttledHandler)\n\n    return () => {\n      window.removeEventListener('resize', throttledHandler)\n      if (resizeObserver) {\n        resizeObserver.disconnect()\n      }\n    }\n  }, [handler, element])\n}\n"]},"metadata":{},"sourceType":"module"}