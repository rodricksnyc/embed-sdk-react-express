{"ast":null,"code":"import { useCallback, useEffect, useReducer } from 'react';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ON':\n      return true;\n\n    case 'OFF':\n      return false;\n\n    case 'TOGGLE':\n      return !state;\n\n    case 'CHANGE':\n      return action.payload || false;\n  }\n};\n\nexport function useToggle() {\n  let initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  const [value, dispatch] = useReducer(reducer, initialValue);\n  const setOn = useCallback(() => dispatch({\n    type: 'ON'\n  }), []);\n  const setOff = useCallback(() => dispatch({\n    type: 'OFF'\n  }), []);\n  const toggle = useCallback(() => dispatch({\n    type: 'TOGGLE'\n  }), []);\n  const change = useCallback(payload => dispatch({\n    payload,\n    type: 'CHANGE'\n  }), []);\n  useEffect(() => {\n    dispatch({\n      payload: initialValue,\n      type: 'CHANGE'\n    });\n  }, [initialValue]);\n  return {\n    change,\n    setOff,\n    setOn,\n    toggle,\n    value\n  };\n}","map":{"version":3,"mappings":"AAMA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,QAAmD,OAAnD;;AAeA,MAAMC,OAAuC,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACjE,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,IAAL;MACE,OAAO,IAAP;;IACF,KAAK,KAAL;MACE,OAAO,KAAP;;IACF,KAAK,QAAL;MACE,OAAO,CAACF,KAAR;;IACF,KAAK,QAAL;MACE,OAAOC,MAAM,CAACE,OAAPF,IAAkB,KAAzB;EARJ;AAUD,CAXD;;AAaA,OAAO,SAASG,SAAT,GAA0D;EAAA,IAAvCC,YAAuC,uEAAxB,KAAwB;EAC/D,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,UAAU,CAACC,OAAD,EAAUM,YAAV,CAApC;EACA,MAAMG,KAAK,GAAGZ,WAAW,CAAC,MAAMW,QAAQ,CAAC;IAAEL,IAAI,EAAE;EAAR,CAAD,CAAf,EAAiC,EAAjC,CAAzB;EACA,MAAMO,MAAM,GAAGb,WAAW,CAAC,MAAMW,QAAQ,CAAC;IAAEL,IAAI,EAAE;EAAR,CAAD,CAAf,EAAkC,EAAlC,CAA1B;EACA,MAAMQ,MAAM,GAAGd,WAAW,CAAC,MAAMW,QAAQ,CAAC;IAAEL,IAAI,EAAE;EAAR,CAAD,CAAf,EAAqC,EAArC,CAA1B;EACA,MAAMS,MAAM,GAAGf,WAAW,CACvBO,OAAgB,IAAKI,QAAQ,CAAC;IAAEJ,OAAF;IAAWD,IAAI,EAAE;EAAjB,CAAD,CADN,EAExB,EAFwB,CAA1B;EAKAL,SAAS,CAAC,MAAM;IACdU,QAAQ,CAAC;MAAEJ,OAAO,EAAEE,YAAX;MAAyBH,IAAI,EAAE;IAA/B,CAAD,CAARK;EACD,CAFQ,EAEN,CAACF,YAAD,CAFM,CAATR;EAGA,OAAO;IAAEc,MAAF;IAAUF,MAAV;IAAkBD,KAAlB;IAAyBE,MAAzB;IAAiCJ;EAAjC,CAAP;AACF","names":["useCallback","useEffect","useReducer","reducer","state","action","type","payload","useToggle","initialValue","value","dispatch","setOn","setOff","toggle","change"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useToggle.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Reducer } from 'react'\nimport { useCallback, useEffect, useReducer } from 'react'\n\nexport interface UseToggleReturn {\n  value: boolean\n  change: (value: boolean) => void\n  setOn: () => void\n  setOff: () => void\n  toggle: () => void\n}\n\ninterface ToggleAction {\n  type: 'ON' | 'OFF' | 'TOGGLE' | 'CHANGE'\n  payload?: boolean\n}\n\nconst reducer: Reducer<boolean, ToggleAction> = (state, action) => {\n  switch (action.type) {\n    case 'ON':\n      return true\n    case 'OFF':\n      return false\n    case 'TOGGLE':\n      return !state\n    case 'CHANGE':\n      return action.payload || false\n  }\n}\n\nexport function useToggle(initialValue = false): UseToggleReturn {\n  const [value, dispatch] = useReducer(reducer, initialValue)\n  const setOn = useCallback(() => dispatch({ type: 'ON' }), [])\n  const setOff = useCallback(() => dispatch({ type: 'OFF' }), [])\n  const toggle = useCallback(() => dispatch({ type: 'TOGGLE' }), [])\n  const change = useCallback(\n    (payload: boolean) => dispatch({ payload, type: 'CHANGE' }),\n    []\n  )\n\n  useEffect(() => {\n    dispatch({ payload: initialValue, type: 'CHANGE' })\n  }, [initialValue])\n  return { change, setOff, setOn, toggle, value }\n}\n"]},"metadata":{},"sourceType":"module"}