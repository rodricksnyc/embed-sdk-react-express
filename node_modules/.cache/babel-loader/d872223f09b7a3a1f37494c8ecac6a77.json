{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport pickBy from 'lodash/pickBy';\nimport identity from 'lodash/identity';\nimport { fontFacesToFamily } from './fontFacesToFamily';\nexport const generateFontFamilies = (defaultFonts, fallbacks, customFonts) => {\n  const fontFamilies = _objectSpread(_objectSpread({}, defaultFonts), pickBy(customFonts, identity));\n\n  Object.entries(fontFamilies).map(_ref => {\n    let [key, fontFace] = _ref;\n    return fontFamilies[key] = fontFacesToFamily(fontFace, fallbacks[key]);\n  });\n  return fontFamilies;\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,OAAOA,MAAP,MAAmB,eAAnB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAMA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAClCC,YADkC,EAElCC,SAFkC,EAGlCC,WAHkC,KAI/B;EACH,MAAMC,YAA+B,mCAChCH,YADgC,GAEhCJ,MAAM,CAACM,WAAD,EAAcL,QAAd,CAF0B,CAArC;;EAKAO,MAAM,CAACC,OAAPD,CAAeD,YAAfC,EAA6BE,GAA7BF,CACE;IAAA,IAAC,CAACG,GAAD,EAAMC,QAAN,CAAD;IAAA,OACGL,YAAY,CAACI,GAAD,CAAZJ,GAAoCL,iBAAiB,CACpDU,QADoD,EAEpDP,SAAS,CAACM,GAAD,CAF2C,CADxD;EAAA,CADFH;EAQA,OAAOD,YAAP;AACD,CAnBM","names":["pickBy","identity","fontFacesToFamily","generateFontFamilies","defaultFonts","fallbacks","customFonts","fontFamilies","Object","entries","map","key","fontFace"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/design-tokens/src/utils/typography/generateFontFamilies.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport pickBy from 'lodash/pickBy'\nimport identity from 'lodash/identity'\nimport type { FontFamilyChoices } from '../../system'\nimport type {\n  FontFamilies,\n  FontFamilyFallbacks,\n} from '../../system/typography/font_families'\nimport { fontFacesToFamily } from './fontFacesToFamily'\n\nexport const generateFontFamilies = (\n  defaultFonts: FontFamilyChoices,\n  fallbacks: FontFamilyFallbacks,\n  customFonts?: Partial<FontFamilyChoices>\n) => {\n  const fontFamilies: FontFamilyChoices = {\n    ...defaultFonts,\n    ...pickBy(customFonts, identity),\n  }\n\n  Object.entries(fontFamilies).map(\n    ([key, fontFace]) =>\n      (fontFamilies[key as FontFamilies] = fontFacesToFamily(\n        fontFace,\n        fallbacks[key as FontFamilies]\n      ))\n  )\n\n  return fontFamilies\n}\n"]},"metadata":{},"sourceType":"module"}