{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport { useForkedRef } from './useForkedRef';\nexport function useCallbackRef(forwardedRef) {\n  const [currentElement, setCurrentElement] = useState(null);\n  const callbackRef = useCallback(node => {\n    setCurrentElement(node);\n  }, []);\n  const forkedRef = useForkedRef(forwardedRef, callbackRef);\n  return [currentElement, forkedRef];\n}","map":{"version":3,"mappings":"AAKA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAMA,OAAO,SAASC,cAAT,CACLC,YADK,EAEiC;EACtC,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCL,QAAQ,CAAW,IAAX,CAApD;EACA,MAAMM,WAAW,GAAGP,WAAW,CAAEQ,IAAc,IAAK;IAClDF,iBAAiB,CAACE,IAAD,CAAjBF;EACD,CAF8B,EAE5B,EAF4B,CAA/B;EAGA,MAAMG,SAAS,GAAGP,YAAY,CAAIE,YAAJ,EAAkBG,WAAlB,CAA9B;EACA,OAAO,CAACF,cAAD,EAAiBI,SAAjB,CAAP;AACF","names":["useCallback","useState","useForkedRef","useCallbackRef","forwardedRef","currentElement","setCurrentElement","callbackRef","node","forkedRef"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useCallbackRef.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { Ref } from 'react'\nimport { useCallback, useState } from 'react'\nimport { useForkedRef } from './useForkedRef'\n\n// This hook is for when a dom node needs to be \"seen\" in some useEffect logic.\n// Since currentElement is state, it will be effective when used in a dependency array\n// while a mutable object generated by useRef isn't, and won't.\n\nexport function useCallbackRef<T extends HTMLElement = HTMLElement>(\n  forwardedRef?: Ref<T>\n): [T | null, (node: T | null) => void] {\n  const [currentElement, setCurrentElement] = useState<T | null>(null)\n  const callbackRef = useCallback((node: T | null) => {\n    setCurrentElement(node)\n  }, [])\n  const forkedRef = useForkedRef<T>(forwardedRef, callbackRef)\n  return [currentElement, forkedRef]\n}\n"]},"metadata":{},"sourceType":"module"}