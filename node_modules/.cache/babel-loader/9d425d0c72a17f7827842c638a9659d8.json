{"ast":null,"code":"import { useEffect, useRef, useContext } from 'react';\nexport function useAddOptionToContext(context, value, label, scrollIntoView) {\n  const {\n    optionsRef,\n    windowingPropRef\n  } = useContext(context);\n  const indexRef = useRef(-1);\n  useEffect(() => {\n    const option = {\n      label,\n      scrollIntoView,\n      value\n    };\n    const optionsRefCurrent = optionsRef && optionsRef.current;\n    const windowing = windowingPropRef && windowingPropRef.current;\n\n    if (optionsRefCurrent && !windowing) {\n      if (indexRef.current > -1) {\n        optionsRefCurrent.splice(indexRef.current, 0, option);\n      } else {\n        optionsRefCurrent.push(option);\n      }\n    }\n\n    return () => {\n      if (optionsRefCurrent && !windowing) {\n        const index = optionsRefCurrent.indexOf(option);\n        indexRef.current = index;\n        optionsRefCurrent.splice(index, 1);\n      }\n    };\n  }, [value, label, optionsRef, scrollIntoView, windowingPropRef]);\n}","map":{"version":3,"mappings":"AAMA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,UAA5B,QAA8C,OAA9C;AAMA,OAAO,SAASC,qBAAT,CAGLC,OAHK,EAILC,KAJK,EAKLC,KALK,EAMLC,cANK,EAOL;EACA,MAAM;IAAEC,UAAF;IAAcC;EAAd,IAAmCP,UAAU,CAACE,OAAD,CAAnD;EACA,MAAMM,QAAQ,GAAGT,MAAM,CAAS,CAAC,CAAV,CAAvB;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMW,MAAM,GAAG;MAAEL,KAAF;MAASC,cAAT;MAAyBF;IAAzB,CAAf;IACA,MAAMO,iBAAiB,GAAGJ,UAAU,IAAIA,UAAU,CAACK,OAAnD;IACA,MAAMC,SAAS,GAAGL,gBAAgB,IAAIA,gBAAgB,CAACI,OAAvD;;IACA,IAAID,iBAAiB,IAAI,CAACE,SAA1B,EAAqC;MAGnC,IAAIJ,QAAQ,CAACG,OAATH,GAAmB,CAAC,CAAxB,EAA2B;QACzBE,iBAAiB,CAACG,MAAlBH,CAAyBF,QAAQ,CAACG,OAAlCD,EAA2C,CAA3CA,EAA8CD,MAA9CC;MACD,CAFD,MAEO;QACLA,iBAAiB,CAACI,IAAlBJ,CAAuBD,MAAvBC;MACF;IACF;;IACA,OAAO,MAAM;MAEX,IAAIA,iBAAiB,IAAI,CAACE,SAA1B,EAAqC;QACnC,MAAMG,KAAK,GAAGL,iBAAiB,CAACM,OAAlBN,CAA0BD,MAA1BC,CAAd;QACAF,QAAQ,CAACG,OAATH,GAAmBO,KAAnBP;QACAE,iBAAiB,CAACG,MAAlBH,CAAyBK,KAAzBL,EAAgC,CAAhCA;MACF;IACD,CAPD;EAQD,CArBQ,EAqBN,CAACP,KAAD,EAAQC,KAAR,EAAeE,UAAf,EAA2BD,cAA3B,EAA2CE,gBAA3C,CArBM,CAATT;AAsBF","names":["useEffect","useRef","useContext","useAddOptionToContext","context","value","label","scrollIntoView","optionsRef","windowingPropRef","indexRef","option","optionsRefCurrent","current","windowing","splice","push","index","indexOf"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Inputs/Combobox/utils/useAddOptionToContext.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Context } from 'react'\nimport { useEffect, useRef, useContext } from 'react'\nimport type {\n  ComboboxContextProps,\n  ComboboxMultiContextProps,\n} from '../ComboboxContext'\n\nexport function useAddOptionToContext<\n  CProps extends ComboboxContextProps | ComboboxMultiContextProps\n>(\n  context: Context<CProps>,\n  value: string,\n  label?: string,\n  scrollIntoView?: boolean\n) {\n  const { optionsRef, windowingPropRef } = useContext(context)\n  const indexRef = useRef<number>(-1)\n\n  useEffect(() => {\n    const option = { label, scrollIntoView, value }\n    const optionsRefCurrent = optionsRef && optionsRef.current\n    const windowing = windowingPropRef && windowingPropRef.current\n    if (optionsRefCurrent && !windowing) {\n      // Was this option already in the list?\n      // If so, re-insert it at the same spot\n      if (indexRef.current > -1) {\n        optionsRefCurrent.splice(indexRef.current, 0, option)\n      } else {\n        optionsRefCurrent.push(option)\n      }\n    }\n    return () => {\n      // Delete option from the array but save the index so it can be re-inserted there\n      if (optionsRefCurrent && !windowing) {\n        const index = optionsRefCurrent.indexOf(option)\n        indexRef.current = index\n        optionsRefCurrent.splice(index, 1)\n      }\n    }\n  }, [value, label, optionsRef, scrollIntoView, windowingPropRef])\n}\n"]},"metadata":{},"sourceType":"module"}