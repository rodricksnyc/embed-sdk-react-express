{"ast":null,"code":"\"use strict\";\n/*\n\n MIT License\n\n Copyright (c) 2019 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LookerEmbedBase = void 0;\n\nvar LookerEmbedBase =\n/** @class */\nfunction () {\n  /**\n   * @hidden\n   *\n   * @param _host\n   */\n  function LookerEmbedBase(_host) {\n    this._host = _host;\n  }\n  /**\n   * Send a message to the embedded content.\n   *\n   * @param message String message identifier.\n   * @param params Additional parameters to be sent to the client. After transmission ownership\n   * of the parameters is transferred to the embedded Explore.\n   */\n\n\n  LookerEmbedBase.prototype.send = function (message, params) {\n    this._host.send(message, params);\n  };\n  /**\n   * Send a message to the embedded content and resolve with a response\n   *\n   * @param message String message identifier.\n   * @param params Additional parameters to be sent to the client. After transmission ownership\n   * of the parameters is transferred to the embedded Explore.\n   */\n\n\n  LookerEmbedBase.prototype.sendAndReceive = function (message, params) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this._host.sendAndReceive(message, params)];\n      });\n    });\n  };\n\n  return LookerEmbedBase;\n}();\n\nexports.LookerEmbedBase = LookerEmbedBase;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AAAA;AAAA;EACE;;;;;EAKA,yBAAoBA,KAApB,EAA+C;IAA3B;EAA+B;EAEnD;;;;;;;;;EAQAC,2CAAKC,OAAL,EAAsBC,MAAtB,EAAkC;IAChC,KAAKH,KAAL,CAAWI,IAAX,CAAgBF,OAAhB,EAAyBC,MAAzB;EACD,CAFD;EAIA;;;;;;;;;EAQMF,2CAAN,UAAqBC,OAArB,EAAsCC,MAAtC,EAAkD;;;QAChD;QAAA;QAAA,EAAO,KAAKH,KAAL,CAAWK,cAAX,CAA0BH,OAA1B,EAAmCC,MAAnC,CAAP;;;EACD,CAFK;;EAGR;AAAC,CA/BD;;AAAaG","names":["_host","LookerEmbedBase","message","params","send","sendAndReceive","exports"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/embed-sdk/src/embed_base.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2019 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { ChattyHostConnection } from '@looker/chatty'\n\nexport class LookerEmbedBase {\n  /**\n   * @hidden\n   *\n   * @param _host\n   */\n  constructor(private _host: ChattyHostConnection) {}\n\n  /**\n   * Send a message to the embedded content.\n   *\n   * @param message String message identifier.\n   * @param params Additional parameters to be sent to the client. After transmission ownership\n   * of the parameters is transferred to the embedded Explore.\n   */\n\n  send(message: string, params?: any) {\n    this._host.send(message, params)\n  }\n\n  /**\n   * Send a message to the embedded content and resolve with a response\n   *\n   * @param message String message identifier.\n   * @param params Additional parameters to be sent to the client. After transmission ownership\n   * of the parameters is transferred to the embedded Explore.\n   */\n\n  async sendAndReceive(message: string, params?: any) {\n    return this._host.sendAndReceive(message, params)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}