{"ast":null,"code":"import { useContext } from 'react';\nexport function useOptionStatus(context, value) {\n  const {\n    data\n  } = useContext(context);\n  const {\n    navigationOption\n  } = data;\n  const isActive = navigationOption ? navigationOption.value === value : false;\n  const contextOption = data.option;\n  const contextOptions = data.options;\n  const options = contextOption ? [contextOption] : contextOptions || [];\n  const isSelected = options.find(option => option.value === value) !== undefined;\n  return {\n    isActive,\n    isSelected\n  };\n}","map":{"version":3,"mappings":"AAMA,SAASA,UAAT,QAA2B,OAA3B;AAQA,OAAO,SAASC,eAAT,CAELC,OAFK,EAEqBC,KAFrB,EAE4D;EACjE,MAAM;IAAEC;EAAF,IAAWJ,UAAU,CAACE,OAAD,CAA3B;EACA,MAAM;IAAEG;EAAF,IAAuBD,IAA7B;EACA,MAAME,QAAQ,GAAGD,gBAAgB,GAAGA,gBAAgB,CAACF,KAAjBE,KAA2BF,KAA9B,GAAsC,KAAvE;EAEA,MAAMI,aAAa,GAAIH,IAAI,CAAkBI,MAA7C;EACA,MAAMC,cAAc,GAAIL,IAAI,CAAuBM,OAAnD;EACA,MAAMA,OAAO,GAAGH,aAAa,GAAG,CAACA,aAAD,CAAH,GAAqBE,cAAc,IAAI,EAApE;EACA,MAAME,UAAU,GACdD,OAAO,CAACE,IAARF,CAAaF,MAAM,IAAIA,MAAM,CAACL,KAAPK,KAAiBL,KAAxCO,MAAmDG,SADrD;EAGA,OAAO;IACLP,QADK;IAELK;EAFK,CAAP;AAIF","names":["useContext","useOptionStatus","context","value","data","navigationOption","isActive","contextOption","option","contextOptions","options","isSelected","find","undefined"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Inputs/Combobox/utils/useOptionStatus.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Context } from 'react'\nimport { useContext } from 'react'\nimport type {\n  ComboboxContextProps,\n  ComboboxMultiContextProps,\n} from '../ComboboxContext'\nimport type { ComboboxOptionStatuses } from '../types'\nimport type { ComboboxData, ComboboxMultiData } from './state'\n\nexport function useOptionStatus<\n  CProps extends ComboboxContextProps | ComboboxMultiContextProps\n>(context: Context<CProps>, value: string): ComboboxOptionStatuses {\n  const { data } = useContext(context)\n  const { navigationOption } = data\n  const isActive = navigationOption ? navigationOption.value === value : false\n\n  const contextOption = (data as ComboboxData).option\n  const contextOptions = (data as ComboboxMultiData).options\n  const options = contextOption ? [contextOption] : contextOptions || []\n  const isSelected =\n    options.find(option => option.value === value) !== undefined\n\n  return {\n    isActive,\n    isSelected,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}