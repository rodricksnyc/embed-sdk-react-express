{"ast":null,"code":"import { useRef } from 'react';\nimport { useCallbackRef } from '../../../../utils';\nexport function useComboboxRefs(forwardedRef) {\n  const [wrapperElement, ref] = useCallbackRef(forwardedRef);\n  const optionsRef = useRef([]);\n  const listRef = useRef(null);\n  const autoCompletePropRef = useRef(true);\n  const inputReadOnlyPropRef = useRef(false);\n  const persistSelectionPropRef = useRef(false);\n  const closeOnSelectPropRef = useRef(true);\n  const windowingPropRef = useRef(false);\n  const isScrollingRef = useRef(false);\n  const indicatorPropRef = useRef(false);\n  const freeInputPropRef = useRef(false);\n  return {\n    autoCompletePropRef,\n    closeOnSelectPropRef,\n    freeInputPropRef,\n    indicatorPropRef,\n    inputReadOnlyPropRef,\n    isScrollingRef,\n    listRef,\n    optionsRef,\n    persistSelectionPropRef,\n    ref,\n    windowingPropRef,\n    wrapperElement\n  };\n}","map":{"version":3,"mappings":"AAMA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAGA,OAAO,SAASC,eAAT,CAAyBC,YAAzB,EAA4D;EAEjE,MAAM,CAACC,cAAD,EAAiBC,GAAjB,IAAwBJ,cAAc,CAAiBE,YAAjB,CAA5C;EAOA,MAAMG,UAAU,GAAGN,MAAM,CAAyB,EAAzB,CAAzB;EAEA,MAAMO,OAAO,GAAGP,MAAM,CAAqB,IAArB,CAAtB;EAQA,MAAMQ,mBAAmB,GAAGR,MAAM,CAAC,IAAD,CAAlC;EACA,MAAMS,oBAAoB,GAAGT,MAAM,CAAC,KAAD,CAAnC;EAEA,MAAMU,uBAAuB,GAAGV,MAAM,CAAC,KAAD,CAAtC;EACA,MAAMW,oBAAoB,GAAGX,MAAM,CAAC,IAAD,CAAnC;EACA,MAAMY,gBAAgB,GAAGZ,MAAM,CAAC,KAAD,CAA/B;EACA,MAAMa,cAAc,GAAGb,MAAM,CAAC,KAAD,CAA7B;EACA,MAAMc,gBAAgB,GAAGd,MAAM,CAAC,KAAD,CAA/B;EACA,MAAMe,gBAAgB,GAAGf,MAAM,CAAC,KAAD,CAA/B;EAEA,OAAO;IACLQ,mBADK;IAELG,oBAFK;IAGLI,gBAHK;IAILD,gBAJK;IAKLL,oBALK;IAMLI,cANK;IAOLN,OAPK;IAQLD,UARK;IASLI,uBATK;IAULL,GAVK;IAWLO,gBAXK;IAYLR;EAZK,CAAP;AAcF","names":["useRef","useCallbackRef","useComboboxRefs","forwardedRef","wrapperElement","ref","optionsRef","listRef","autoCompletePropRef","inputReadOnlyPropRef","persistSelectionPropRef","closeOnSelectPropRef","windowingPropRef","isScrollingRef","indicatorPropRef","freeInputPropRef"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Inputs/Combobox/utils/useComboboxRefs.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Ref } from 'react'\nimport { useRef } from 'react'\nimport { useCallbackRef } from '../../../../utils'\nimport type { ComboboxOptionObject } from '../types'\n\nexport function useComboboxRefs(forwardedRef: Ref<HTMLDivElement>) {\n  // Need this to get the menu width\n  const [wrapperElement, ref] = useCallbackRef<HTMLDivElement>(forwardedRef)\n  // We store the values of all the ComboboxOptions on this ref. This makes it\n  // possible to perform the keyboard navigation from the input on the list. We\n  // manipulate this array through context so that we don't have to enforce a\n  // parent/child relationship between ComboboxList and ComboboxOption with\n  // cloneElement or fall back to DOM traversal. It's a new trick for me and\n  // I'm pretty excited about it.\n  const optionsRef = useRef<ComboboxOptionObject[]>([])\n\n  const listRef = useRef<HTMLElement | null>(null)\n\n  // When <ComboboxInput autoComplete={false} /> we don't want cycle back to\n  // the user's value while navigating (because it's always the user's value),\n  // but we need to know this in useKeyDown which is far away from the prop\n  // here, so we do something sneaky and write it to this ref on context so we\n  // can use it anywhere else ðŸ˜›. Another new trick for me and I'm excited\n  // about this one too!\n  const autoCompletePropRef = useRef(true)\n  const inputReadOnlyPropRef = useRef(false)\n\n  const persistSelectionPropRef = useRef(false)\n  const closeOnSelectPropRef = useRef(true)\n  const windowingPropRef = useRef(false)\n  const isScrollingRef = useRef(false)\n  const indicatorPropRef = useRef(false)\n  const freeInputPropRef = useRef(false)\n\n  return {\n    autoCompletePropRef,\n    closeOnSelectPropRef,\n    freeInputPropRef,\n    indicatorPropRef,\n    inputReadOnlyPropRef,\n    isScrollingRef,\n    listRef,\n    optionsRef,\n    persistSelectionPropRef,\n    ref,\n    windowingPropRef,\n    wrapperElement,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}