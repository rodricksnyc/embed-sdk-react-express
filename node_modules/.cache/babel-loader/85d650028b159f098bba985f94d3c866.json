{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport throttle from 'lodash/throttle';\nimport get from 'lodash/get';\nexport function useMouseDragPosition(targetRef) {\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [mousePos, setMousePos] = useState({\n    x: 0,\n    y: 0\n  });\n\n  const updateMousePos = e => {\n    const event = get(e, 'touches[0]', e);\n    const {\n      pageX,\n      clientX,\n      pageY,\n      clientY\n    } = event;\n    setMousePos({\n      x: pageX || clientX,\n      y: pageY || clientY\n    });\n  };\n\n  const handleStart = e => {\n    requestAnimationFrame(() => {\n      setIsMouseDown(true);\n    });\n    updateMousePos(e);\n  };\n\n  const handleMove = throttle(updateMousePos, 100);\n\n  const handleEnd = () => {\n    requestAnimationFrame(() => {\n      setIsMouseDown(false);\n    });\n  };\n\n  useEffect(() => {\n    targetRef && targetRef.addEventListener('mousedown', handleStart);\n    targetRef && targetRef.addEventListener('touchstart', handleStart);\n    window.addEventListener('mouseup', handleEnd);\n    window.addEventListener('touchend', handleEnd);\n\n    if (isMouseDown) {\n      window.addEventListener('touchmove', handleMove);\n      window.addEventListener('mousemove', handleMove);\n      window.addEventListener('mouseleave', handleEnd);\n    }\n\n    return () => {\n      targetRef && targetRef.removeEventListener('mousedown', handleStart);\n      targetRef && targetRef.removeEventListener('touchstart', handleStart);\n      window.removeEventListener('mouseup', handleEnd);\n      window.removeEventListener('touchend', handleEnd);\n\n      if (isMouseDown) {\n        window.removeEventListener('touchmove', handleMove);\n        window.removeEventListener('mousemove', handleMove);\n        window.removeEventListener('mouseleave', handleEnd);\n      }\n    };\n  }, [isMouseDown, targetRef]);\n  return {\n    isMouseDown,\n    mousePos\n  };\n}","map":{"version":3,"mappings":"AAKA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAWA,OAAO,SAASC,oBAAT,CACLC,SADK,EAEO;EACZ,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,KAAD,CAA9C;EACA,MAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC;IAAEU,CAAC,EAAE,CAAL;IAAQC,CAAC,EAAE;EAAX,CAAD,CAAxC;;EAEA,MAAMC,cAAc,GAAIC,CAAgD,IAAK;IAE3E,MAAMC,KAAK,GAAGX,GAAG,CAACU,CAAD,EAAI,YAAJ,EAAkBA,CAAlB,CAAjB;IAEA,MAAM;MAAEE,KAAF;MAASC,OAAT;MAAkBC,KAAlB;MAAyBC;IAAzB,IAAqCJ,KAA3C;IACAL,WAAW,CAAC;MAAEC,CAAC,EAAEK,KAAK,IAAIC,OAAd;MAAuBL,CAAC,EAAEM,KAAK,IAAIC;IAAnC,CAAD,CAAXT;EACD,CAND;;EAQA,MAAMU,WAAW,GAAIN,CAAgD,IAAK;IAExEO,qBAAqB,CAAC,MAAM;MAC1Bb,cAAc,CAAC,IAAD,CAAdA;IACD,CAFoB,CAArBa;IAGAR,cAAc,CAACC,CAAD,CAAdD;EACD,CAND;;EAQA,MAAMS,UAAU,GAAGnB,QAAQ,CAACU,cAAD,EAAiB,GAAjB,CAA3B;;EAEA,MAAMU,SAAS,GAAG,MAAM;IACtBF,qBAAqB,CAAC,MAAM;MAC1Bb,cAAc,CAAC,KAAD,CAAdA;IACD,CAFoB,CAArBa;EAGD,CAJD;;EAMAnB,SAAS,CAAC,MAAM;IACdI,SAAS,IAAIA,SAAS,CAACkB,gBAAVlB,CAA2B,WAA3BA,EAAwCc,WAAxCd,CAAbA;IACAA,SAAS,IAAIA,SAAS,CAACkB,gBAAVlB,CAA2B,YAA3BA,EAAyCc,WAAzCd,CAAbA;IACAmB,MAAM,CAACD,gBAAPC,CAAwB,SAAxBA,EAAmCF,SAAnCE;IACAA,MAAM,CAACD,gBAAPC,CAAwB,UAAxBA,EAAoCF,SAApCE;;IAEA,IAAIlB,WAAJ,EAAiB;MACfkB,MAAM,CAACD,gBAAPC,CAAwB,WAAxBA,EAAqCH,UAArCG;MACAA,MAAM,CAACD,gBAAPC,CAAwB,WAAxBA,EAAqCH,UAArCG;MACAA,MAAM,CAACD,gBAAPC,CAAwB,YAAxBA,EAAsCF,SAAtCE;IACF;;IAEA,OAAO,MAAM;MACXnB,SAAS,IAAIA,SAAS,CAACoB,mBAAVpB,CAA8B,WAA9BA,EAA2Cc,WAA3Cd,CAAbA;MACAA,SAAS,IAAIA,SAAS,CAACoB,mBAAVpB,CAA8B,YAA9BA,EAA4Cc,WAA5Cd,CAAbA;MACAmB,MAAM,CAACC,mBAAPD,CAA2B,SAA3BA,EAAsCF,SAAtCE;MACAA,MAAM,CAACC,mBAAPD,CAA2B,UAA3BA,EAAuCF,SAAvCE;;MAEA,IAAIlB,WAAJ,EAAiB;QACfkB,MAAM,CAACC,mBAAPD,CAA2B,WAA3BA,EAAwCH,UAAxCG;QACAA,MAAM,CAACC,mBAAPD,CAA2B,WAA3BA,EAAwCH,UAAxCG;QACAA,MAAM,CAACC,mBAAPD,CAA2B,YAA3BA,EAAyCF,SAAzCE;MACF;IACD,CAXD;EAaD,CAzBQ,EAyBN,CAAClB,WAAD,EAAcD,SAAd,CAzBM,CAATJ;EA2BA,OAAO;IAAEK,WAAF;IAAeE;EAAf,CAAP;AACF","names":["useState","useEffect","throttle","get","useMouseDragPosition","targetRef","isMouseDown","setIsMouseDown","mousePos","setMousePos","x","y","updateMousePos","e","event","pageX","clientX","pageY","clientY","handleStart","requestAnimationFrame","handleMove","handleEnd","addEventListener","window","removeEventListener"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useMouseDragPosition.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useState, useEffect } from 'react'\nimport throttle from 'lodash/throttle'\nimport get from 'lodash/get'\n\ninterface MouseState {\n  mousePos: { x: number; y: number }\n  isMouseDown: boolean\n}\n\n/*\n * Starts tracking mouse position when user clicks inside targetRef.\n * Stops  updating mouse position when user releases mouse ANYWHERE in the window\n */\nexport function useMouseDragPosition(\n  targetRef: HTMLElement | null\n): MouseState {\n  const [isMouseDown, setIsMouseDown] = useState(false)\n  const [mousePos, setMousePos] = useState({ x: 0, y: 0 })\n\n  const updateMousePos = (e: globalThis.TouchEvent | globalThis.MouseEvent) => {\n    // use e.touches[0] for touch events, or simply e for mouse events\n    const event = get(e, 'touches[0]', e)\n    // e.clientX and e.clientY fallbacks are included for testing purposes. jsDOM doesn't support pageX/pageY attributes\n    const { pageX, clientX, pageY, clientY } = event\n    setMousePos({ x: pageX || clientX, y: pageY || clientY })\n  }\n\n  const handleStart = (e: globalThis.TouchEvent | globalThis.MouseEvent) => {\n    // update mouse down state AFTER mouse position state is updated\n    requestAnimationFrame(() => {\n      setIsMouseDown(true)\n    })\n    updateMousePos(e)\n  }\n\n  const handleMove = throttle(updateMousePos, 100)\n\n  const handleEnd = () => {\n    requestAnimationFrame(() => {\n      setIsMouseDown(false)\n    })\n  }\n\n  useEffect(() => {\n    targetRef && targetRef.addEventListener('mousedown', handleStart)\n    targetRef && targetRef.addEventListener('touchstart', handleStart)\n    window.addEventListener('mouseup', handleEnd)\n    window.addEventListener('touchend', handleEnd)\n\n    if (isMouseDown) {\n      window.addEventListener('touchmove', handleMove)\n      window.addEventListener('mousemove', handleMove)\n      window.addEventListener('mouseleave', handleEnd)\n    }\n\n    return () => {\n      targetRef && targetRef.removeEventListener('mousedown', handleStart)\n      targetRef && targetRef.removeEventListener('touchstart', handleStart)\n      window.removeEventListener('mouseup', handleEnd)\n      window.removeEventListener('touchend', handleEnd)\n\n      if (isMouseDown) {\n        window.removeEventListener('touchmove', handleMove)\n        window.removeEventListener('mousemove', handleMove)\n        window.removeEventListener('mouseleave', handleEnd)\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isMouseDown, targetRef])\n\n  return { isMouseDown, mousePos }\n}\n"]},"metadata":{},"sourceType":"module"}