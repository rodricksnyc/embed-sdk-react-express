{"ast":null,"code":"import padStart from 'lodash/padStart';\nimport toString from 'lodash/toString';\nimport map from 'lodash/map';\nexport const formatTimeString = number => {\n  return padStart(toString(number), 2, '0');\n};\nexport const parseBase10Int = value => value.length ? parseInt(value, 10) : 0;\nexport const isValidTime = value => {\n  if (!value) {\n    return true;\n  }\n\n  const [hour = 0, minute = 0] = map(value.split(':'), parseBase10Int);\n\n  if (hour < 24 && minute <= 60) {\n    return true;\n  }\n\n  return false;\n};","map":{"version":3,"mappings":"AAKA,OAAOA,QAAP,MAAqB,iBAArB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAKA,OAAO,MAAMC,gBAAgB,GAAIC,MAAc,IAAK;EAClD,OAAOJ,QAAQ,CAACC,QAAQ,CAACG,MAAD,CAAT,EAAmB,CAAnB,EAAsB,GAAtB,CAAf;AACD,CAFM;AAIP,OAAO,MAAMC,cAAc,GAAIC,KAAa,IAC1CA,KAAK,CAACC,MAAND,GAAeE,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAAvBA,GAAqC,CADhC;AAKP,OAAO,MAAMG,WAAW,GAAIH,KAAc,IAAK;EAC7C,IAAI,CAACA,KAAL,EAAY;IACV,OAAO,IAAP;EACF;;EACA,MAAM,CAACI,IAAI,GAAG,CAAR,EAAWC,MAAM,GAAG,CAApB,IAAyBT,GAAG,CAACI,KAAK,CAACM,KAANN,CAAY,GAAZA,CAAD,EAAmBD,cAAnB,CAAlC;;EAEA,IAAIK,IAAI,GAAG,EAAPA,IAAaC,MAAM,IAAI,EAA3B,EAA+B;IAC7B,OAAO,IAAP;EACF;;EAEA,OAAO,KAAP;AACD,CAXM","names":["padStart","toString","map","formatTimeString","number","parseBase10Int","value","length","parseInt","isValidTime","hour","minute","split"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Inputs/InputTime/utils.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport padStart from 'lodash/padStart'\nimport toString from 'lodash/toString'\nimport map from 'lodash/map'\n\nexport type TimeFormats = '12h' | '24h'\n\n// returns \"01\", \"02\", \"03\" instead of integers 1, 2, 3\nexport const formatTimeString = (number: number) => {\n  return padStart(toString(number), 2, '0')\n}\n\nexport const parseBase10Int = (value: string) =>\n  value.length ? parseInt(value, 10) : 0\n\n// take a 24 hour formatted time string ('14:34') and check whether it's a real time of day\n// rejects non-numeric inputs and illogical times ('64:1928')\nexport const isValidTime = (value?: string) => {\n  if (!value) {\n    return true\n  }\n  const [hour = 0, minute = 0] = map(value.split(':'), parseBase10Int)\n\n  if (hour < 24 && minute <= 60) {\n    return true\n  }\n\n  return false\n}\n"]},"metadata":{},"sourceType":"module"}