{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { getDateLocale } from '@looker/i18n';\nimport format from 'date-fns-tz/format';\nimport utcToZonedTime from 'date-fns-tz/utcToZonedTime';\nimport repeat from 'lodash/repeat';\nimport trim from 'lodash/trim';\nconst dateFormatRepetitions = {\n  full: 4,\n  long: 3,\n  medium: 2,\n  short: 1\n};\n\nconst isDateFormat = stringFormat => dateFormatRepetitions[stringFormat];\n\nconst getStringFormat = function (stringFormat) {\n  let timeZone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let {\n    date: _date = true,\n    time: _time = true\n  } = arguments.length > 2 ? arguments[2] : undefined;\n  const dateFormat = repeat('P', dateFormatRepetitions[stringFormat]);\n  const timeFormat = repeat('p', dateFormatRepetitions[stringFormat]);\n  const timeZoneFormat = repeat('z', dateFormatRepetitions[stringFormat]);\n  return trim(`${_date ? dateFormat : ''}${_time ? timeFormat : ''} ${timeZone ? timeZoneFormat : ''}`);\n};\n\nexport const formatDateString = function (date) {\n  let stringFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'P';\n  let locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getDateLocale();\n  let timeZone = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n  let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n  if (!date) {\n    return '';\n  }\n\n  const renderedDate = timeZone ? utcToZonedTime(date, timeZone) : date;\n  const actualFormat = isDateFormat(stringFormat) ? getStringFormat(stringFormat, timeZone, options) : stringFormat;\n  return format(renderedDate, actualFormat, _objectSpread({\n    locale\n  }, timeZone && {\n    timeZone\n  }));\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,SAASA,aAAT,QAA8B,cAA9B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AAEA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AASA,MAAMC,qBAA8C,GAAG;EACrDC,IAAI,EAAE,CAD+C;EAErDC,IAAI,EAAE,CAF+C;EAGrDC,MAAM,EAAE,CAH6C;EAIrDC,KAAK,EAAE;AAJ8C,CAAvD;;AAcA,MAAMC,YAAY,GAAIC,YAAoB,IACxCN,qBAAqB,CAACM,YAAD,CADvB;;AAGA,MAAMC,eAAe,GAAG,UACtBD,YADsB,EAInB;EAAA,IAFHE,QAEG,uEAF4BC,SAE5B;EAAA,IADH;IAAEC,IAAI,EAAJA,KAAI,GAAG,IAAT;IAAeC,IAAI,EAAJA,KAAI,GAAG;EAAtB,CACG;EACH,MAAMC,UAAU,GAAGd,MAAM,CAAC,GAAD,EAAME,qBAAqB,CAACM,YAAD,CAA3B,CAAzB;EACA,MAAMO,UAAU,GAAGf,MAAM,CAAC,GAAD,EAAME,qBAAqB,CAACM,YAAD,CAA3B,CAAzB;EACA,MAAMQ,cAAc,GAAGhB,MAAM,CAAC,GAAD,EAAME,qBAAqB,CAACM,YAAD,CAA3B,CAA7B;EAEA,OAAOP,IAAI,CACR,GAAEW,KAAI,GAAGE,UAAH,GAAgB,EAAG,GAAED,KAAI,GAAGE,UAAH,GAAgB,EAAG,IACjDL,QAAQ,GAAGM,cAAH,GAAoB,EAC7B,EAHQ,CAAX;AAKD,CAdD;;AAgBA,OAAO,MAAMC,gBAAgB,GAAG,UAC9BL,IAD8B,EAMd;EAAA,IAJhBJ,YAIgB,uEAJqB,GAIrB;EAAA,IAHhBU,MAGgB,uEAHCrB,aAAa,EAGd;EAAA,IAFhBa,QAEgB,uEAFeC,SAEf;EAAA,IADhBQ,OACgB,uEADW,EACX;;EAChB,IAAI,CAACP,IAAL,EAAW;IACT,OAAO,EAAP;EACF;;EAEA,MAAMQ,YAAY,GAAGV,QAAQ,GAAGX,cAAc,CAACa,IAAD,EAAOF,QAAP,CAAjB,GAAoCE,IAAjE;EAEA,MAAMS,YAAY,GAAGd,YAAY,CAACC,YAAD,CAAZD,GACjBE,eAAe,CAACD,YAAD,EAA8BE,QAA9B,EAAwCS,OAAxC,CADEZ,GAEjBC,YAFJ;EAIA,OAAOV,MAAM,CAACsB,YAAD,EAAeC,YAAf,EAA2BC;IACtCJ;EADsC,GAElCR,QAAQ,IAAI;IAAEA;EAAF,CAFsB,CAA3B,CAAb;AAID,CArBM","names":["getDateLocale","format","utcToZonedTime","repeat","trim","dateFormatRepetitions","full","long","medium","short","isDateFormat","stringFormat","getStringFormat","timeZone","undefined","date","time","dateFormat","timeFormat","timeZoneFormat","formatDateString","locale","options","renderedDate","actualFormat","_objectSpread"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Calendar/utils/formatDateString.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { getDateLocale } from '@looker/i18n'\nimport format from 'date-fns-tz/format'\nimport utcToZonedTime from 'date-fns-tz/utcToZonedTime'\nimport type { Locale } from 'date-fns'\nimport repeat from 'lodash/repeat'\nimport trim from 'lodash/trim'\n\ntype Full = 'full'\ntype Long = 'long'\ntype Medium = 'medium'\ntype Short = 'short'\n\ntype Formats = Full | Long | Medium | Short\n\nconst dateFormatRepetitions: Record<Formats, number> = {\n  full: 4,\n  long: 3,\n  medium: 2,\n  short: 1,\n}\n\nexport type DateFormats = keyof typeof dateFormatRepetitions\n\nexport type DateTimeOptions = {\n  date?: boolean\n  time?: boolean\n}\n\nconst isDateFormat = (stringFormat: string) =>\n  dateFormatRepetitions[stringFormat as DateFormats]\n\nconst getStringFormat = (\n  stringFormat: DateFormats,\n  timeZone: undefined | string = undefined,\n  { date = true, time = true }: DateTimeOptions\n) => {\n  const dateFormat = repeat('P', dateFormatRepetitions[stringFormat]) // PPP... is localized date format in date-fns\n  const timeFormat = repeat('p', dateFormatRepetitions[stringFormat]) // ppp... is localized time format in date-fns\n  const timeZoneFormat = repeat('z', dateFormatRepetitions[stringFormat]) /// zzz... is localize timezone format in date-fns\n\n  return trim(\n    `${date ? dateFormat : ''}${time ? timeFormat : ''} ${\n      timeZone ? timeZoneFormat : ''\n    }`\n  )\n}\n\nexport const formatDateString = (\n  date?: Date,\n  stringFormat: DateFormats | string = 'P',\n  locale: Locale = getDateLocale(),\n  timeZone: undefined | string = undefined,\n  options: DateTimeOptions = {}\n): string | '' => {\n  if (!date) {\n    return ''\n  }\n\n  const renderedDate = timeZone ? utcToZonedTime(date, timeZone) : date\n\n  const actualFormat = isDateFormat(stringFormat)\n    ? getStringFormat(stringFormat as DateFormats, timeZone, options)\n    : stringFormat\n\n  return format(renderedDate, actualFormat, {\n    locale,\n    ...(timeZone && { timeZone }),\n  })\n}\n"]},"metadata":{},"sourceType":"module"}