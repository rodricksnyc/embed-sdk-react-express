{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n\nlet _ = t => t,\n    _t;\n\nimport React, { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { FloatingLabelField, omitFieldProps, pickFieldProps } from '../Field';\nimport { getHasValue } from '../Field/useFloatingLabel';\nimport { useFormContext } from '../../Form';\nimport { useID } from '../../../utils';\nimport { InputTime } from '../../Inputs/InputTime';\n\nconst checkValueOnBlur = e => {\n  const target = e.currentTarget;\n  const inputs = Array.from(target.querySelectorAll('input'));\n  return inputs.some(input => input.value !== '');\n};\n\nconst FieldTimeComponent = forwardRef((props, ref) => {\n  const validationMessage = useFormContext(props);\n  const id = useID(props.id);\n  return React.createElement(FloatingLabelField, _extends({}, pickFieldProps(props), {\n    id: id,\n    validationMessage: validationMessage,\n    hasValue: getHasValue(props),\n    checkValueOnBlur: checkValueOnBlur\n  }), React.createElement(InputTime, _extends({}, omitFieldProps(props), {\n    width: \"100%\",\n    \"aria-describedby\": `describedby-${id}`,\n    \"aria-labelledby\": `labelledby-${id}`,\n    id: id,\n    validationType: validationMessage && validationMessage.type,\n    ref: ref\n  })));\n});\nexport const FieldTime = styled(FieldTimeComponent).withConfig({\n  displayName: \"FieldTime\",\n  componentId: \"sc-105s2jn-0\"\n})(_t || (_t = _``));","map":{"version":3,"mappings":";;;;;AAMA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,kBAAT,EAA6BC,cAA7B,EAA6CC,cAA7C,QAAmE,UAAnE;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,SAASC,SAAT,QAA0B,wBAA1B;;AAMA,MAAMC,gBAAgB,GAAIC,CAAa,IAAK;EAC1C,MAAMC,MAAM,GAAGD,CAAC,CAACE,aAAjB;EACA,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAND,CAAWH,MAAM,CAACK,gBAAPL,CAAwB,OAAxBA,CAAXG,CAAf;EAEA,OAAOD,MAAM,CAACI,IAAPJ,CAAYK,KAAK,IAAIA,KAAK,CAACC,KAAND,KAAgB,EAArCL,CAAP;AACD,CALD;;AAOA,MAAMO,kBAAkB,GAAGpB,UAAU,CACnC,CAACqB,KAAD,EAAwBC,GAAxB,KAAuD;EACrD,MAAMC,iBAAiB,GAAGjB,cAAc,CAACe,KAAD,CAAxC;EACA,MAAMG,EAAE,GAAGjB,KAAK,CAACc,KAAK,CAACG,EAAP,CAAhB;EACA,OACEzB,oBAACG,kBAAD,EAAmBuB,aACbrB,cAAc,CAACiB,KAAD,CADD,EACQ;IACzBG,EAAE,EAAEA,EADqB;IAEzBD,iBAAiB,EAAEA,iBAFM;IAGzBG,QAAQ,EAAErB,WAAW,CAACgB,KAAD,CAHI;IAIzBZ,gBAAgB,EAAEA;EAJO,CADR,CAAnB,EAOEV,oBAACS,SAAD,EAAUiB,aACJtB,cAAc,CAACkB,KAAD,CADV,EACiB;IACzBM,KAAK,EAAC,MADmB;IAEzB,oBAAmB,eAAcH,EAAG,EAFX;IAGzB,mBAAkB,cAAaA,EAAG,EAHT;IAIzBA,EAAE,EAAEA,EAJqB;IAKzBI,cAAc,EAAEL,iBAAiB,IAAIA,iBAAiB,CAACM,IAL9B;IAMzBP,GAAG,EAAEA;EANoB,CADjB,CAAV,CAPF,CADF;AAmBD,CAvBkC,CAArC;AA0BA,OAAO,MAAMQ,SAAS,GAAG7B,MAAM,CAACmB,kBAAD,CAANnB,CAA0B8B,UAA1B9B,CAA0B;EAAA+B;EAAAC;AAAA,CAA1BhC,EAA0BiC,aAAC,EAAD,CAA1BjC,CAAlB","names":["React","forwardRef","styled","FloatingLabelField","omitFieldProps","pickFieldProps","getHasValue","useFormContext","useID","InputTime","checkValueOnBlur","e","target","currentTarget","inputs","Array","from","querySelectorAll","some","input","value","FieldTimeComponent","props","ref","validationMessage","id","_extends","hasValue","width","validationType","type","FieldTime","withConfig","displayName","componentId","_t"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Fields/FieldTime/FieldTime.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { FocusEvent, Ref } from 'react'\nimport React, { forwardRef } from 'react'\nimport styled from 'styled-components'\nimport type { FloatingLabelFieldProps } from '../Field/types'\nimport { FloatingLabelField, omitFieldProps, pickFieldProps } from '../Field'\nimport { getHasValue } from '../Field/useFloatingLabel'\nimport { useFormContext } from '../../Form'\nimport { useID } from '../../../utils'\nimport type { InputTimeProps } from '../../Inputs/InputTime'\nimport { InputTime } from '../../Inputs/InputTime'\n\nexport interface FieldTimeProps\n  extends FloatingLabelFieldProps,\n    InputTimeProps {}\n\nconst checkValueOnBlur = (e: FocusEvent) => {\n  const target = e.currentTarget\n  const inputs = Array.from(target.querySelectorAll('input'))\n  // Check all 3 inputs for a value\n  return inputs.some(input => input.value !== '')\n}\n\nconst FieldTimeComponent = forwardRef(\n  (props: FieldTimeProps, ref: Ref<HTMLInputElement>) => {\n    const validationMessage = useFormContext(props)\n    const id = useID(props.id)\n    return (\n      <FloatingLabelField\n        {...pickFieldProps(props)}\n        id={id}\n        validationMessage={validationMessage}\n        hasValue={getHasValue(props)}\n        checkValueOnBlur={checkValueOnBlur}\n      >\n        <InputTime\n          {...omitFieldProps(props)}\n          width=\"100%\"\n          aria-describedby={`describedby-${id}`}\n          aria-labelledby={`labelledby-${id}`}\n          id={id}\n          validationType={validationMessage && validationMessage.type}\n          ref={ref}\n        />\n      </FloatingLabelField>\n    )\n  }\n)\n\nexport const FieldTime = styled(FieldTimeComponent)``\n"]},"metadata":{},"sourceType":"module"}