{"ast":null,"code":"import { useRef, useEffect } from 'react';\nexport const usePreviousValue = value => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};","map":{"version":3,"mappings":"AAKA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AAUA,OAAO,MAAMC,gBAAgB,GAAgCC,KAAQ,IAAK;EACxE,MAAMC,GAAG,GAAGJ,MAAM,EAAlB;EACAC,SAAS,CAAC,MAAM;IACdG,GAAG,CAACC,OAAJD,GAAcD,KAAdC;EACD,CAFQ,CAATH;EAGA,OAAOG,GAAG,CAACC,OAAX;AACD,CANM","names":["useRef","useEffect","usePreviousValue","value","ref","current"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/usePreviousValue.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useRef, useEffect } from 'react'\n\ntype UsePreviousValue =\n  | boolean\n  | number[]\n  | string\n  | number\n  | string[]\n  | undefined\n\nexport const usePreviousValue = <T extends UsePreviousValue>(value: T) => {\n  const ref = useRef<T>()\n  useEffect(() => {\n    ref.current = value\n  })\n  return ref.current\n}\n"]},"metadata":{},"sourceType":"module"}