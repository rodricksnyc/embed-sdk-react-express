{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { cloneElement, createContext, isValidElement, useCallback, useContext } from 'react';\nimport { TreeCollectionContext } from './TreeCollectionContext';\nexport const WindowedTreeContext = createContext({\n  partialRender: false\n});\nexport const WindowedTreeNode = _ref => {\n  let {\n    content,\n    firstIDinWindow,\n    id,\n    items\n  } = _ref;\n  const context = useContext(TreeCollectionContext);\n  const toggleNode = useCallback(isOpen => {\n    var _context$toggleNode;\n\n    (_context$toggleNode = context.toggleNode) === null || _context$toggleNode === void 0 ? void 0 : _context$toggleNode.call(context, id, isOpen);\n  }, [context, id]);\n\n  if (items && isValidElement(content)) {\n    var _context$toggleStateM, _context$toggleStateM2;\n\n    const props = {\n      children: items.map(item => React.createElement(WindowedTreeNode, _extends({\n        firstIDinWindow: firstIDinWindow\n      }, item, {\n        key: item.id\n      })))\n    };\n    const isOpen = (_context$toggleStateM = context.toggleStateMap) === null || _context$toggleStateM === void 0 ? void 0 : (_context$toggleStateM2 = _context$toggleStateM[id]) === null || _context$toggleStateM2 === void 0 ? void 0 : _context$toggleStateM2.isOpen;\n    return React.createElement(WindowedTreeContext.Provider, {\n      value: {\n        density: context.density,\n        isOpen,\n        partialRender: firstIDinWindow ? id < firstIDinWindow : false,\n        toggleNode\n      }\n    }, cloneElement(content, props));\n  }\n\n  return content;\n};","map":{"version":3,"mappings":";AAMA,OAAOA,KAAP,IACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,WAJF,EAKEC,UALF,QAMO,OANP;AAOA,SAASC,qBAAT,QAAsC,yBAAtC;AASA,OAAO,MAAMC,mBAAmB,GAAGL,aAAa,CAA2B;EACzEM,aAAa,EAAE;AAD0D,CAA3B,CAAzC;AAIP,OAAO,MAAMC,gBAAgB,GAAG,QAO1B;EAAA,IAP2B;IAC/BC,OAD+B;IAE/BC,eAF+B;IAG/BC,EAH+B;IAI/BC;EAJ+B,CAO3B;EAEJ,MAAMC,OAAO,GAAGT,UAAU,CAACC,qBAAD,CAA1B;EACA,MAAMS,UAAU,GAAGX,WAAW,CAC3BY,MAAe,IAAK;IAAA;;IACnB,8BAAO,CAACD,UAAR,MAAkB,IAAlB,IAAkBE,8BAAlB,GAAkB,MAAlB,qCAAqBL,EAArB,EAAyBI,MAAzB;EACD,CAH2B,EAI5B,CAACF,OAAD,EAAUF,EAAV,CAJ4B,CAA9B;;EAOA,IAAIC,KAAK,IAAIV,cAAc,CAACO,OAAD,CAA3B,EAAsC;IAAA;;IAEpC,MAAMQ,KAAK,GAAG;MACZC,QAAQ,EAAEN,KAAK,CAACO,GAANP,CAAUQ,IAAI,IACtBrB,oBAACS,gBAAD,EAAiBa;QACfX,eAAe,EAAEA;MADF,GAEXU,IAFW,EAEP;QACRE,GAAG,EAAEF,IAAI,CAACT;MADF,CAFO,CAAjB,CADQC;IADE,CAAd;IASA,MAAMG,MAAM,4BAAGF,OAAO,CAACU,cAAX,MAAyB,IAAzB,IAAyBC,gCAAzB,GAAyB,MAAzB,GAAyB,0BAAtBA,sBAAyBb,EAAzB,CAAsB,MAAM,IAAN,IAAMc,iCAAN,GAAM,MAAN,GAAtBA,uBAA8BV,MAA7C;IAEA,OACEhB,oBAACO,mBAAmB,CAACoB,QAArB,EAA6B;MAC3BC,KAAK,EAAE;QACLC,OAAO,EAAEf,OAAO,CAACe,OADZ;QAELb,MAFK;QAGLR,aAAa,EAAEG,eAAe,GAAGC,EAAE,GAAGD,eAAR,GAA0B,KAHnD;QAILI;MAJK;IADoB,CAA7B,EAQGd,YAAY,CAACS,OAAD,EAAUQ,KAAV,CARf,CADF;EAYF;;EACA,OAAOR,OAAP;AACD,CA5CM","names":["React","cloneElement","createContext","isValidElement","useCallback","useContext","TreeCollectionContext","WindowedTreeContext","partialRender","WindowedTreeNode","content","firstIDinWindow","id","items","context","toggleNode","isOpen","_context$toggleNode","props","children","map","item","_extends","key","toggleStateMap","_context$toggleStateM","_context$toggleStateM2","Provider","value","density"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Tree/WindowedTreeNode.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { DensityProp } from '@looker/design-tokens'\nimport React, {\n  cloneElement,\n  createContext,\n  isValidElement,\n  useCallback,\n  useContext,\n} from 'react'\nimport { TreeCollectionContext } from './TreeCollectionContext'\nimport type { WindowedTreeNodeIDProps } from './types'\n\nexport type WindowedTreeContextProps = DensityProp & {\n  isOpen?: boolean\n  partialRender: boolean\n  toggleNode?: (isOpen: boolean) => void\n}\n\nexport const WindowedTreeContext = createContext<WindowedTreeContextProps>({\n  partialRender: false,\n})\n\nexport const WindowedTreeNode = ({\n  content,\n  firstIDinWindow,\n  id,\n  items,\n}: WindowedTreeNodeIDProps & {\n  firstIDinWindow?: number\n}) => {\n  // Update state for which tree nodes are opened / closed\n  const context = useContext(TreeCollectionContext)\n  const toggleNode = useCallback(\n    (isOpen: boolean) => {\n      context.toggleNode?.(id, isOpen)\n    },\n    [context, id]\n  )\n\n  if (items && isValidElement(content)) {\n    // insert the items as children\n    const props = {\n      children: items.map(item => (\n        <WindowedTreeNode\n          firstIDinWindow={firstIDinWindow}\n          {...item}\n          key={item.id}\n        />\n      )),\n    }\n    const isOpen = context.toggleStateMap?.[id]?.isOpen\n\n    return (\n      <WindowedTreeContext.Provider\n        value={{\n          density: context.density,\n          isOpen,\n          partialRender: firstIDinWindow ? id < firstIDinWindow : false,\n          toggleNode,\n        }}\n      >\n        {cloneElement(content, props)}\n      </WindowedTreeContext.Provider>\n    )\n  }\n  return content\n}\n"]},"metadata":{},"sourceType":"module"}