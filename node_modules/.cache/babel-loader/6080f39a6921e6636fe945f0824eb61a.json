{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nconst _excluded = [\"children\", \"content\", \"id\", \"listRef\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport React, { cloneElement, forwardRef } from 'react';\nimport { Popover, popoverPropKeys } from '../Popover';\nimport { useID } from '../utils';\nimport { MenuList } from './MenuList';\n\nconst partitionMenuProps = (props, popoverPropKeys) => {\n  const allProps = _objectSpread({}, props);\n\n  const popoverProps = {};\n  popoverPropKeys.forEach(key => {\n    if (props[key] !== undefined) {\n      popoverProps[key] = props[key];\n    }\n\n    delete allProps[key];\n  });\n  const listProps = allProps;\n  return [popoverProps, listProps];\n};\n\nexport const Menu = forwardRef((_ref, ref) => {\n  let {\n    children,\n    content,\n    id: propsID,\n    listRef\n  } = _ref,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  const [popoverProps, listProps] = partitionMenuProps(restProps, popoverPropKeys);\n  const id = useID(propsID);\n  const list = content && React.createElement(MenuList, _extends({\n    id: id\n  }, listProps, {\n    ref: listRef,\n    \"data-autofocus\": \"true\"\n  }), content);\n  children = cloneElement(children, {\n    'aria-controls': id\n  });\n  return React.createElement(Popover, _extends({\n    content: list,\n    ref: ref\n  }, popoverProps), children);\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,OAAOA,KAAP,IAAgBC,YAAhB,EAA8BC,UAA9B,QAAgD,OAAhD;AAGA,SAASC,OAAT,EAAkBC,eAAlB,QAAyC,YAAzC;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,QAAT,QAAyB,YAAzB;;AAsBA,MAAMC,kBAAkB,GAAG,CACzBC,KADyB,EAEzBJ,eAFyB,KAGtB;EACH,MAAMK,QAAQ,qBAAQD,KAAR,CAAd;;EACA,MAAME,YAAqC,GAAG,EAA9C;EAEAN,eAAe,CAACO,OAAhBP,CAAwBQ,GAAG,IAAI;IAC7B,IAAIJ,KAAK,CAACI,GAAD,CAALJ,KAAsCK,SAA1C,EAAqD;MACnDH,YAAY,CAACE,GAAD,CAAZF,GAAoBF,KAAK,CAACI,GAAD,CAAzBF;IACF;;IACA,OAAOD,QAAQ,CAACG,GAAD,CAAf;EACD,CALDR;EAOA,MAAMU,SAAS,GAAGL,QAAlB;EAEA,OAAO,CAACC,YAAD,EAAeI,SAAf,CAAP;AACD,CAjBD;;AAmBA,OAAO,MAAMC,IAAI,GAAGb,UAAU,CAC5B,OAGEc,GAHF,KAIK;EAAA,IAHH;IAAEC,QAAF;IAAYC,OAAZ;IAAqBC,EAAE,EAAEC,OAAzB;IAAkCC;EAAlC,IAAoEC,IAGjE;EAAA,IAH2CC,SAAS,4CAGpD;;EACH,MAAM,CAACb,YAAD,EAAeI,SAAf,IAA4BP,kBAAkB,CAClDgB,SADkD,EAElDnB,eAFkD,CAApD;EAKA,MAAMe,EAAE,GAAGd,KAAK,CAACe,OAAD,CAAhB;EACA,MAAMI,IAAI,GAAGN,OAAO,IAClBlB,oBAACM,QAAD,EAASmB;IAACN,EAAE,EAAEA;EAAL,GAAaL,SAAb,EAAsB;IAAEE,GAAG,EAAEK,OAAP;IAAgB,kBAAe;EAA/B,CAAtB,CAAT,EACGH,OADH,CADF;EAKAD,QAAQ,GAAGhB,YAAY,CAACgB,QAAD,EAAW;IAAE,iBAAiBE;EAAnB,CAAX,CAAvBF;EAEA,OACEjB,oBAACG,OAAD,EAAQsB;IAACP,OAAO,EAAEM,IAAV;IAAgBR,GAAG,EAAEA;EAArB,GAA8BN,YAA9B,CAAR,EACGO,QADH,CADF;AAKD,CAxB2B,CAAvB","names":["React","cloneElement","forwardRef","Popover","popoverPropKeys","useID","MenuList","partitionMenuProps","props","allProps","popoverProps","forEach","key","undefined","listProps","Menu","ref","children","content","id","propsID","listRef","_ref","restProps","list","_extends"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Menu/Menu.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Ref, ReactElement } from 'react'\nimport React, { cloneElement, forwardRef } from 'react'\nimport type { ListProps } from '../List'\nimport type { PopoverProps, UsePopoverResponseDom } from '../Popover'\nimport { Popover, popoverPropKeys } from '../Popover'\nimport { useID } from '../utils'\nimport { MenuList } from './MenuList'\n\nexport interface MenuDomProps extends UsePopoverResponseDom {\n  'aria-controls': string\n}\n\nexport interface MenuProps\n  extends Omit<PopoverProps, 'children'>,\n    Omit<ListProps, 'children' | 'content'> {\n  /**\n   * A ReactElement that accepts dom props\n   */\n  children: ReactElement<MenuDomProps>\n  /**\n   * The ref to be passed to the list element (`ref` is passed to the triggering element)\n   */\n  listRef?: Ref<HTMLUListElement>\n}\ntype PartitionProps = Omit<MenuProps, 'children' | 'content' | 'id' | 'listRef'>\ntype KeyOfPartitionProps = keyof PartitionProps\n\n// Returns two object, the first being Popover props and the second being List props\nconst partitionMenuProps = (\n  props: PartitionProps,\n  popoverPropKeys: Array<keyof PopoverProps>\n) => {\n  const allProps = { ...props }\n  const popoverProps: Record<string, unknown> = {}\n\n  popoverPropKeys.forEach(key => {\n    if (props[key as KeyOfPartitionProps] !== undefined) {\n      popoverProps[key] = props[key as KeyOfPartitionProps]\n    }\n    delete allProps[key as KeyOfPartitionProps]\n  })\n\n  const listProps = allProps\n\n  return [popoverProps, listProps]\n}\n\nexport const Menu = forwardRef(\n  (\n    { children, content, id: propsID, listRef, ...restProps }: MenuProps,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ref: Ref<any>\n  ) => {\n    const [popoverProps, listProps] = partitionMenuProps(\n      restProps,\n      popoverPropKeys\n    )\n\n    const id = useID(propsID)\n    const list = content && (\n      <MenuList id={id} {...listProps} ref={listRef} data-autofocus=\"true\">\n        {content}\n      </MenuList>\n    )\n    children = cloneElement(children, { 'aria-controls': id })\n\n    return (\n      <Popover content={list} ref={ref} {...popoverProps}>\n        {children}\n      </Popover>\n    )\n  }\n)\n"]},"metadata":{},"sourceType":"module"}