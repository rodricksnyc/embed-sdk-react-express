{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"values\", \"onChange\", \"chipIconLabel\", \"clearIconLabel\", \"inputValue\", \"onInputChange\", \"parseInputValue\", \"validate\", \"formatInputValue\", \"onValidationFail\", \"onDuplicate\", \"onBlur\", \"onKeyDown\", \"onPaste\"];\n\nlet _ = t => t,\n    _t;\n\nimport React, { forwardRef, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useControlWarn, useWrapEvent } from '../../../utils';\nimport { InputChipsBase } from './InputChipsBase';\nexport const splitInputValue = inputValue => {\n  const commaKey = '0UX1bJKsFBFQonIIXq9oyeV40ITHwtew';\n  const tabKey = 'heF6X4qMBtIti8c8U9nMhskYOQUQiXqx';\n  const removedEscapes = inputValue.replace(/\\\\,/g, commaKey).replace(/\\\\\\t/g, tabKey);\n  const splitRegexp = `[,\\\\t\\\\n\\\\r]+`;\n  return removedEscapes.split(new RegExp(splitRegexp)).map(value => value.replace(new RegExp(commaKey, 'g'), ',').replace(new RegExp(tabKey, 'g'), '\\t'));\n};\nexport const validateValues = (newValues, currentValues, validate, formatInputValue) => {\n  const duplicateValues = [];\n  const invalidValues = [];\n  const unusedValues = [];\n  const validValues = [];\n  newValues.forEach(val => {\n    const formattedValue = formatInputValue ? formatInputValue(val) : val;\n    if (formattedValue === '') return;\n\n    if (validate && !validate(formattedValue)) {\n      unusedValues.push(formattedValue);\n      return invalidValues.push(formattedValue);\n    } else if (currentValues && currentValues.includes(formattedValue)) {\n      unusedValues.push(formattedValue);\n      return duplicateValues.push(formattedValue);\n    } else {\n      return validValues.push(formattedValue);\n    }\n  });\n  return {\n    duplicateValues,\n    invalidValues,\n    unusedValues,\n    validValues\n  };\n};\n\nconst trimValue = value => value.trim();\n\nexport const InputChips = styled(forwardRef((_ref, ref) => {\n  let {\n    values,\n    onChange,\n    chipIconLabel,\n    clearIconLabel,\n    inputValue: controlledInputValue,\n    onInputChange,\n    parseInputValue = splitInputValue,\n    validate,\n    formatInputValue = trimValue,\n    onValidationFail,\n    onDuplicate,\n    onBlur,\n    onKeyDown,\n    onPaste\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  const isControlled = useControlWarn({\n    controllingProps: ['inputValue', 'onInputChange'],\n    isControlledCheck: () => controlledInputValue !== undefined && onInputChange !== undefined,\n    name: 'InputChips'\n  });\n  const [uncontrolledValue, setUncontrolledValue] = useState('');\n  const inputValue = isControlled ? controlledInputValue || '' : uncontrolledValue;\n\n  const setInputValue = (val, event) => {\n    if (!isControlled) {\n      setUncontrolledValue(val);\n    }\n\n    if (val !== inputValue) {\n      onInputChange && onInputChange(val, event);\n    }\n  };\n\n  const updateValues = newInputValue => {\n    const inputValues = parseInputValue(newInputValue || inputValue);\n    const {\n      duplicateValues,\n      invalidValues,\n      unusedValues,\n      validValues\n    } = validateValues(inputValues, values, validate, formatInputValue);\n    const updatedInputValue = unusedValues.join(', ');\n    const updatedValues = validValues.length && [...values, ...validValues];\n\n    if (updatedValues) {\n      onChange(updatedValues);\n    }\n\n    setInputValue(updatedInputValue);\n\n    if (invalidValues.length > 0) {\n      onValidationFail && onValidationFail(invalidValues);\n    }\n\n    if (duplicateValues.length > 0) {\n      onDuplicate && onDuplicate(duplicateValues);\n    }\n  };\n\n  const handleBlur = () => {\n    updateValues();\n  };\n\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      updateValues();\n    }\n  };\n\n  const pastedValue = useRef();\n\n  const handlePaste = e => {\n    pastedValue.current = e.clipboardData.getData('Text');\n  };\n\n  const handleInputChange = (value, event) => {\n    if (pastedValue.current || value.endsWith(',') && !value.endsWith('\\\\,')) {\n      updateValues(pastedValue.current || value);\n      pastedValue.current = null;\n    } else {\n      setInputValue(value, event);\n    }\n  };\n\n  const wrappedEvents = {\n    onBlur: useWrapEvent(handleBlur, onBlur),\n    onKeyDown: useWrapEvent(handleKeyDown, onKeyDown),\n    onPaste: useWrapEvent(handlePaste, onPaste)\n  };\n  return React.createElement(InputChipsBase, _extends({\n    ref: ref,\n    values: values,\n    onChange: onChange,\n    chipIconLabel: chipIconLabel,\n    clearIconLabel: clearIconLabel,\n    inputValue: inputValue,\n    onInputChange: handleInputChange\n  }, wrappedEvents, props));\n})).withConfig({\n  displayName: \"InputChips\",\n  componentId: \"sc-6zpztz-0\"\n})(_t || (_t = _``));","map":{"version":3,"mappings":"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","names":["React","forwardRef","useRef","useState","styled","useControlWarn","useWrapEvent","InputChipsBase","splitInputValue","inputValue","commaKey","tabKey","removedEscapes","replace","splitRegexp","split","RegExp","map","value","validateValues","newValues","currentValues","validate","formatInputValue","duplicateValues","invalidValues","unusedValues","validValues","forEach","val","formattedValue","push","includes","trimValue","trim","InputChips","ref","values","onChange","chipIconLabel","clearIconLabel","controlledInputValue","onInputChange","parseInputValue","onValidationFail","onDuplicate","onBlur","onKeyDown","onPaste","_ref","props","isControlled","controllingProps","isControlledCheck","undefined","name","uncontrolledValue","setUncontrolledValue","setInputValue","event","updateValues","newInputValue","inputValues","updatedInputValue","join","updatedValues","length","handleBlur","handleKeyDown","e","key","preventDefault","pastedValue","handlePaste","current","clipboardData","getData","handleInputChange","endsWith","wrappedEvents","_extends","withConfig","displayName","componentId","_t"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Inputs/InputChips/InputChips.tsx"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { ClipboardEvent, KeyboardEvent, Ref, FormEvent } from 'react'\nimport React, { forwardRef, useRef, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { useControlWarn, useWrapEvent } from '../../../utils'\nimport type {\n  InputChipsCommonProps,\n  InputChipsControlProps,\n  InputChipsInputControlProps,\n} from './InputChipsBase'\nimport { InputChipsBase } from './InputChipsBase'\n\n/**\n * InputChips is a component that appears to be a regular text input,\n * but also allows (validated) user inputs to be stored as 'chips' (see the Chip element)\n */\n\nexport type FormatInputValue = ((value: string) => string) | false\nexport interface InputChipsValidationProps {\n  /**\n   * for checking each value before converting to a chip\n   */\n  validate?: (value: string) => boolean\n  /**\n   * Callback to format each value entered, before validation.\n   * Defaults to `value.trim()`, set to `false` to avoid trimming whitespace.\n   */\n  formatInputValue?: FormatInputValue\n  /**\n   * callback when values fail validation\n   */\n  onValidationFail?: (values: string[]) => void\n  /**\n   * callback when values are duplicates\n   */\n  onDuplicate?: (values: string[]) => void\n}\n\nexport const splitInputValue = (inputValue: string) => {\n  // Preserve escaped commas & tabs using these strings produced by a random string generator\n  const commaKey = '0UX1bJKsFBFQonIIXq9oyeV40ITHwtew'\n  const tabKey = 'heF6X4qMBtIti8c8U9nMhskYOQUQiXqx'\n  const removedEscapes = inputValue\n    .replace(/\\\\,/g, commaKey)\n    .replace(/\\\\\\t/g, tabKey)\n\n  // Values may be separated by ',' '\\t', '\\n' and ' '\n  const splitRegexp = `[,\\\\t\\\\n\\\\r]+`\n  return removedEscapes\n    .split(new RegExp(splitRegexp))\n    .map(value =>\n      value\n        .replace(new RegExp(commaKey, 'g'), ',')\n        .replace(new RegExp(tabKey, 'g'), '\\t')\n    )\n}\n\nexport interface InputChipsProps\n  extends Omit<InputChipsCommonProps, 'onValidationFail'>,\n    InputChipsControlProps,\n    Partial<InputChipsInputControlProps>,\n    InputChipsValidationProps {\n  /**\n   * How to convert a typed or pasted string into an array of values\n   */\n  parseInputValue?: (value: string) => string[]\n}\n\nexport const validateValues = (\n  newValues: string[],\n  currentValues: string[],\n  validate?: (value: string) => boolean,\n  formatInputValue?: FormatInputValue\n) => {\n  const duplicateValues: string[] = []\n  const invalidValues: string[] = []\n  const unusedValues: string[] = []\n  const validValues: string[] = []\n\n  newValues.forEach((val: string) => {\n    const formattedValue = formatInputValue ? formatInputValue(val) : val\n    if (formattedValue === '') return\n    // Make sure each value is valid and doesn't already exist\n    if (validate && !validate(formattedValue)) {\n      unusedValues.push(formattedValue)\n      return invalidValues.push(formattedValue)\n    } else if (currentValues && currentValues.includes(formattedValue)) {\n      unusedValues.push(formattedValue)\n      return duplicateValues.push(formattedValue)\n    } else {\n      return validValues.push(formattedValue)\n    }\n  })\n\n  return { duplicateValues, invalidValues, unusedValues, validValues }\n}\n\nconst trimValue = (value: string) => value.trim()\n\nexport const InputChips = styled(\n  forwardRef(\n    (\n      {\n        values,\n        onChange,\n        chipIconLabel,\n        clearIconLabel,\n        inputValue: controlledInputValue,\n        onInputChange,\n        parseInputValue = splitInputValue,\n        validate,\n        formatInputValue = trimValue,\n        onValidationFail,\n        onDuplicate,\n\n        // event handlers needing to be wrapped\n        onBlur,\n        onKeyDown,\n        onPaste,\n\n        ...props\n      }: InputChipsProps,\n      ref: Ref<HTMLInputElement>\n    ) => {\n      const isControlled = useControlWarn({\n        controllingProps: ['inputValue', 'onInputChange'],\n        isControlledCheck: () =>\n          controlledInputValue !== undefined && onInputChange !== undefined,\n        name: 'InputChips',\n      })\n\n      const [uncontrolledValue, setUncontrolledValue] = useState('')\n      const inputValue = isControlled\n        ? controlledInputValue || ''\n        : uncontrolledValue\n\n      const setInputValue = (\n        val: string,\n        event?: FormEvent<HTMLInputElement>\n      ) => {\n        if (!isControlled) {\n          setUncontrolledValue(val)\n        }\n        if (val !== inputValue) {\n          onInputChange && onInputChange(val, event)\n        }\n      }\n\n      const updateValues = (newInputValue?: string) => {\n        const inputValues = parseInputValue(newInputValue || inputValue)\n        const { duplicateValues, invalidValues, unusedValues, validValues } =\n          validateValues(inputValues, values, validate, formatInputValue)\n\n        // Save valid values and keep invalid ones in the input\n        const updatedInputValue = unusedValues.join(', ')\n        const updatedValues = validValues.length && [...values, ...validValues]\n        if (updatedValues) {\n          onChange(updatedValues)\n        }\n        setInputValue(updatedInputValue)\n\n        if (invalidValues.length > 0) {\n          onValidationFail && onValidationFail(invalidValues)\n        }\n        if (duplicateValues.length > 0) {\n          onDuplicate && onDuplicate(duplicateValues)\n        }\n      }\n\n      const handleBlur = () => {\n        updateValues()\n      }\n\n      const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n          // Don't submit a form if there is one\n          e.preventDefault()\n          // Update values when the user hits return\n          updateValues()\n        }\n      }\n\n      const pastedValue = useRef<string | null>()\n      const handlePaste = (e: ClipboardEvent<HTMLInputElement>) => {\n        // Save the pasted value to detect newlines before the browser strips them\n        pastedValue.current = e.clipboardData.getData('Text')\n      }\n\n      const handleInputChange = (\n        value: string,\n        event?: FormEvent<HTMLInputElement>\n      ) => {\n        // If the last character is an unescaped comma, update the values\n        // Or, if the user pastes content, we assume that the final value is complete\n        // even if there's no comma at the end\n        if (\n          pastedValue.current ||\n          (value.endsWith(',') && !value.endsWith('\\\\,'))\n        ) {\n          // Use the pasted value if there is one\n          // (before newlines are stripped by the browser)\n          updateValues(pastedValue.current || value)\n          pastedValue.current = null\n        } else {\n          setInputValue(value, event)\n        }\n      }\n\n      const wrappedEvents = {\n        onBlur: useWrapEvent(handleBlur, onBlur),\n        onKeyDown: useWrapEvent(handleKeyDown, onKeyDown),\n        onPaste: useWrapEvent(handlePaste, onPaste),\n      }\n\n      return (\n        <InputChipsBase\n          ref={ref}\n          values={values}\n          onChange={onChange}\n          chipIconLabel={chipIconLabel}\n          clearIconLabel={clearIconLabel}\n          inputValue={inputValue}\n          onInputChange={handleInputChange}\n          {...wrappedEvents}\n          {...props}\n        />\n      )\n    }\n  )\n)``\n"]},"metadata":{},"sourceType":"module"}