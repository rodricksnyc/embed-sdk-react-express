{"ast":null,"code":"import { useContext } from 'react';\nimport { ComboboxActionType, ComboboxState } from './state';\nexport function useBlur(context) {\n  const {\n    data: {\n      inputValue\n    },\n    state,\n    transition,\n    listRef,\n    inputElement,\n    freeInputPropRef\n  } = useContext(context);\n\n  function closeList(action) {\n    const payload = freeInputPropRef && freeInputPropRef.current ? {\n      inputValue\n    } : undefined;\n    transition && transition(action, payload);\n  }\n\n  return function handleBlur(e) {\n    if (!e) {\n      if (state !== ComboboxState.IDLE) {\n        closeList(ComboboxActionType.ESCAPE);\n      }\n\n      return;\n    }\n\n    const nextFocusTarget = e.relatedTarget;\n    const popoverCurrent = listRef ? listRef.current : null;\n\n    if (popoverCurrent) {\n      const focusInList = popoverCurrent && popoverCurrent.contains(nextFocusTarget);\n\n      if (focusInList && state !== ComboboxState.INTERACTING) {\n        transition && transition(ComboboxActionType.INTERACT);\n      } else if (!focusInList && nextFocusTarget !== inputElement) {\n        closeList(ComboboxActionType.BLUR);\n      }\n\n      focusInList && freeInputPropRef && freeInputPropRef.current && e.preventDefault();\n    }\n  };\n}","map":{"version":3,"mappings":"AAQA,SAASA,UAAT,QAA2B,OAA3B;AAKA,SAASC,kBAAT,EAA6BC,aAA7B,QAAkD,SAAlD;AAEA,OAAO,SAASC,OAAT,CAILC,OAJK,EAIuB;EAC5B,MAAM;IACJC,IAAI,EAAE;MAAEC;IAAF,CADF;IAEJC,KAFI;IAGJC,UAHI;IAIJC,OAJI;IAKJC,YALI;IAMJC;EANI,IAOFX,UAAU,CAACI,OAAD,CAPd;;EASA,SAASQ,SAAT,CAAmBC,MAAnB,EAA+C;IAG7C,MAAMC,OAAO,GACXH,gBAAgB,IAAIA,gBAAgB,CAACI,OAArCJ,GAA+C;MAAEL;IAAF,CAA/CK,GAAgEK,SADlE;IAGAR,UAAU,IAAIA,UAAU,CAACK,MAAD,EAASC,OAAT,CAAxBN;EACF;;EAEA,OAAO,SAASS,UAAT,CAAoBC,CAApB,EAAoC;IACzC,IAAI,CAACA,CAAL,EAAQ;MAGN,IAAIX,KAAK,KAAKL,aAAa,CAACiB,IAA5B,EAAkC;QAChCP,SAAS,CAACX,kBAAkB,CAACmB,MAApB,CAATR;MACF;;MACA;IACF;;IAEA,MAAMS,eAAe,GAAGH,CAAC,CAACI,aAA1B;IACA,MAAMC,cAAc,GAAGd,OAAO,GAAGA,OAAO,CAACM,OAAX,GAAqB,IAAnD;;IACA,IAAIQ,cAAJ,EAAoB;MAClB,MAAMC,WAAW,GACfD,cAAc,IAAIA,cAAc,CAACE,QAAfF,CAAwBF,eAAxBE,CADpB;;MAGA,IAAIC,WAAW,IAAIjB,KAAK,KAAKL,aAAa,CAACwB,WAA3C,EAAwD;QAEtDlB,UAAU,IAAIA,UAAU,CAACP,kBAAkB,CAAC0B,QAApB,CAAxBnB;MACD,CAHD,MAGO,IAAI,CAACgB,WAAD,IAAgBH,eAAe,KAAKX,YAAxC,EAAsD;QAE3DE,SAAS,CAACX,kBAAkB,CAAC2B,IAApB,CAAThB;MACF;;MAGAY,WAAW,IACTb,gBADFa,IAEEb,gBAAgB,CAACI,OAFnBS,IAGEN,CAAC,CAACW,cAAFX,EAHFM;IAIF;EACD,CA9BD;AA+BF","names":["useContext","ComboboxActionType","ComboboxState","useBlur","context","data","inputValue","state","transition","listRef","inputElement","freeInputPropRef","closeList","action","payload","current","undefined","handleBlur","e","IDLE","ESCAPE","nextFocusTarget","relatedTarget","popoverCurrent","focusInList","contains","INTERACTING","INTERACT","BLUR","preventDefault"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Inputs/Combobox/utils/useBlur.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\n// Much of the following is pulled from https://github.com/reach/reach-ui\n// because their work is fantastic (but is not in TypeScript)\nimport type { Context, FocusEvent } from 'react'\nimport { useContext } from 'react'\nimport type {\n  ComboboxContextProps,\n  ComboboxMultiContextProps,\n} from '../ComboboxContext'\nimport { ComboboxActionType, ComboboxState } from './state'\n\nexport function useBlur<\n  TContext extends\n    | ComboboxContextProps\n    | ComboboxMultiContextProps = ComboboxContextProps\n>(context: Context<TContext>) {\n  const {\n    data: { inputValue },\n    state,\n    transition,\n    listRef,\n    inputElement,\n    freeInputPropRef,\n  } = useContext(context)\n\n  function closeList(action: ComboboxActionType) {\n    // When freeInput is true, the current inputValue should not be changed on blur\n    // (for Multi, InputChips will tokenize the inputValue on blur)\n    const payload =\n      freeInputPropRef && freeInputPropRef.current ? { inputValue } : undefined\n\n    transition && transition(action, payload)\n  }\n\n  return function handleBlur(e?: FocusEvent) {\n    if (!e) {\n      // handleBlur was called directly (via popover close)\n      // only need to close the list\n      if (state !== ComboboxState.IDLE) {\n        closeList(ComboboxActionType.ESCAPE)\n      }\n      return\n    }\n    // we on want to close only if focus rests outside the select\n    const nextFocusTarget = e.relatedTarget\n    const popoverCurrent = listRef ? listRef.current : null\n    if (popoverCurrent) {\n      const focusInList =\n        popoverCurrent && popoverCurrent.contains(nextFocusTarget)\n\n      if (focusInList && state !== ComboboxState.INTERACTING) {\n        // focus landed inside the select, keep it open\n        transition && transition(ComboboxActionType.INTERACT)\n      } else if (!focusInList && nextFocusTarget !== inputElement) {\n        // focus landed outside the select, close it\n        closeList(ComboboxActionType.BLUR)\n      }\n      // Stop ComboboxMultiInput + freeInput underlying InputChips blur handler from\n      // tokenizing input value when an option is clicked\n      focusInList &&\n        freeInputPropRef &&\n        freeInputPropRef.current &&\n        e.preventDefault()\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}