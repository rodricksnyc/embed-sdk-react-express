{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"validationMessages\"];\nimport React, { forwardRef, useContext, createContext } from 'react';\nimport { SpaceVertical } from '../Layout';\nexport const FormContext = createContext({});\nexport const Form = forwardRef((props, ref) => {\n  const {\n    validationMessages\n  } = props,\n        rest = _objectWithoutProperties(props, _excluded);\n\n  return React.createElement(FormContext.Provider, {\n    value: {\n      validationMessages\n    }\n  }, React.createElement(SpaceVertical, _extends({\n    as: \"form\"\n  }, rest, {\n    ref: ref\n  })));\n});\nForm.displayName = 'Form';\nexport function useFormContext(_ref) {\n  let {\n    name,\n    validationMessage\n  } = _ref;\n  const context = useContext(FormContext);\n  let vMessage;\n\n  if (context.validationMessages && name) {\n    vMessage = context.validationMessages[name];\n  } else if (validationMessage) {\n    vMessage = validationMessage;\n  }\n\n  return vMessage;\n}","map":{"version":3,"mappings":";;;AAMA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,aAAxC,QAA6D,OAA7D;AAGA,SAASC,aAAT,QAA8B,WAA9B;AAuBA,OAAO,MAAMC,WAAW,GAAGF,aAAa,CAAmB,EAAnB,CAAjC;AAEP,OAAO,MAAMG,IAAI,GAAGL,UAAU,CAC5B,CAACM,KAAD,EAAmBC,GAAnB,KAAiD;EAC/C,MAAM;IAAEC;EAAF,IAAkCF,KAAxC;EAAA,MAA+BG,IAAI,4BAAKH,KAAL,EAAUI,SAAV,CAAnC;;EACA,OACEX,oBAACK,WAAW,CAACO,QAAb,EAAqB;IACnBC,KAAK,EAAE;MACLJ;IADK;EADY,CAArB,EAKET,oBAACI,aAAD,EAAcU;IAACC,EAAE,EAAC;EAAJ,GAAeL,IAAf,EAAmB;IAAEF,GAAG,EAAEA;EAAP,CAAnB,CAAd,CALF,CADF;AASD,CAZ2B,CAAvB;AAePF,IAAI,CAACU,WAALV,GAAmB,MAAnBA;AAWA,OAAO,SAASW,cAAT,OAGiB;EAAA,IAHO;IAC7BC,IAD6B;IAE7BC;EAF6B,CAGP;EACtB,MAAMC,OAAO,GAAGlB,UAAU,CAACG,WAAD,CAA1B;EACA,IAAIgB,QAAJ;;EACA,IAAID,OAAO,CAACX,kBAARW,IAA8BF,IAAlC,EAAwC;IACtCG,QAAQ,GAAGD,OAAO,CAACX,kBAARW,CAA2BF,IAA3BE,CAAXC;EACD,CAFD,MAEO,IAAIF,iBAAJ,EAAuB;IAC5BE,QAAQ,GAAGF,iBAAXE;EACF;;EACA,OAAOA,QAAP;AACF","names":["React","forwardRef","useContext","createContext","SpaceVertical","FormContext","Form","props","ref","validationMessages","rest","_excluded","Provider","value","_extends","as","displayName","useFormContext","name","validationMessage","context","vMessage"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Form.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Ref, FormEventHandler } from 'react'\nimport React, { forwardRef, useContext, createContext } from 'react'\nimport type { CompatibleHTMLProps } from '@looker/design-tokens'\nimport type { SpaceHelperProps } from '../Layout'\nimport { SpaceVertical } from '../Layout'\nimport type { ValidationMessageProps } from './ValidationMessage'\n\nexport type ValidationMessages = Record<string, ValidationMessageProps>\n\nexport interface FormProps\n  extends SpaceHelperProps,\n    CompatibleHTMLProps<HTMLFormElement> {\n  /**\n   * A record of all validation messages for the form, where the key is the name\n   *  of the validated field and the value holds the information for the corresponding\n   *  message and validation type.\n   */\n  validationMessages?: ValidationMessages\n  onChange?: FormEventHandler<HTMLFormElement>\n  onInput?: FormEventHandler<HTMLFormElement>\n  onSubmit?: FormEventHandler<HTMLFormElement>\n}\n\nexport interface FormContextProps {\n  validationMessages?: ValidationMessages\n}\n\nexport const FormContext = createContext<FormContextProps>({})\n\nexport const Form = forwardRef(\n  (props: FormProps, ref: Ref<HTMLFormElement>) => {\n    const { validationMessages, ...rest } = props\n    return (\n      <FormContext.Provider\n        value={{\n          validationMessages,\n        }}\n      >\n        <SpaceVertical as=\"form\" {...rest} ref={ref} />\n      </FormContext.Provider>\n    )\n  }\n)\n\nForm.displayName = 'Form'\n\nexport interface ChildProp {\n  children?: JSX.Element\n}\n\nexport interface UseFormContextProps {\n  name?: string\n  validationMessage?: ValidationMessageProps\n}\n\nexport function useFormContext({\n  name,\n  validationMessage,\n}: UseFormContextProps) {\n  const context = useContext(FormContext)\n  let vMessage\n  if (context.validationMessages && name) {\n    vMessage = context.validationMessages[name]\n  } else if (validationMessage) {\n    vMessage = validationMessage\n  }\n  return vMessage\n}\n"]},"metadata":{},"sourceType":"module"}