{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tzTokenizeDate;\n/**\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\n * `date` as it will be rendered in the `timeZone`.\n */\n\nfunction tzTokenizeDate(date, timeZone) {\n  var dtf = getDateTimeFormat(timeZone);\n  return dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);\n}\n\nvar typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\n\nfunction partsOffset(dtf, date) {\n  try {\n    var formatted = dtf.formatToParts(date);\n    var filled = [];\n\n    for (var i = 0; i < formatted.length; i++) {\n      var pos = typeToPos[formatted[i].type];\n\n      if (pos >= 0) {\n        filled[pos] = parseInt(formatted[i].value, 10);\n      }\n    }\n\n    return filled;\n  } catch (error) {\n    if (error instanceof RangeError) {\n      return [NaN];\n    }\n\n    throw error;\n  }\n}\n\nfunction hackyOffset(dtf, date) {\n  var formatted = dtf.format(date).replace(/\\u200E/g, '');\n  var parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted); // var [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\n  // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\n\n  return [parsed[3], parsed[1], parsed[2], parsed[4], parsed[5], parsed[6]];\n} // Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\n// to get deterministic local date/time output according to the `en-US` locale which\n// can be used to extract local time parts as necessary.\n\n\nvar dtfCache = {};\n\nfunction getDateTimeFormat(timeZone) {\n  if (!dtfCache[timeZone]) {\n    // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\n    var testDateFormatted = new Intl.DateTimeFormat('en-US', {\n      hour12: false,\n      timeZone: 'America/New_York',\n      year: 'numeric',\n      month: 'numeric',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }).format(new Date('2014-06-25T04:00:00.123Z'));\n    var hourCycleSupported = testDateFormatted === '06/25/2014, 00:00:00' || testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00';\n    dtfCache[timeZone] = hourCycleSupported ? new Intl.DateTimeFormat('en-US', {\n      hour12: false,\n      timeZone: timeZone,\n      year: 'numeric',\n      month: 'numeric',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }) : new Intl.DateTimeFormat('en-US', {\n      hourCycle: 'h23',\n      timeZone: timeZone,\n      year: 'numeric',\n      month: 'numeric',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  }\n\n  return dtfCache[timeZone];\n}\n\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","tzTokenizeDate","date","timeZone","dtf","getDateTimeFormat","formatToParts","partsOffset","hackyOffset","typeToPos","year","month","day","hour","minute","second","formatted","filled","i","length","pos","type","parseInt","error","RangeError","NaN","format","replace","parsed","exec","dtfCache","testDateFormatted","Intl","DateTimeFormat","hour12","Date","hourCycleSupported","hourCycle","module"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/date-fns-tz/_lib/tzTokenizeDate/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tzTokenizeDate;\n\n/**\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\n * `date` as it will be rendered in the `timeZone`.\n */\nfunction tzTokenizeDate(date, timeZone) {\n  var dtf = getDateTimeFormat(timeZone);\n  return dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);\n}\n\nvar typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\n\nfunction partsOffset(dtf, date) {\n  try {\n    var formatted = dtf.formatToParts(date);\n    var filled = [];\n\n    for (var i = 0; i < formatted.length; i++) {\n      var pos = typeToPos[formatted[i].type];\n\n      if (pos >= 0) {\n        filled[pos] = parseInt(formatted[i].value, 10);\n      }\n    }\n\n    return filled;\n  } catch (error) {\n    if (error instanceof RangeError) {\n      return [NaN];\n    }\n\n    throw error;\n  }\n}\n\nfunction hackyOffset(dtf, date) {\n  var formatted = dtf.format(date).replace(/\\u200E/g, '');\n  var parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted); // var [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\n  // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\n\n  return [parsed[3], parsed[1], parsed[2], parsed[4], parsed[5], parsed[6]];\n} // Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\n// to get deterministic local date/time output according to the `en-US` locale which\n// can be used to extract local time parts as necessary.\n\n\nvar dtfCache = {};\n\nfunction getDateTimeFormat(timeZone) {\n  if (!dtfCache[timeZone]) {\n    // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\n    var testDateFormatted = new Intl.DateTimeFormat('en-US', {\n      hour12: false,\n      timeZone: 'America/New_York',\n      year: 'numeric',\n      month: 'numeric',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }).format(new Date('2014-06-25T04:00:00.123Z'));\n    var hourCycleSupported = testDateFormatted === '06/25/2014, 00:00:00' || testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00';\n    dtfCache[timeZone] = hourCycleSupported ? new Intl.DateTimeFormat('en-US', {\n      hour12: false,\n      timeZone: timeZone,\n      year: 'numeric',\n      month: 'numeric',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }) : new Intl.DateTimeFormat('en-US', {\n      hourCycle: 'h23',\n      timeZone: timeZone,\n      year: 'numeric',\n      month: 'numeric',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  }\n\n  return dtfCache[timeZone];\n}\n\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,cAAlB;AAEA;AACA;AACA;AACA;;AACA,SAASA,cAAT,CAAwBC,IAAxB,EAA8BC,QAA9B,EAAwC;EACtC,IAAIC,GAAG,GAAGC,iBAAiB,CAACF,QAAD,CAA3B;EACA,OAAOC,GAAG,CAACE,aAAJ,GAAoBC,WAAW,CAACH,GAAD,EAAMF,IAAN,CAA/B,GAA6CM,WAAW,CAACJ,GAAD,EAAMF,IAAN,CAA/D;AACD;;AAED,IAAIO,SAAS,GAAG;EACdC,IAAI,EAAE,CADQ;EAEdC,KAAK,EAAE,CAFO;EAGdC,GAAG,EAAE,CAHS;EAIdC,IAAI,EAAE,CAJQ;EAKdC,MAAM,EAAE,CALM;EAMdC,MAAM,EAAE;AANM,CAAhB;;AASA,SAASR,WAAT,CAAqBH,GAArB,EAA0BF,IAA1B,EAAgC;EAC9B,IAAI;IACF,IAAIc,SAAS,GAAGZ,GAAG,CAACE,aAAJ,CAAkBJ,IAAlB,CAAhB;IACA,IAAIe,MAAM,GAAG,EAAb;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;MACzC,IAAIE,GAAG,GAAGX,SAAS,CAACO,SAAS,CAACE,CAAD,CAAT,CAAaG,IAAd,CAAnB;;MAEA,IAAID,GAAG,IAAI,CAAX,EAAc;QACZH,MAAM,CAACG,GAAD,CAAN,GAAcE,QAAQ,CAACN,SAAS,CAACE,CAAD,CAAT,CAAanB,KAAd,EAAqB,EAArB,CAAtB;MACD;IACF;;IAED,OAAOkB,MAAP;EACD,CAbD,CAaE,OAAOM,KAAP,EAAc;IACd,IAAIA,KAAK,YAAYC,UAArB,EAAiC;MAC/B,OAAO,CAACC,GAAD,CAAP;IACD;;IAED,MAAMF,KAAN;EACD;AACF;;AAED,SAASf,WAAT,CAAqBJ,GAArB,EAA0BF,IAA1B,EAAgC;EAC9B,IAAIc,SAAS,GAAGZ,GAAG,CAACsB,MAAJ,CAAWxB,IAAX,EAAiByB,OAAjB,CAAyB,SAAzB,EAAoC,EAApC,CAAhB;EACA,IAAIC,MAAM,GAAG,0CAA0CC,IAA1C,CAA+Cb,SAA/C,CAAb,CAF8B,CAE0C;EACxE;;EAEA,OAAO,CAACY,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,EAAuBA,MAAM,CAAC,CAAD,CAA7B,EAAkCA,MAAM,CAAC,CAAD,CAAxC,EAA6CA,MAAM,CAAC,CAAD,CAAnD,EAAwDA,MAAM,CAAC,CAAD,CAA9D,CAAP;AACD,C,CAAC;AACF;AACA;;;AAGA,IAAIE,QAAQ,GAAG,EAAf;;AAEA,SAASzB,iBAAT,CAA2BF,QAA3B,EAAqC;EACnC,IAAI,CAAC2B,QAAQ,CAAC3B,QAAD,CAAb,EAAyB;IACvB;IACA,IAAI4B,iBAAiB,GAAG,IAAIC,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiC;MACvDC,MAAM,EAAE,KAD+C;MAEvD/B,QAAQ,EAAE,kBAF6C;MAGvDO,IAAI,EAAE,SAHiD;MAIvDC,KAAK,EAAE,SAJgD;MAKvDC,GAAG,EAAE,SALkD;MAMvDC,IAAI,EAAE,SANiD;MAOvDC,MAAM,EAAE,SAP+C;MAQvDC,MAAM,EAAE;IAR+C,CAAjC,EASrBW,MATqB,CASd,IAAIS,IAAJ,CAAS,0BAAT,CATc,CAAxB;IAUA,IAAIC,kBAAkB,GAAGL,iBAAiB,KAAK,sBAAtB,IAAgDA,iBAAiB,KAAK,gCAA/F;IACAD,QAAQ,CAAC3B,QAAD,CAAR,GAAqBiC,kBAAkB,GAAG,IAAIJ,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiC;MACzEC,MAAM,EAAE,KADiE;MAEzE/B,QAAQ,EAAEA,QAF+D;MAGzEO,IAAI,EAAE,SAHmE;MAIzEC,KAAK,EAAE,SAJkE;MAKzEC,GAAG,EAAE,SALoE;MAMzEC,IAAI,EAAE,SANmE;MAOzEC,MAAM,EAAE,SAPiE;MAQzEC,MAAM,EAAE;IARiE,CAAjC,CAAH,GASlC,IAAIiB,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiC;MACpCI,SAAS,EAAE,KADyB;MAEpClC,QAAQ,EAAEA,QAF0B;MAGpCO,IAAI,EAAE,SAH8B;MAIpCC,KAAK,EAAE,SAJ6B;MAKpCC,GAAG,EAAE,SAL+B;MAMpCC,IAAI,EAAE,SAN8B;MAOpCC,MAAM,EAAE,SAP4B;MAQpCC,MAAM,EAAE;IAR4B,CAAjC,CATL;EAmBD;;EAED,OAAOe,QAAQ,CAAC3B,QAAD,CAAf;AACD;;AAEDmC,MAAM,CAACxC,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}