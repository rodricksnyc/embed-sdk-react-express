{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport pickBy from 'lodash/pickBy';\nimport identity from 'lodash/identity';\nimport { generateBlendColors } from './generateBlendColors';\nimport { generateDerivativeColors } from './generateDerivativeColors';\nimport { generateStatefulColors } from './generateStatefulColors';\nexport const generateColors = (themeColors, customColors) => {\n  const specifiable = _objectSpread(_objectSpread({}, themeColors), pickBy(customColors, identity));\n\n  if (customColors && customColors.text) {\n    if (!customColors.body) {\n      specifiable.body = undefined;\n    }\n\n    if (!customColors.title) {\n      specifiable.title = undefined;\n    }\n  }\n\n  const blends = generateBlendColors(specifiable);\n  const derivatives = generateDerivativeColors(specifiable, blends);\n  const statefulColors = generateStatefulColors(specifiable, derivatives);\n  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, specifiable), derivatives), blends), statefulColors);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,OAAOA,MAAP,MAAmB,eAAnB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAEA,OAAO,MAAMC,cAAc,GAAG,CAC5BC,WAD4B,EAE5BC,YAF4B,KAGjB;EACX,MAAMC,WAAW,mCAAQF,WAAR,GAAwBN,MAAM,CAACO,YAAD,EAAeN,QAAf,CAA9B,CAAjB;;EASA,IAAIM,YAAY,IAAIA,YAAY,CAACE,IAAjC,EAAuC;IACrC,IAAI,CAACF,YAAY,CAACG,IAAlB,EAAwB;MACtBF,WAAW,CAACE,IAAZF,GAAmBG,SAAnBH;IACF;;IACA,IAAI,CAACD,YAAY,CAACK,KAAlB,EAAyB;MACvBJ,WAAW,CAACI,KAAZJ,GAAoBG,SAApBH;IACF;EACF;;EAEA,MAAMK,MAAM,GAAGX,mBAAmB,CAACM,WAAD,CAAlC;EACA,MAAMM,WAAW,GAAGX,wBAAwB,CAACK,WAAD,EAAcK,MAAd,CAA5C;EACA,MAAME,cAAc,GAAGX,sBAAsB,CAACI,WAAD,EAAcM,WAAd,CAA7C;EAEA,mEACKN,WADL,GAEKM,WAFL,GAGKD,MAHL,GAIKE,cAJL;AAMD,CAhCM","names":["pickBy","identity","generateBlendColors","generateDerivativeColors","generateStatefulColors","generateColors","themeColors","customColors","specifiable","text","body","undefined","title","blends","derivatives","statefulColors"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/design-tokens/src/color/utils/generateColors.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport pickBy from 'lodash/pickBy'\nimport identity from 'lodash/identity'\nimport type { Colors, SpecifiableColors } from '../types'\nimport { generateBlendColors } from './generateBlendColors'\nimport { generateDerivativeColors } from './generateDerivativeColors'\nimport { generateStatefulColors } from './generateStatefulColors'\n\nexport const generateColors = (\n  themeColors: SpecifiableColors,\n  customColors?: Partial<SpecifiableColors>\n): Colors => {\n  const specifiable = { ...themeColors, ...pickBy(customColors, identity) }\n\n  /**\n   * If a theme customization only specifies a `text` color the `body` and\n   * `title` colors of the previous theme will be passed through.\n   *\n   * Instead, it should inferred that the new `text` color should be applied\n   * to the `body` & `title` slots unless those have been explicitly specified.\n   */\n  if (customColors && customColors.text) {\n    if (!customColors.body) {\n      specifiable.body = undefined\n    }\n    if (!customColors.title) {\n      specifiable.title = undefined\n    }\n  }\n\n  const blends = generateBlendColors(specifiable)\n  const derivatives = generateDerivativeColors(specifiable, blends)\n  const statefulColors = generateStatefulColors(specifiable, derivatives)\n\n  return {\n    ...specifiable,\n    ...derivatives,\n    ...blends,\n    ...statefulColors,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}