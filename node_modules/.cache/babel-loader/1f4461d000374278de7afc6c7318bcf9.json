{"ast":null,"code":"import React, { useCallback, useContext } from 'react';\nimport { Span } from '../../../Text';\nimport { measureElement } from '../../../utils';\nimport { InputTextContext } from './InputTextContext';\nimport { InputTextContent } from './InputTextContent';\n\nconst Measure = _ref => {\n  let {\n    children\n  } = _ref;\n  const {\n    setBeforeWidth\n  } = useContext(InputTextContext);\n  const ref = useCallback(element => {\n    const {\n      width\n    } = measureElement(element);\n    setBeforeWidth(width);\n  }, [setBeforeWidth]);\n  return React.createElement(\"span\", {\n    ref: ref\n  }, children);\n};\n\nexport const Before = _ref2 => {\n  let {\n    iconBefore,\n    before\n  } = _ref2;\n  const iconBeforeWrapped = iconBefore && React.createElement(InputTextContent, {\n    pl: \"u2\"\n  }, iconBefore);\n  const beforeStringWrapped = typeof before === 'string' && React.createElement(Measure, null, React.createElement(InputTextContent, {\n    pl: \"u2\"\n  }, React.createElement(Span, {\n    fontSize: \"small\"\n  }, before)));\n  const beforeWrapped = before && typeof before !== 'string' && React.createElement(Measure, null, before);\n  return iconBeforeWrapped || beforeStringWrapped || beforeWrapped || null;\n};","map":{"version":3,"mappings":"AAKA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,UAA7B,QAA+C,OAA/C;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;;AAEA,MAAMC,OAAO,GAAG,QAAoD;EAAA,IAAnD;IAAEC;EAAF,CAAmD;EAClE,MAAM;IAAEC;EAAF,IAAqBP,UAAU,CAACG,gBAAD,CAArC;EACA,MAAMK,GAAG,GAAGT,WAAW,CACpBU,OAA2B,IAAK;IAC/B,MAAM;MAAEC;IAAF,IAAYR,cAAc,CAACO,OAAD,CAAhC;IACAF,cAAc,CAACG,KAAD,CAAdH;EACD,CAJoB,EAKrB,CAACA,cAAD,CALqB,CAAvB;EAOA,OAAOT;IAAMU,GAAG,EAAEA;EAAX,GAAiBF,QAAjB,CAAP;AACD,CAVD;;AAYA,OAAO,MAAMK,MAAM,GAAG,SAG+B;EAAA,IAH9B;IACrBC,UADqB;IAErBC;EAFqB,CAG8B;EACnD,MAAMC,iBAAiB,GAAGF,UAAU,IAClCd,oBAACM,gBAAD,EAAiB;IAACW,EAAE,EAAC;EAAJ,CAAjB,EAA2BH,UAA3B,CADF;EAGA,MAAMI,mBAAmB,GAAG,OAAOH,MAAP,KAAkB,QAAlB,IAC1Bf,oBAACO,OAAD,EAAQ,IAAR,EACEP,oBAACM,gBAAD,EAAiB;IAACW,EAAE,EAAC;EAAJ,CAAjB,EACEjB,oBAACG,IAAD,EAAK;IAACgB,QAAQ,EAAC;EAAV,CAAL,EAAwBJ,MAAxB,CADF,CADF,CADF;EAOA,MAAMK,aAAa,GAAGL,MAAM,IAAI,OAAOA,MAAP,KAAkB,QAA5BA,IACpBf,oBAACO,OAAD,EAAQ,IAAR,EAAUQ,MAAV,CADF;EAIA,OAAOC,iBAAiB,IAAIE,mBAArBF,IAA4CI,aAA5CJ,IAA6D,IAApE;AACD,CAnBM","names":["React","useCallback","useContext","Span","measureElement","InputTextContext","InputTextContent","Measure","children","setBeforeWidth","ref","element","width","Before","iconBefore","before","iconBeforeWrapped","pl","beforeStringWrapped","fontSize","beforeWrapped"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Inputs/InputText/Before.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React, { useCallback, useContext } from 'react'\nimport { Span } from '../../../Text'\nimport { measureElement } from '../../../utils'\nimport { InputTextContext } from './InputTextContext'\nimport type { InputTextProps } from './types'\nimport { InputTextContent } from './InputTextContent'\n\nconst Measure = ({ children }: React.PropsWithChildren<unknown>) => {\n  const { setBeforeWidth } = useContext(InputTextContext)\n  const ref = useCallback(\n    (element: HTMLElement | null) => {\n      const { width } = measureElement(element)\n      setBeforeWidth(width)\n    },\n    [setBeforeWidth]\n  )\n  return <span ref={ref}>{children}</span>\n}\n\nexport const Before = ({\n  iconBefore,\n  before,\n}: Pick<InputTextProps, 'before' | 'iconBefore'>) => {\n  const iconBeforeWrapped = iconBefore && (\n    <InputTextContent pl=\"u2\">{iconBefore}</InputTextContent>\n  )\n  const beforeStringWrapped = typeof before === 'string' && (\n    <Measure>\n      <InputTextContent pl=\"u2\">\n        <Span fontSize=\"small\">{before}</Span>\n      </InputTextContent>\n    </Measure>\n  )\n  const beforeWrapped = before && typeof before !== 'string' && (\n    <Measure>{before}</Measure>\n  )\n\n  return iconBeforeWrapped || beforeStringWrapped || beforeWrapped || null\n}\n"]},"metadata":{},"sourceType":"module"}