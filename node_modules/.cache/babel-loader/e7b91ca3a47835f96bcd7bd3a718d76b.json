{"ast":null,"code":"\"use strict\";\n/*\n\n MIT License\n\n Copyright (c) 2019 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EmbedBuilder = void 0;\n\nvar embed_1 = require(\"./embed\");\n\nfunction stringify(params) {\n  var result = [];\n\n  for (var key in params) {\n    result.push(\"\".concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(params[key])));\n  }\n\n  return result.join('&');\n}\n\nfunction escapeFilterParam(param) {\n  return param.replace(/,/g, '^,');\n}\n/**\n * The builder class for [[EmbedClient]]. Contains methods for defining the properties of embedded\n * Looker content.\n */\n\n\nvar EmbedBuilder =\n/** @class */\nfunction () {\n  /**\n   * @hidden\n   */\n  function EmbedBuilder(_hostSettings, _type, _endpoint, _clientConstructor) {\n    this._hostSettings = _hostSettings;\n    this._type = _type;\n    this._endpoint = _endpoint;\n    this._clientConstructor = _clientConstructor;\n    this._handlers = {};\n    this._appendTo = null;\n    this._sandboxAttrs = [];\n    this._classNames = [];\n    this._frameBorder = '0';\n    this._suffix = '';\n\n    if (this.sandboxedHost) {\n      this._params = {\n        embed_domain: this._hostSettings.apiHost,\n        sandboxed_host: 'true',\n        sdk: '2'\n      };\n    } else {\n      var embedDomain = window.location.origin;\n      this._params = {\n        embed_domain: embedDomain,\n        sdk: '2'\n      };\n    }\n  }\n  /**\n   * Value for the `frame-border` attribute of an embedded iframe\n   */\n\n\n  EmbedBuilder.prototype.withFrameBorder = function (attr) {\n    this._frameBorder = attr;\n    return this;\n  };\n  /**\n   * @hidden\n   *\n   * @param id\n   */\n\n\n  EmbedBuilder.prototype.withId = function (id) {\n    this._id = id;\n    return this;\n  };\n  /**\n   * Allows manual control of URL parameters for the embedded content\n   *\n   * @param params Additional URL parameters\n   * created by ID.\n   */\n\n\n  EmbedBuilder.prototype.withParams = function (params) {\n    for (var key in params) {\n      this._params[key] = params[key];\n    }\n\n    return this;\n  };\n  /**\n   * Allows specifying initial filters to apply to the embedded content.\n   *\n   * @filters Filters to apply\n   */\n\n\n  EmbedBuilder.prototype.withFilters = function (filters, escape) {\n    if (escape === void 0) {\n      escape = false;\n    }\n\n    if (this.type === 'dashboard') {\n      for (var key in filters) {\n        this._params[key] = escape ? escapeFilterParam(filters[key]) : filters[key];\n      }\n    } else {\n      for (var key in filters) {\n        this._params[\"f[\".concat(key, \"]\")] = escape ? escapeFilterParam(filters[key]) : filters[key];\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Allows specifying sandbox attributes for an embedded content iframe. Sandbox attributes\n   * should include `allow-scripts` or embedded content will not execute.\n   * @param attr one or more sandbox attributes for an embedded content iframe.\n   */\n\n\n  EmbedBuilder.prototype.withSandboxAttr = function () {\n    var attr = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      attr[_i] = arguments[_i];\n    }\n\n    this._sandboxAttrs = this._sandboxAttrs.concat(attr);\n    return this;\n  };\n  /**\n   * Allows specifying classes for an embedded content\n   * @param className one or more sandbox attributes for an embedded content.\n   */\n\n\n  EmbedBuilder.prototype.withClassName = function () {\n    var className = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      className[_i] = arguments[_i];\n    }\n\n    this._classNames = this._classNames.concat(className);\n    return this;\n  };\n  /**\n   * Allows specifying next generation content\n   *\n   * @param suffix Next generation suffix. Defaults to '-next'.\n   */\n\n\n  EmbedBuilder.prototype.withNext = function (suffix) {\n    if (suffix === void 0) {\n      suffix = '-next';\n    }\n\n    this._suffix = suffix;\n    this._endpoint += this._suffix;\n    return this;\n  };\n  /**\n   * Allows specifying a theme for the content.\n   *\n   * @param theme Theme name\n   */\n\n\n  EmbedBuilder.prototype.withTheme = function (theme) {\n    this._params.theme = theme;\n    return this;\n  };\n  /**\n   * Allows api host to be specified\n   *\n   * @param apiHost\n   */\n\n\n  EmbedBuilder.prototype.withApiHost = function (apiHost) {\n    if (!this._hostSettings.apiHost) {\n      this._hostSettings.apiHost = apiHost;\n\n      if (this.sandboxedHost) {\n        this._params.embed_domain = apiHost;\n        this._params.sandboxed_host = 'true';\n      }\n    } else if (this._hostSettings.apiHost !== apiHost) {\n      throw new Error('not allowed to change api host');\n    }\n\n    return this;\n  };\n  /**\n   * Allows auth url to be specified\n   *\n   * @param authUrl URL to endpoint that can sign Looker SSO URLs\n   */\n\n\n  EmbedBuilder.prototype.withAuthUrl = function (authUrl) {\n    var _a;\n\n    if (!((_a = this._hostSettings.auth) === null || _a === void 0 ? void 0 : _a.url)) {\n      this._hostSettings.auth = {\n        url: authUrl\n      };\n    } else if (this._hostSettings.auth.url !== authUrl) {\n      throw new Error('not allowed to change auth url');\n    }\n\n    return this;\n  };\n  /**\n   * Allows auth url to be specified\n   *\n   * @param auth\n   */\n\n\n  EmbedBuilder.prototype.withAuth = function (auth) {\n    if (!this._hostSettings.auth) {\n      this._hostSettings.auth = auth;\n    } else if (this._hostSettings.auth !== auth) {\n      throw new Error('not allowed to change auth');\n    }\n\n    return this;\n  };\n  /**\n   * @hidden\n   *\n   * @param url\n   */\n\n\n  EmbedBuilder.prototype.withUrl = function (url) {\n    if (this.isCookielessEmbed) {\n      throw new Error('withUrl not supported by cookieless embed');\n    }\n\n    this._url = url;\n    return this;\n  };\n\n  Object.defineProperty(EmbedBuilder.prototype, \"sandboxedHost\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      if (this._sandboxedHost === undefined) {\n        var embedHostDomain = window.location.origin;\n        this._sandboxedHost = embedHostDomain === 'null' || !embedHostDomain;\n      }\n\n      return this._sandboxedHost;\n    },\n\n    /**\n     * @hidden\n     */\n    set: function (sandboxedHost) {\n      this._sandboxedHost = sandboxedHost;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"el\", {\n    /**\n     * The element to append the embedded content to.\n     */\n    get: function () {\n      return this._appendTo || document.body;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"frameBorder\", {\n    /**\n     * the frame-border attribute to apply to the iframe\n     */\n    get: function () {\n      return this._frameBorder;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"endpoint\", {\n    /**\n     * The endpoint used to load content\n     */\n    get: function () {\n      return this._endpoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"type\", {\n    /**\n     * The type of embedded content, dashboard, look, and explore\n     */\n    get: function () {\n      return this._type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"apiHost\", {\n    /**\n     * The address of the Looker instance being used\n     */\n    get: function () {\n      return this._hostSettings.apiHost;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"isCookielessEmbed\", {\n    /**\n     * Is cookieless embedding being used\n     */\n    get: function () {\n      return !!this._hostSettings.acquireSession;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"acquireSession\", {\n    /**\n     * Cookieless embed acquire session\n     */\n    get: function () {\n      return this._hostSettings.acquireSession;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"generateTokens\", {\n    /**\n     * Cookieless embed generate tokens\n     */\n    get: function () {\n      return this._hostSettings.generateTokens;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"url\", {\n    /**\n     * The content URL of this embedded content, if provided\n     */\n    get: function () {\n      return this._url;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"authUrl\", {\n    /**\n     * The auth URL of this embedded content, if provided\n     * @deprecated\n     */\n    get: function () {\n      var _a;\n\n      return (_a = this._hostSettings.auth) === null || _a === void 0 ? void 0 : _a.url;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"auth\", {\n    /**\n     * The auth config of this embedded content, if provided\n     */\n    get: function () {\n      return this._hostSettings.auth;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"embedUrl\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      var params = stringify(this._params);\n      return \"\".concat(this.endpoint, \"/\").concat(this.id, \"?\").concat(params);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"handlers\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this._handlers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"sandboxAttrs\", {\n    /**\n     * The sandbox attributes of an embedded content iframe, if provided\n     */\n    get: function () {\n      return this._sandboxAttrs;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"classNames\", {\n    /**\n     * The classnames to apply to the embedded content\n     */\n    get: function () {\n      return this._classNames;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"suffix\", {\n    /**\n     * The the suffix to append to the content type portion of the url\n     */\n    get: function () {\n      return this._suffix;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"id\", {\n    /**\n     * The ID of this embedded content, if provided\n     */\n    get: function () {\n      return this._id;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EmbedBuilder.prototype, \"clientConstructor\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this._clientConstructor;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Select an element to append the embedded content to, either a content selector or\n   * the DOM element.\n   *\n   * @param el\n   */\n\n  EmbedBuilder.prototype.appendTo = function (el) {\n    if (typeof el === 'string') {\n      this._appendTo = document.querySelector(el);\n    } else {\n      this._appendTo = el;\n    }\n\n    return this;\n  };\n  /**\n   * Register an event handler.\n   *\n   * @typeparam K: A Looker embed event name\n   * @param name: string Name of the event to respond to.\n   * @param handler: Callback A callback method to be invoked when the message is received.\n   */\n\n\n  EmbedBuilder.prototype.on = function (name, handler) {\n    this._handlers[name] = this._handlers[name] ? this._handlers[name] : [];\n\n    this._handlers[name].push(handler);\n\n    return this;\n  };\n  /**\n   * Constructs the embedded content, including creating the DOM element that contains the content.\n   */\n\n\n  EmbedBuilder.prototype.build = function () {\n    return new embed_1.EmbedClient(this);\n  };\n\n  return EmbedBuilder;\n}();\n\nexports.EmbedBuilder = EmbedBuilder;","map":{"version":3,"mappings":"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","names":["stringify","params","result","key","push","encodeURIComponent","concat","join","escapeFilterParam","param","replace","_hostSettings","_type","_endpoint","_clientConstructor","sandboxedHost","_params","embed_domain","apiHost","sandboxed_host","sdk","embedDomain","window","location","origin","EmbedBuilder","attr","_frameBorder","id","_id","filters","escape","type","_sandboxAttrs","className","_classNames","suffix","_suffix","theme","Error","authUrl","auth","_a","url","isCookielessEmbed","_url","Object","_sandboxedHost","undefined","embedHostDomain","_appendTo","document","body","acquireSession","generateTokens","endpoint","_handlers","el","querySelector","name","handler","embed_1","exports"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/embed-sdk/src/embed_builder.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2019 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { ChattyHostConnection, CallbackStore } from '@looker/chatty'\nimport { EmbedClient } from './embed'\nimport type {\n  LookerAuthConfig,\n  LookerEmbedEventMap,\n  LookerEmbedFilterParams,\n  CookielessCallback,\n  CookielessRequestInit,\n} from './types'\n\ntype EmbedClientConstructor<T> = { new (host: ChattyHostConnection): T }\n\ninterface LookerEmbedHostSettings {\n  apiHost: string\n  auth?: LookerAuthConfig\n  acquireSession?: CookielessCallback | string | CookielessRequestInit\n  generateTokens?: CookielessCallback | string | CookielessRequestInit\n}\n\nexport interface UrlParams {\n  [key: string]: string\n}\n\nfunction stringify(params: { [key: string]: string }) {\n  const result = []\n  for (const key in params) {\n    result.push(`${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n  }\n  return result.join('&')\n}\n\nfunction escapeFilterParam(param: string) {\n  return param.replace(/,/g, '^,')\n}\n\n/**\n * The builder class for [[EmbedClient]]. Contains methods for defining the properties of embedded\n * Looker content.\n */\n\nexport class EmbedBuilder<T> {\n  private _handlers: CallbackStore = {}\n  private _appendTo: HTMLElement | null = null\n  private _sandboxAttrs: string[] = []\n  private _classNames: string[] = []\n  private _frameBorder: string = '0'\n  private _id?: number | string\n  private _params: UrlParams\n  private _suffix: string = ''\n  private _url?: string | null\n  private _sandboxedHost?: boolean\n\n  /**\n   * @hidden\n   */\n\n  constructor(\n    private _hostSettings: LookerEmbedHostSettings,\n    private _type: string,\n    private _endpoint: string,\n    private _clientConstructor: EmbedClientConstructor<T>\n  ) {\n    if (this.sandboxedHost) {\n      this._params = {\n        embed_domain: this._hostSettings.apiHost,\n        sandboxed_host: 'true',\n        sdk: '2',\n      }\n    } else {\n      const embedDomain = window.location.origin\n      this._params = {\n        embed_domain: embedDomain,\n        sdk: '2',\n      }\n    }\n  }\n\n  /**\n   * Value for the `frame-border` attribute of an embedded iframe\n   */\n\n  withFrameBorder(attr: string) {\n    this._frameBorder = attr\n    return this\n  }\n\n  /**\n   * @hidden\n   *\n   * @param id\n   */\n\n  withId(id: number | string) {\n    this._id = id\n    return this\n  }\n\n  /**\n   * Allows manual control of URL parameters for the embedded content\n   *\n   * @param params Additional URL parameters\n   * created by ID.\n   */\n\n  withParams(params: UrlParams) {\n    for (const key in params) {\n      this._params[key] = params[key]\n    }\n    return this\n  }\n\n  /**\n   * Allows specifying initial filters to apply to the embedded content.\n   *\n   * @filters Filters to apply\n   */\n\n  withFilters(filters: LookerEmbedFilterParams, escape = false) {\n    if (this.type === 'dashboard') {\n      for (const key in filters) {\n        this._params[key] = escape\n          ? escapeFilterParam(filters[key])\n          : filters[key]\n      }\n    } else {\n      for (const key in filters) {\n        this._params[`f[${key}]`] = escape\n          ? escapeFilterParam(filters[key])\n          : filters[key]\n      }\n    }\n    return this\n  }\n\n  /**\n   * Allows specifying sandbox attributes for an embedded content iframe. Sandbox attributes\n   * should include `allow-scripts` or embedded content will not execute.\n   * @param attr one or more sandbox attributes for an embedded content iframe.\n   */\n\n  withSandboxAttr(...attr: string[]) {\n    this._sandboxAttrs = this._sandboxAttrs.concat(attr)\n    return this\n  }\n\n  /**\n   * Allows specifying classes for an embedded content\n   * @param className one or more sandbox attributes for an embedded content.\n   */\n\n  withClassName(...className: string[]) {\n    this._classNames = this._classNames.concat(className)\n    return this\n  }\n\n  /**\n   * Allows specifying next generation content\n   *\n   * @param suffix Next generation suffix. Defaults to '-next'.\n   */\n\n  withNext(suffix = '-next') {\n    this._suffix = suffix\n    this._endpoint += this._suffix\n    return this\n  }\n\n  /**\n   * Allows specifying a theme for the content.\n   *\n   * @param theme Theme name\n   */\n\n  withTheme(theme: string) {\n    this._params.theme = theme\n    return this\n  }\n\n  /**\n   * Allows api host to be specified\n   *\n   * @param apiHost\n   */\n\n  withApiHost(apiHost: string) {\n    if (!this._hostSettings.apiHost) {\n      this._hostSettings.apiHost = apiHost\n      if (this.sandboxedHost) {\n        this._params.embed_domain = apiHost\n        this._params.sandboxed_host = 'true'\n      }\n    } else if (this._hostSettings.apiHost !== apiHost) {\n      throw new Error('not allowed to change api host')\n    }\n    return this\n  }\n\n  /**\n   * Allows auth url to be specified\n   *\n   * @param authUrl URL to endpoint that can sign Looker SSO URLs\n   */\n\n  withAuthUrl(authUrl: string) {\n    if (!this._hostSettings.auth?.url) {\n      this._hostSettings.auth = { url: authUrl }\n    } else if (this._hostSettings.auth.url !== authUrl) {\n      throw new Error('not allowed to change auth url')\n    }\n    return this\n  }\n\n  /**\n   * Allows auth url to be specified\n   *\n   * @param auth\n   */\n\n  withAuth(auth: LookerAuthConfig) {\n    if (!this._hostSettings.auth) {\n      this._hostSettings.auth = auth\n    } else if (this._hostSettings.auth !== auth) {\n      throw new Error('not allowed to change auth')\n    }\n    return this\n  }\n\n  /**\n   * @hidden\n   *\n   * @param url\n   */\n\n  withUrl(url: string) {\n    if (this.isCookielessEmbed) {\n      throw new Error('withUrl not supported by cookieless embed')\n    }\n    this._url = url\n    return this\n  }\n\n  /**\n   * @hidden\n   */\n\n  set sandboxedHost(sandboxedHost: boolean) {\n    this._sandboxedHost = sandboxedHost\n  }\n\n  /**\n   * @hidden\n   */\n\n  get sandboxedHost() {\n    if (this._sandboxedHost === undefined) {\n      const embedHostDomain = window.location.origin\n      this._sandboxedHost = embedHostDomain === 'null' || !embedHostDomain\n    }\n    return this._sandboxedHost\n  }\n\n  /**\n   * The element to append the embedded content to.\n   */\n\n  get el() {\n    return this._appendTo || document.body\n  }\n\n  /**\n   * the frame-border attribute to apply to the iframe\n   */\n\n  get frameBorder() {\n    return this._frameBorder\n  }\n\n  /**\n   * The endpoint used to load content\n   */\n\n  get endpoint() {\n    return this._endpoint\n  }\n\n  /**\n   * The type of embedded content, dashboard, look, and explore\n   */\n\n  get type() {\n    return this._type\n  }\n\n  /**\n   * The address of the Looker instance being used\n   */\n\n  get apiHost() {\n    return this._hostSettings.apiHost\n  }\n\n  /**\n   * Is cookieless embedding being used\n   */\n\n  get isCookielessEmbed() {\n    return !!this._hostSettings.acquireSession\n  }\n\n  /**\n   * Cookieless embed acquire session\n   */\n  get acquireSession() {\n    return this._hostSettings.acquireSession\n  }\n\n  /**\n   * Cookieless embed generate tokens\n   */\n  get generateTokens() {\n    return this._hostSettings.generateTokens\n  }\n\n  /**\n   * The content URL of this embedded content, if provided\n   */\n\n  get url() {\n    return this._url\n  }\n\n  /**\n   * The auth URL of this embedded content, if provided\n   * @deprecated\n   */\n\n  get authUrl() {\n    return this._hostSettings.auth?.url\n  }\n\n  /**\n   * The auth config of this embedded content, if provided\n   */\n\n  get auth() {\n    return this._hostSettings.auth\n  }\n\n  /**\n   * @hidden\n   */\n\n  get embedUrl() {\n    const params = stringify(this._params)\n    return `${this.endpoint}/${this.id}?${params}`\n  }\n\n  /**\n   * @hidden\n   */\n\n  get handlers() {\n    return this._handlers\n  }\n\n  /**\n   * The sandbox attributes of an embedded content iframe, if provided\n   */\n\n  get sandboxAttrs() {\n    return this._sandboxAttrs\n  }\n\n  /**\n   * The classnames to apply to the embedded content\n   */\n\n  get classNames() {\n    return this._classNames\n  }\n\n  /**\n   * The the suffix to append to the content type portion of the url\n   */\n\n  get suffix() {\n    return this._suffix\n  }\n\n  /**\n   * The ID of this embedded content, if provided\n   */\n\n  get id() {\n    return this._id\n  }\n\n  /**\n   * @hidden\n   */\n\n  get clientConstructor() {\n    return this._clientConstructor\n  }\n\n  /**\n   * Select an element to append the embedded content to, either a content selector or\n   * the DOM element.\n   *\n   * @param el\n   */\n\n  appendTo(el: HTMLElement | string) {\n    if (typeof el === 'string') {\n      this._appendTo = document.querySelector(el)\n    } else {\n      this._appendTo = el\n    }\n    return this\n  }\n\n  /**\n   * Register an event handler.\n   *\n   * @typeparam K: A Looker embed event name\n   * @param name: string Name of the event to respond to.\n   * @param handler: Callback A callback method to be invoked when the message is received.\n   */\n\n  on<K extends keyof LookerEmbedEventMap>(\n    name: K,\n    handler: LookerEmbedEventMap[K]\n  ) {\n    this._handlers[name] = this._handlers[name] ? this._handlers[name] : []\n    this._handlers[name].push(handler)\n    return this\n  }\n\n  /**\n   * Constructs the embedded content, including creating the DOM element that contains the content.\n   */\n\n  build(): EmbedClient<T> {\n    return new EmbedClient<T>(this)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}