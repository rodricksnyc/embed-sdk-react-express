{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n\nlet _ = t => t,\n    _t;\n\nimport React, { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { FloatingLabelField } from '../Field/FloatingLabelField';\nimport { omitFieldProps, pickFieldProps } from '../Field/Field';\nimport { useFormContext } from '../../Form';\nimport { useID } from '../../../utils';\nimport { InputDateRange } from '../../Inputs/InputDateRange';\n\nconst checkValueOnBlur = e => {\n  const inputs = Array.from(e.currentTarget.querySelectorAll('input'));\n  return inputs.some(input => input.value !== '');\n};\n\nexport const FieldDateRange = styled(forwardRef((props, ref) => {\n  const validationMessage = useFormContext(props);\n  const id = useID(props.id);\n  return React.createElement(FloatingLabelField, _extends({}, pickFieldProps(props), {\n    checkValueOnBlur: checkValueOnBlur,\n    hasValue: !!props.value,\n    id: id,\n    validationMessage: validationMessage\n  }), React.createElement(InputDateRange, _extends({}, omitFieldProps(props), {\n    \"aria-describedby\": `describedby-${id}`,\n    \"aria-labelledby\": `labelledby-${id}`,\n    id: id,\n    onChange: props.onChange,\n    value: props.value,\n    validationType: validationMessage && validationMessage.type,\n    ref: ref\n  })));\n})).withConfig({\n  displayName: \"FieldDateRange\",\n  componentId: \"sc-xojxrj-0\"\n})(_t || (_t = _``));","map":{"version":3,"mappings":";;;;;AAMA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,gBAA/C;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,SAASC,cAAT,QAA+B,6BAA/B;;AAUA,MAAMC,gBAAgB,GAAIC,CAAa,IAAK;EAC1C,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAND,CAAWF,CAAC,CAACI,aAAFJ,CAAgBK,gBAAhBL,CAAiC,OAAjCA,CAAXE,CAAf;EAEA,OAAOD,MAAM,CAACK,IAAPL,CAAYM,KAAK,IAAIA,KAAK,CAACC,KAAND,KAAgB,EAArCN,CAAP;AACD,CAJD;;AAMA,OAAO,MAAMQ,cAAc,GAAGjB,MAAM,CAClCD,UAAU,CAAC,CAACmB,KAAD,EAAkCC,GAAlC,KAAiE;EAC1E,MAAMC,iBAAiB,GAAGhB,cAAc,CAACc,KAAD,CAAxC;EACA,MAAMG,EAAE,GAAGhB,KAAK,CAACa,KAAK,CAACG,EAAP,CAAhB;EAEA,OACEvB,oBAACG,kBAAD,EAAmBqB,aACbnB,cAAc,CAACe,KAAD,CADD,EACQ;IACzBX,gBAAgB,EAAEA,gBADO;IAEzBgB,QAAQ,EAAE,CAAC,CAACL,KAAK,CAACF,KAFO;IAGzBK,EAAE,EAAEA,EAHqB;IAIzBD,iBAAiB,EAAEA;EAJM,CADR,CAAnB,EAOEtB,oBAACQ,cAAD,EAAegB,aACTpB,cAAc,CAACgB,KAAD,CADL,EACY;IACzB,oBAAmB,eAAcG,EAAG,EADX;IAEzB,mBAAkB,cAAaA,EAAG,EAFT;IAGzBA,EAAE,EAAEA,EAHqB;IAIzBG,QAAQ,EAAEN,KAAK,CAACM,QAJS;IAKzBR,KAAK,EAAEE,KAAK,CAACF,KALY;IAMzBS,cAAc,EAAEL,iBAAiB,IAAIA,iBAAiB,CAACM,IAN9B;IAOzBP,GAAG,EAAEA;EAPoB,CADZ,CAAf,CAPF,CADF;AAoBD,CAxBS,CADwB,CAANnB,CA0B7B2B,UA1B6B3B,CA0B7B;EAAA4B;EAAAC;AAAA,CA1B6B7B,EA0B7B8B,aAAC,EAAD,CA1B6B9B,CAAvB","names":["React","forwardRef","styled","FloatingLabelField","omitFieldProps","pickFieldProps","useFormContext","useID","InputDateRange","checkValueOnBlur","e","inputs","Array","from","currentTarget","querySelectorAll","some","input","value","FieldDateRange","props","ref","validationMessage","id","_extends","hasValue","onChange","validationType","type","withConfig","displayName","componentId","_t"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Fields/FieldDateRange/FieldDateRange.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { FocusEvent, Ref } from 'react'\nimport React, { forwardRef } from 'react'\nimport styled from 'styled-components'\nimport { FloatingLabelField } from '../Field/FloatingLabelField'\nimport { omitFieldProps, pickFieldProps } from '../Field/Field'\nimport { useFormContext } from '../../Form'\nimport { useID } from '../../../utils'\nimport type { InputDateRangeProps } from '../../Inputs/InputDateRange'\nimport { InputDateRange } from '../../Inputs/InputDateRange'\nimport type { FieldProps, FloatingLabelFieldProps } from '../Field'\n\nexport interface FieldInputDateRangeProps\n  extends FieldProps,\n    FloatingLabelFieldProps,\n    InputDateRangeProps {\n  ref: Ref<HTMLInputElement>\n}\n\nconst checkValueOnBlur = (e: FocusEvent) => {\n  const inputs = Array.from(e.currentTarget.querySelectorAll('input'))\n  // Check both inputs (to - from) for a value\n  return inputs.some(input => input.value !== '')\n}\n\nexport const FieldDateRange = styled(\n  forwardRef((props: FieldInputDateRangeProps, ref: Ref<HTMLInputElement>) => {\n    const validationMessage = useFormContext(props)\n    const id = useID(props.id)\n\n    return (\n      <FloatingLabelField\n        {...pickFieldProps(props)}\n        checkValueOnBlur={checkValueOnBlur}\n        hasValue={!!props.value}\n        id={id}\n        validationMessage={validationMessage}\n      >\n        <InputDateRange\n          {...omitFieldProps(props)}\n          aria-describedby={`describedby-${id}`}\n          aria-labelledby={`labelledby-${id}`}\n          id={id}\n          onChange={props.onChange}\n          value={props.value}\n          validationType={validationMessage && validationMessage.type}\n          ref={ref}\n        />\n      </FloatingLabelField>\n    )\n  })\n)``\n"]},"metadata":{},"sourceType":"module"}