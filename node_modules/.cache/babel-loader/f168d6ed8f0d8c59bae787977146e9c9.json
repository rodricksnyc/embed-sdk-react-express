{"ast":null,"code":"import { useMemo } from 'react';\n\nfunction assignRef(ref, value) {\n  if (!ref) return;\n\n  if (typeof ref === 'function') {\n    ref(value);\n  } else {\n    try {\n      ;\n      ref.current = value;\n    } catch (error) {\n      throw new Error(`Cannot assign value \"${value}\" to ref \"${ref}\"`);\n    }\n  }\n}\n\nexport function useForkedRef() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return useMemo(() => {\n    return node => {\n      refs.forEach(ref => {\n        assignRef(ref, node);\n      });\n    };\n  }, refs);\n}","map":{"version":3,"mappings":"AASA,SAASA,OAAT,QAAwB,OAAxB;;AAIA,SAASC,SAAT,CAA0CC,GAA1C,EAA6DC,KAA7D,EAA8E;EAC5E,IAAI,CAACD,GAAL,EAAU;;EACV,IAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;IAC7BA,GAAG,CAACC,KAAD,CAAHD;EACD,CAFD,MAEO;IACL,IAAI;MACF;MAAEA,GAAG,CAAgCE,OAAnCF,GAA6CC,KAA7CD;IACH,CAFD,CAEE,OAAOG,KAAP,EAAc;MACd,MAAM,IAAIC,KAAJ,CAAW,wBAAuBH,KAAM,aAAYD,GAAI,GAAxD,CAAN;IACF;EACF;AACF;;AAEA,OAAO,SAASK,YAAT,GAAsE;EAAA,kCAAtBC,IAAsB;IAAtBA,IAAsB;EAAA;;EAC3E,OAAOR,OAAO,CAAC,MAAM;IACnB,OAAQS,IAAc,IAAK;MACzBD,IAAI,CAACE,OAALF,CAAaN,GAAG,IAAI;QAClBD,SAAS,CAACC,GAAD,EAAMO,IAAN,CAATR;MACD,CAFDO;IAGD,CAJD;EAMD,CAPa,EAOXA,IAPW,CAAd;AAQF","names":["useMemo","assignRef","ref","value","current","error","Error","useForkedRef","refs","node","forEach"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useForkedRef.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\n// Much of the following is pulled from https://github.com/reach/reach-ui\n// because their work is fantastic (but is not in TypeScript)\n\nimport type { Ref, MutableRefObject } from 'react'\nimport { useMemo } from 'react'\n\nexport type RefToFork<E> = Ref<E> | MutableRefObject<E> | undefined\n\nfunction assignRef<E extends HTMLElement>(ref: RefToFork<E>, value: E | null) {\n  if (!ref) return\n  if (typeof ref === 'function') {\n    ref(value)\n  } else {\n    try {\n      ;(ref as MutableRefObject<E | null>).current = value\n    } catch (error) {\n      throw new Error(`Cannot assign value \"${value}\" to ref \"${ref}\"`)\n    }\n  }\n}\n\nexport function useForkedRef<E extends HTMLElement>(...refs: RefToFork<E>[]) {\n  return useMemo(() => {\n    return (node: E | null) => {\n      refs.forEach(ref => {\n        assignRef(ref, node)\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs)\n}\n"]},"metadata":{},"sourceType":"module"}