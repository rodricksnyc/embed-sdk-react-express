{"ast":null,"code":"import React from 'react';\nimport { formatDateString } from '../../../Calendar/utils';\nexport const DateTimeFormat = _ref => {\n  let {\n    children: _children = new Date(Date.now()),\n    date: _date = true,\n    format: _format = 'medium',\n    locale,\n    time: _time = true,\n    timeZone\n  } = _ref;\n\n  try {\n    return React.createElement(React.Fragment, null, formatDateString(_children, _format, locale, timeZone, {\n      date: _date,\n      time: _time\n    }));\n  } catch (error) {\n    return React.createElement(React.Fragment, null, error);\n  }\n};","map":{"version":3,"mappings":"AAKA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,gBAAT,QAAiC,yBAAjC;AAgBA,OAAO,MAAMC,cAAc,GAAG,QAOM;EAAA,IAPL;IAC7BC,QAAQ,EAARA,SAAQ,GAAG,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAALD,EAAT,CADkB;IAE7BE,IAAI,EAAJA,KAAI,GAAG,IAFsB;IAG7BC,MAAM,EAANA,OAAM,GAAG,QAHoB;IAI7BC,MAJ6B;IAK7BC,IAAI,EAAJA,KAAI,GAAG,IALsB;IAM7BC;EAN6B,CAOK;;EAClC,IAAI;IACF,OACEV,0CACGC,gBAAgB,CAACE,SAAD,EAAWI,OAAX,EAAmBC,MAAnB,EAA2BE,QAA3B,EAAqC;MAAEJ,IAAI,EAAJA,KAAF;MAAQG,IAAI,EAAJA;IAAR,CAArC,CADnB,CADF;EAKD,CAND,CAME,OAAOE,KAAP,EAAc;IACd,OAAOX,0CAAGW,KAAH,CAAP;EACF;AACD,CAjBM","names":["React","formatDateString","DateTimeFormat","children","Date","now","date","format","locale","time","timeZone","error"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Inputs/DateTimeFormat/DateTimeFormat.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport type { Locale } from 'date-fns'\nimport type { DateFormats, DateTimeOptions } from '../../../Calendar/utils'\nimport { formatDateString } from '../../../Calendar/utils'\n\nexport type DateTimeFormatProps = {\n  children?: Date\n  format?: DateFormats | string\n  /**\n   * Locale object from date-fns.\n   * @example\n   * import ko from 'date-fns/locale/ko'\n   */\n  locale?: Locale\n  timeZone?: string\n}\n\ntype DateTimeFormatExtensionProps = DateTimeFormatProps & DateTimeOptions\n\nexport const DateTimeFormat = ({\n  children = new Date(Date.now()),\n  date = true,\n  format = 'medium',\n  locale,\n  time = true,\n  timeZone,\n}: DateTimeFormatExtensionProps) => {\n  try {\n    return (\n      <>\n        {formatDateString(children, format, locale, timeZone, { date, time })}\n      </>\n    )\n  } catch (error) {\n    return <>{error}</>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}