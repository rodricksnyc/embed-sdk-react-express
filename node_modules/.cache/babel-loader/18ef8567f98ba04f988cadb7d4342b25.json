{"ast":null,"code":"import xorWith from 'lodash/xorWith';\nimport { useContext } from 'react';\nimport { useWrapEvent } from '../../../../utils';\nimport { ComboboxActionType } from './state';\nexport function useOptionEvents(props, context) {\n  const {\n    label,\n    value,\n    onClick,\n    onMouseEnter\n  } = props;\n  const {\n    data,\n    onChange,\n    transition,\n    closeOnSelectPropRef,\n    isScrollingRef\n  } = useContext(context);\n  const {\n    options\n  } = data;\n\n  function handleClick() {\n    const option = {\n      label,\n      value\n    };\n\n    if (onChange) {\n      if (options) {\n        ;\n        onChange(xorWith(options, [option], (o1, o2) => o1.value === o2.value));\n      } else {\n        ;\n        onChange(option);\n      }\n    }\n\n    transition && transition(ComboboxActionType.SELECT_WITH_CLICK, {\n      option\n    });\n\n    if (closeOnSelectPropRef && closeOnSelectPropRef.current) {\n      transition && transition(ComboboxActionType.ESCAPE);\n    }\n  }\n\n  const handleMouseEnter = () => {\n    requestAnimationFrame(() => {\n      if (isScrollingRef !== null && isScrollingRef !== void 0 && isScrollingRef.current) return;\n      const option = {\n        label,\n        value\n      };\n      transition && transition(ComboboxActionType.NAVIGATE, {\n        option\n      });\n    });\n  };\n\n  return {\n    onClick: useWrapEvent(handleClick, onClick),\n    onMouseEnter: useWrapEvent(handleMouseEnter, onMouseEnter)\n  };\n}","map":{"version":3,"mappings":"AAKA,OAAOA,OAAP,MAAoB,gBAApB;AAEA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,YAAT,QAA6B,mBAA7B;AAWA,SAASC,kBAAT,QAAmC,SAAnC;AAEA,OAAO,SAASC,eAAT,CAELC,KAFK,EAEuBC,OAFvB,EAEiD;EACtD,MAAM;IAAEC,KAAF;IAASC,KAAT;IAAgBC,OAAhB;IAAyBC;EAAzB,IAA0CL,KAAhD;EACA,MAAM;IAAEM,IAAF;IAAQC,QAAR;IAAkBC,UAAlB;IAA8BC,oBAA9B;IAAoDC;EAApD,IACJd,UAAU,CAACK,OAAD,CADZ;EAEA,MAAM;IAAEU;EAAF,IAAcL,IAApB;;EAEA,SAASM,WAAT,GAAuB;IACrB,MAAMC,MAAM,GAAG;MAAEX,KAAF;MAASC;IAAT,CAAf;;IACA,IAAII,QAAJ,EAAc;MACZ,IAAII,OAAJ,EAAa;QACX;QAAEJ,QAAQ,CACRZ,OAAO,CAACgB,OAAD,EAAU,CAACE,MAAD,CAAV,EAAoB,CAACC,EAAD,EAAKC,EAAL,KAAYD,EAAE,CAACX,KAAHW,KAAaC,EAAE,CAACZ,KAAhD,CADC,CAARI;MAGH,CAJD,MAIO;QACL;QAAEA,QAAQ,CAAsBM,MAAtB,CAARN;MACJ;IACF;;IACAC,UAAU,IAAIA,UAAU,CAACV,kBAAkB,CAACkB,iBAApB,EAAuC;MAAEH;IAAF,CAAvC,CAAxBL;;IACA,IAAIC,oBAAoB,IAAIA,oBAAoB,CAACQ,OAAjD,EAA0D;MAExDT,UAAU,IAAIA,UAAU,CAACV,kBAAkB,CAACoB,MAApB,CAAxBV;IACF;EACF;;EAEA,MAAMW,gBAAgB,GAAG,MAAM;IAG7BC,qBAAqB,CAAC,MAAM;MAC1B,IAAIV,cAAc,SAAdA,kBAAc,WAAdA,kBAAc,CAAEO,OAApB,EAA6B;MAC7B,MAAMJ,MAAM,GAAG;QAAEX,KAAF;QAASC;MAAT,CAAf;MACAK,UAAU,IAAIA,UAAU,CAACV,kBAAkB,CAACuB,QAApB,EAA8B;QAAER;MAAF,CAA9B,CAAxBL;IACD,CAJoB,CAArBY;EAKD,CARD;;EAUA,OAAO;IACLhB,OAAO,EAAEP,YAAY,CAACe,WAAD,EAAcR,OAAd,CADhB;IAELC,YAAY,EAAER,YAAY,CAACsB,gBAAD,EAAmBd,YAAnB;EAFrB,CAAP;AAIF","names":["xorWith","useContext","useWrapEvent","ComboboxActionType","useOptionEvents","props","context","label","value","onClick","onMouseEnter","data","onChange","transition","closeOnSelectPropRef","isScrollingRef","options","handleClick","option","o1","o2","SELECT_WITH_CLICK","current","ESCAPE","handleMouseEnter","requestAnimationFrame","NAVIGATE"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Inputs/Combobox/utils/useOptionEvents.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport xorWith from 'lodash/xorWith'\nimport type { Context } from 'react'\nimport { useContext } from 'react'\nimport { useWrapEvent } from '../../../../utils'\nimport type {\n  ComboboxContextProps,\n  ComboboxMultiContextProps,\n} from '../ComboboxContext'\nimport type {\n  ComboboxCallback,\n  ComboboxMultiCallback,\n  ComboboxOptionProps,\n} from '../types'\nimport type { ComboboxMultiData } from './state'\nimport { ComboboxActionType } from './state'\n\nexport function useOptionEvents<\n  CProps extends ComboboxContextProps | ComboboxMultiContextProps\n>(props: ComboboxOptionProps, context: Context<CProps>) {\n  const { label, value, onClick, onMouseEnter } = props\n  const { data, onChange, transition, closeOnSelectPropRef, isScrollingRef } =\n    useContext(context)\n  const { options } = data as ComboboxMultiData\n\n  function handleClick() {\n    const option = { label, value }\n    if (onChange) {\n      if (options) {\n        ;(onChange as ComboboxMultiCallback)(\n          xorWith(options, [option], (o1, o2) => o1.value === o2.value)\n        )\n      } else {\n        ;(onChange as ComboboxCallback)(option)\n      }\n    }\n    transition && transition(ComboboxActionType.SELECT_WITH_CLICK, { option })\n    if (closeOnSelectPropRef && closeOnSelectPropRef.current) {\n      // Closing an opened list\n      transition && transition(ComboboxActionType.ESCAPE)\n    }\n  }\n\n  const handleMouseEnter = () => {\n    // Wait for isScrollingRef.current to be updated in ComboboxList scrollHandler\n    // (mouseenter event is fired before the scroll event)\n    requestAnimationFrame(() => {\n      if (isScrollingRef?.current) return\n      const option = { label, value }\n      transition && transition(ComboboxActionType.NAVIGATE, { option })\n    })\n  }\n\n  return {\n    onClick: useWrapEvent(handleClick, onClick),\n    onMouseEnter: useWrapEvent(handleMouseEnter, onMouseEnter),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}