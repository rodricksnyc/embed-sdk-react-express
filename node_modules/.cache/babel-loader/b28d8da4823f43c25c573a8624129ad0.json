{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useControlWarn } from '../utils/useControlWarn';\n\nconst isNodeInOrAfter = (nodeA, nodeB) => {\n  const relationship = nodeA.compareDocumentPosition(nodeB);\n  return relationship === Node.DOCUMENT_POSITION_FOLLOWING || relationship === Node.DOCUMENT_POSITION_FOLLOWING + Node.DOCUMENT_POSITION_CONTAINED_BY;\n};\n\nexport const usePopoverToggle = (_ref, portalElement, triggerElement) => {\n  let {\n    isOpen: controlledIsOpen = false,\n    setOpen: controlledSetOpen,\n    canClose,\n    triggerToggle,\n    cancelClickOutside: _cancelClickOutside = false\n  } = _ref;\n  const [uncontrolledIsOpen, uncontrolledSetOpen] = useState(controlledIsOpen);\n  const [mouseDownTarget, setMouseDownTarget] = useState(null);\n  const isControlled = useControlWarn({\n    controllingProps: ['setOpen'],\n    isControlledCheck: () => controlledSetOpen !== undefined,\n    name: 'usePopover'\n  });\n  const isOpen = isControlled ? controlledIsOpen : uncontrolledIsOpen;\n  const setOpen = isControlled && controlledSetOpen ? controlledSetOpen : uncontrolledSetOpen;\n  useEffect(() => {\n    const checkCloseAndStopEvent = event => {\n      if (canClose && !canClose()) return;\n\n      if (portalElement && mouseDownTarget) {\n        if (isNodeInOrAfter(portalElement, mouseDownTarget)) {\n          return;\n        }\n      }\n\n      if (portalElement && isNodeInOrAfter(portalElement, event.target)) {\n        return;\n      }\n\n      const clickedOnToggle = triggerElement && triggerElement.contains(event.target);\n\n      if (!triggerToggle && clickedOnToggle) {\n        return;\n      }\n\n      setOpen(false);\n\n      if (clickedOnToggle) {\n        event.stopPropagation();\n        event.preventDefault();\n        return;\n      }\n\n      if (!_cancelClickOutside) {\n        return;\n      }\n\n      event.stopPropagation();\n      event.preventDefault();\n    };\n\n    const handleMouseDown = event => {\n      setMouseDownTarget(event.target);\n      checkCloseAndStopEvent(event);\n    };\n\n    const handleClickOutside = event => {\n      checkCloseAndStopEvent(event);\n      setMouseDownTarget(null);\n    };\n\n    const handleMouseUp = () => {\n      setMouseDownTarget(null);\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleMouseDown, true);\n      document.addEventListener('click', handleClickOutside, true);\n    } else if (mouseDownTarget) {\n      document.addEventListener('click', handleClickOutside, true);\n      document.addEventListener('mouseup', handleMouseUp);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleMouseDown, true);\n      document.removeEventListener('click', handleClickOutside, true);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [_cancelClickOutside, canClose, isOpen, setOpen, triggerElement, portalElement, triggerToggle, mouseDownTarget]);\n  return [isOpen, setOpen];\n};","map":{"version":3,"mappings":"AA0BA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,yBAA/B;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAcC,KAAd,KAA8B;EACpD,MAAMC,YAAY,GAAGF,KAAK,CAACG,uBAANH,CAA8BC,KAA9BD,CAArB;EACA,OACEE,YAAY,KAAKE,IAAI,CAACC,2BAAtBH,IACAA,YAAY,KACVE,IAAI,CAACC,2BAALD,GAAmCA,IAAI,CAACE,8BAH5C;AAKD,CAPD;;AA8CA,OAAO,MAAMC,gBAAgB,GAAG,OAQ9BC,aAR8B,EAS9BC,cAT8B,KAUU;EAAA,IATxC;IACEC,MAAM,EAAEC,gBAAgB,GAAG,KAD7B;IAEEC,OAAO,EAAEC,iBAFX;IAGEC,QAHF;IAIEC,aAJF;IAKEC,kBAAkB,EAAlBA,mBAAkB,GAAG;EALvB,CASwC;EACxC,MAAM,CAACC,kBAAD,EAAqBC,mBAArB,IAA4CtB,QAAQ,CAACe,gBAAD,CAA1D;EACA,MAAM,CAACQ,eAAD,EAAkBC,kBAAlB,IAAwCxB,QAAQ,CACpD,IADoD,CAAtD;EAGA,MAAMyB,YAAY,GAAGvB,cAAc,CAAC;IAClCwB,gBAAgB,EAAE,CAAC,SAAD,CADgB;IAElCC,iBAAiB,EAAE,MAAMV,iBAAiB,KAAKW,SAFb;IAGlCC,IAAI,EAAE;EAH4B,CAAD,CAAnC;EAKA,MAAMf,MAAM,GAAGW,YAAY,GAAGV,gBAAH,GAAsBM,kBAAjD;EACA,MAAML,OAAO,GACXS,YAAY,IAAIR,iBAAhBQ,GAAoCR,iBAApCQ,GAAwDH,mBAD1D;EAGArB,SAAS,CAAC,MAAM;IACd,MAAM6B,sBAAsB,GAAIC,KAAiB,IAAK;MACpD,IAAIb,QAAQ,IAAI,CAACA,QAAQ,EAAzB,EAA6B;;MAO7B,IAAIN,aAAa,IAAIW,eAArB,EAAsC;QACpC,IAAIpB,eAAe,CAACS,aAAD,EAAgBW,eAAhB,CAAnB,EAA6D;UAC3D;QACF;MACF;;MAGA,IACEX,aAAa,IACbT,eAAe,CAACS,aAAD,EAAgBmB,KAAK,CAACC,MAAtB,CAFjB,EAGE;QACA;MACF;;MAEA,MAAMC,eAAe,GACnBpB,cAAc,IAAIA,cAAc,CAACqB,QAAfrB,CAAwBkB,KAAK,CAACC,MAA9BnB,CADpB;;MAGA,IAAI,CAACM,aAAD,IAAkBc,eAAtB,EAAuC;QACrC;MACF;;MAEAjB,OAAO,CAAC,KAAD,CAAPA;;MAGA,IAAIiB,eAAJ,EAAqB;QAEnBF,KAAK,CAACI,eAANJ;QAEAA,KAAK,CAACK,cAANL;QACA;MACF;;MAEA,IAAI,CAACX,mBAAL,EAAyB;QACvB;MACF;;MAEAW,KAAK,CAACI,eAANJ;MACAA,KAAK,CAACK,cAANL;IACD,CA9CD;;IAgDA,MAAMM,eAAe,GAAIN,KAAiB,IAAK;MAC7CP,kBAAkB,CAACO,KAAK,CAACC,MAAP,CAAlBR;MACAM,sBAAsB,CAACC,KAAD,CAAtBD;IACD,CAHD;;IAKA,MAAMQ,kBAAkB,GAAIP,KAAiB,IAAK;MAChDD,sBAAsB,CAACC,KAAD,CAAtBD;MACAN,kBAAkB,CAAC,IAAD,CAAlBA;IACD,CAHD;;IAKA,MAAMe,aAAa,GAAG,MAAM;MAC1Bf,kBAAkB,CAAC,IAAD,CAAlBA;IACD,CAFD;;IAIA,IAAIV,MAAJ,EAAY;MACV0B,QAAQ,CAACC,gBAATD,CAA0B,WAA1BA,EAAuCH,eAAvCG,EAAwD,IAAxDA;MACAA,QAAQ,CAACC,gBAATD,CAA0B,OAA1BA,EAAmCF,kBAAnCE,EAAuD,IAAvDA;IACD,CAHD,MAGO,IAAIjB,eAAJ,EAAqB;MAE1BiB,QAAQ,CAACC,gBAATD,CAA0B,OAA1BA,EAAmCF,kBAAnCE,EAAuD,IAAvDA;MAEAA,QAAQ,CAACC,gBAATD,CAA0B,SAA1BA,EAAqCD,aAArCC;IACF;;IAEA,OAAO,MAAM;MACXA,QAAQ,CAACE,mBAATF,CAA6B,WAA7BA,EAA0CH,eAA1CG,EAA2D,IAA3DA;MACAA,QAAQ,CAACE,mBAATF,CAA6B,OAA7BA,EAAsCF,kBAAtCE,EAA0D,IAA1DA;MACAA,QAAQ,CAACE,mBAATF,CAA6B,SAA7BA,EAAwCD,aAAxCC;IACD,CAJD;EAKD,CA9EQ,EA8EN,CACDpB,mBADC,EAEDF,QAFC,EAGDJ,MAHC,EAIDE,OAJC,EAKDH,cALC,EAMDD,aANC,EAODO,aAPC,EAQDI,eARC,CA9EM,CAATtB;EAyFA,OAAO,CAACa,MAAD,EAASE,OAAT,CAAP;AACD,CAlHM","names":["useState","useEffect","useControlWarn","isNodeInOrAfter","nodeA","nodeB","relationship","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_CONTAINED_BY","usePopoverToggle","portalElement","triggerElement","isOpen","controlledIsOpen","setOpen","controlledSetOpen","canClose","triggerToggle","cancelClickOutside","uncontrolledIsOpen","uncontrolledSetOpen","mouseDownTarget","setMouseDownTarget","isControlled","controllingProps","isControlledCheck","undefined","name","checkCloseAndStopEvent","event","target","clickedOnToggle","contains","stopPropagation","preventDefault","handleMouseDown","handleClickOutside","handleMouseUp","document","addEventListener","removeEventListener"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Popover/usePopoverToggle.tsx"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport { useState, useEffect } from 'react'\nimport { useControlWarn } from '../utils/useControlWarn'\n\nconst isNodeInOrAfter = (nodeA: Node, nodeB: Node) => {\n  const relationship = nodeA.compareDocumentPosition(nodeB)\n  return (\n    relationship === Node.DOCUMENT_POSITION_FOLLOWING ||\n    relationship ===\n      Node.DOCUMENT_POSITION_FOLLOWING + Node.DOCUMENT_POSITION_CONTAINED_BY\n  )\n}\n\nexport interface UsePopoverToggleProps {\n  /**\n   * If true, the Popover will not render\n   */\n  disabled?: boolean\n\n  /**\n   * When true, display Surface and it's contained content\n   * @default false\n   */\n  isOpen?: boolean\n\n  /**\n   * Specify a callback to be called before trying to close the Popover. This allows for\n   * use-cases where the user might lose work (think common \"Save before closing warning\" type flow)\n   * Specify a callback to be called each time this Popover is closed\n   */\n  canClose?: () => boolean\n\n  /**\n   * Optional, for a controlled version of the component\n   */\n  setOpen?: (open: boolean) => void\n\n  /**\n   * Whether to close the popover when the toggle is clicked again\n   * @default true\n   */\n  triggerToggle?: boolean\n\n  /**\n   * Whether to honor the first click outside the popover\n   * @default false\n   */\n  cancelClickOutside?: boolean\n}\n\nexport const usePopoverToggle = (\n  {\n    isOpen: controlledIsOpen = false,\n    setOpen: controlledSetOpen,\n    canClose,\n    triggerToggle,\n    cancelClickOutside = false,\n  }: UsePopoverToggleProps,\n  portalElement: HTMLElement | null,\n  triggerElement: HTMLElement | null\n): [boolean, (value: boolean) => void] => {\n  const [uncontrolledIsOpen, uncontrolledSetOpen] = useState(controlledIsOpen)\n  const [mouseDownTarget, setMouseDownTarget] = useState<EventTarget | null>(\n    null\n  )\n  const isControlled = useControlWarn({\n    controllingProps: ['setOpen'],\n    isControlledCheck: () => controlledSetOpen !== undefined,\n    name: 'usePopover',\n  })\n  const isOpen = isControlled ? controlledIsOpen : uncontrolledIsOpen\n  const setOpen =\n    isControlled && controlledSetOpen ? controlledSetOpen : uncontrolledSetOpen\n\n  useEffect(() => {\n    const checkCloseAndStopEvent = (event: MouseEvent) => {\n      if (canClose && !canClose()) return\n\n      // Check if the click started in (or on top of) the popover\n      // If so, don't close the popover even if the user has dragged\n      // outside the popover as this is preferable to a bug where another\n      // component triggers a scroll animation resulting in an\n      // unintentional drag, which closes the popover\n      if (portalElement && mouseDownTarget) {\n        if (isNodeInOrAfter(portalElement, mouseDownTarget as Node)) {\n          return\n        }\n      }\n\n      // User clicked inside the Popover surface/portal\n      if (\n        portalElement &&\n        isNodeInOrAfter(portalElement, event.target as Node)\n      ) {\n        return\n      }\n\n      const clickedOnToggle =\n        triggerElement && triggerElement.contains(event.target as Node)\n\n      if (!triggerToggle && clickedOnToggle) {\n        return\n      }\n\n      setOpen(false)\n\n      // User clicked the trigger while the Popover was open\n      if (clickedOnToggle) {\n        // stopPropagation because instant Popover re-opening is silly\n        event.stopPropagation()\n        // preventDefault for consistency because handleOpen does it\n        event.preventDefault()\n        return\n      }\n\n      if (!cancelClickOutside) {\n        return\n      }\n\n      event.stopPropagation()\n      event.preventDefault()\n    }\n\n    const handleMouseDown = (event: MouseEvent) => {\n      setMouseDownTarget(event.target)\n      checkCloseAndStopEvent(event)\n    }\n\n    const handleClickOutside = (event: MouseEvent) => {\n      checkCloseAndStopEvent(event)\n      setMouseDownTarget(null)\n    }\n\n    const handleMouseUp = () => {\n      setMouseDownTarget(null)\n    }\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleMouseDown, true)\n      document.addEventListener('click', handleClickOutside, true)\n    } else if (mouseDownTarget) {\n      // popover was closed via mousedown, but still need to cancel next click\n      document.addEventListener('click', handleClickOutside, true)\n      // and then cleanup mouseDownTarget\n      document.addEventListener('mouseup', handleMouseUp)\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleMouseDown, true)\n      document.removeEventListener('click', handleClickOutside, true)\n      document.removeEventListener('mouseup', handleMouseUp)\n    }\n  }, [\n    cancelClickOutside,\n    canClose,\n    isOpen,\n    setOpen,\n    triggerElement,\n    portalElement,\n    triggerToggle,\n    mouseDownTarget,\n  ])\n\n  return [isOpen, setOpen]\n}\n"]},"metadata":{},"sourceType":"module"}