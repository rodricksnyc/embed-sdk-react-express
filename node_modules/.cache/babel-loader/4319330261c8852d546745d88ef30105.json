{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { useTheme } from 'styled-components';\nimport { mergeClassNames } from '../utils';\nimport { useRippleState } from './useRippleState';\nimport { useRippleStateBG } from './useRippleStateBG';\n\nconst getMinMaxDimensions = (width, height) => {\n  const min = Math.min(width, height);\n  const max = Math.max(width, height);\n  return [min, max];\n};\n\nconst getRippleScaleRange = (bounded, min, max, size, noScale) => {\n  const start = 0.1;\n\n  if (bounded && min > 0 && max > 0) {\n    const startBounded = min === max ? start : 1;\n    const end = Math.hypot(min, max) / min;\n\n    if (noScale) {\n      return [end, end];\n    }\n\n    return [startBounded, end];\n  }\n\n  if (noScale) {\n    return [size, size];\n  }\n\n  return [start, size];\n};\n\nconst getRippleOffset = (min, max, bounded) => {\n  if (!bounded || min === max) {\n    return '0, 0';\n  }\n\n  const offset = max / 2 - min / 2;\n  return `${offset}px, 0`;\n};\n\nexport const useRipple = _ref => {\n  let {\n    bounded: _bounded = false,\n    className: _className = '',\n    color: _color = 'neutral',\n    height: _height = 0,\n    size: _size = 1,\n    style,\n    width: _width = 0\n  } = _ref;\n  const {\n    colors,\n    defaults: {\n      brandAnimation\n    }\n  } = useTheme();\n  const [min, max] = getMinMaxDimensions(_width, _height);\n  const rippleScaleRange = getRippleScaleRange(_bounded, min, max, _size, !brandAnimation);\n  const rippleOffset = getRippleOffset(min, max, _bounded);\n  const {\n    start: startBG,\n    end: endBG,\n    className: bgClass\n  } = useRippleStateBG();\n  const {\n    start: startFG,\n    end: endFG,\n    className: fgClass\n  } = useRippleState();\n  const rippleStyle = {\n    '--ripple-color': colors[_color],\n    '--ripple-overflow': _bounded ? 'hidden' : 'visible',\n    '--ripple-scale-end': rippleScaleRange[1] || 1,\n    '--ripple-scale-start': rippleScaleRange[0],\n    '--ripple-size': _bounded && min > 0 ? `${min}px` : '100%',\n    '--ripple-translate': rippleOffset\n  };\n  return {\n    callbacks: {\n      endBG,\n      endFG,\n      startBG,\n      startFG\n    },\n    className: mergeClassNames([_className, `${bgClass} ${fgClass}`]),\n    style: _objectSpread(_objectSpread({}, style), rippleStyle)\n  };\n};","map":{"version":3,"mappings":"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","names":["useTheme","mergeClassNames","useRippleState","useRippleStateBG","getMinMaxDimensions","width","height","min","Math","max","getRippleScaleRange","bounded","size","noScale","start","startBounded","end","hypot","getRippleOffset","offset","useRipple","className","color","style","colors","defaults","brandAnimation","rippleScaleRange","rippleOffset","startBG","endBG","bgClass","startFG","endFG","fgClass","rippleStyle","callbacks"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Ripple/useRipple.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport { useTheme } from 'styled-components'\nimport { mergeClassNames } from '../utils'\nimport type { UseRippleProps, UseRippleResponse } from './types'\nimport { useRippleState } from './useRippleState'\nimport { useRippleStateBG } from './useRippleStateBG'\n\nconst getMinMaxDimensions = (width: number, height: number) => {\n  const min = Math.min(width, height)\n  const max = Math.max(width, height)\n  return [min, max]\n}\n\nconst getRippleScaleRange = (\n  bounded: boolean,\n  min: number,\n  max: number,\n  size: number,\n  noScale?: boolean\n): [number, number] => {\n  // For squares it looks best to start the ripple very small\n  const start = 0.1\n  if (bounded && min > 0 && max > 0) {\n    // For rectangles it looks better to start at the size of the smaller dimension\n    // which is 1 because of how size is calculated\n    const startBounded = min === max ? start : 1\n    // The ripple needs to spread past all corners, use hypotenuse as the\n    // final diameter, and start at 1 to make the animation less jarring\n    const end = Math.hypot(min, max) / min\n\n    if (noScale) {\n      return [end, end]\n    }\n    return [startBounded, end]\n  }\n\n  if (noScale) {\n    return [size, size]\n  }\n  // Start small and expand to the full size\n  return [start, size]\n}\n\nconst getRippleOffset = (min: number, max: number, bounded?: boolean) => {\n  if (!bounded || min === max) {\n    return '0, 0'\n  }\n  // If the element is rectangular, adjust the center of the ripple\n  // further along the larger dimension\n  // NOTE: Currently only works for a horizontal rectangle like a Button\n  const offset = max / 2 - min / 2\n  return `${offset}px, 0`\n}\n\n/**\n * @returns callbacks should be mapped to DOM event handlers (see useRippleHandlers)\n * and remaining props should be passed to an internal element that includes rippleStyle\n */\nexport const useRipple = ({\n  bounded = false,\n  className = '',\n  color = 'neutral',\n  height = 0,\n  size = 1,\n  style,\n  width = 0,\n}: UseRippleProps): UseRippleResponse => {\n  // Get the theme colors to apply the right value for the color prop\n  // brandAnimation toggles the animation\n  const {\n    colors,\n    defaults: { brandAnimation },\n  } = useTheme()\n\n  // Get values for animation â€“ bounded uses dimensions, otherwise they're static\n  const [min, max] = getMinMaxDimensions(width, height)\n  const rippleScaleRange = getRippleScaleRange(\n    bounded,\n    min,\n    max,\n    size,\n    !brandAnimation\n  )\n  const rippleOffset = getRippleOffset(min, max, bounded)\n\n  // Background (hover, focus) and foreground (press) ripple states\n  const { start: startBG, end: endBG, className: bgClass } = useRippleStateBG()\n  const { start: startFG, end: endFG, className: fgClass } = useRippleState()\n  // bounded needs an explicit size, otherwise just fill the whole area\n\n  // Limitations of style/CSSProperties type\n  // https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors\n  const rippleStyle = {\n    '--ripple-color': colors[color],\n    // bounded ripple scales up larger than the container\n    // but should not show beyond its edges\n    '--ripple-overflow': bounded ? 'hidden' : 'visible',\n    '--ripple-scale-end': rippleScaleRange[1] || 1,\n    '--ripple-scale-start': rippleScaleRange[0],\n    '--ripple-size': bounded && min > 0 ? `${min}px` : '100%',\n    '--ripple-translate': rippleOffset,\n  }\n\n  return {\n    // Functions to be called from event handlers\n    // Use useRippleHandlers for most common mapping\n    callbacks: {\n      endBG,\n      endFG,\n      startBG,\n      startFG,\n    },\n    // Props to be applied to the same element that gets rippleStyle\n    className: mergeClassNames([className, `${bgClass} ${fgClass}`]),\n    style: { ...style, ...rippleStyle },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}