{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useResize } from '../useResize';\nimport { useCallbackRef } from '../useCallbackRef';\nexport const useOverflow = ref => {\n  const [element, callbackRef] = useCallbackRef(ref);\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const [height, setHeight] = useState(0);\n  const handleResize = useCallback(() => {\n    if (element) {\n      setHeight(element.offsetHeight);\n    }\n  }, [element]);\n  useResize(element, handleResize);\n  useEffect(() => {\n    if (element) {\n      setHasOverflow(element.offsetHeight < element.scrollHeight);\n    }\n  }, [height, element]);\n  return [hasOverflow, callbackRef];\n};","map":{"version":3,"mappings":"AAMA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAMA,OAAO,MAAMC,WAAW,GACtBC,GAAsB,IAC4B;EAClD,MAAM,CAACC,OAAD,EAAUC,WAAV,IAAyBJ,cAAc,CAACE,GAAD,CAA7C;EACA,MAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,KAAD,CAA9C;EACA,MAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,CAAD,CAApC;EAEA,MAAMW,YAAY,GAAGb,WAAW,CAAC,MAAM;IACrC,IAAIO,OAAJ,EAAa;MACXK,SAAS,CAACL,OAAO,CAACO,YAAT,CAATF;IACF;EACD,CAJ+B,EAI7B,CAACL,OAAD,CAJ6B,CAAhC;EAMAJ,SAAS,CAACI,OAAD,EAAUM,YAAV,CAATV;EAEAF,SAAS,CAAC,MAAM;IACd,IAAIM,OAAJ,EAAa;MACXG,cAAc,CAACH,OAAO,CAACO,YAARP,GAAuBA,OAAO,CAACQ,YAAhC,CAAdL;IACF;EACD,CAJQ,EAIN,CAACC,MAAD,EAASJ,OAAT,CAJM,CAATN;EAMA,OAAO,CAACQ,WAAD,EAAcD,WAAd,CAAP;AACD,CAtBM","names":["useCallback","useEffect","useState","useResize","useCallbackRef","useOverflow","ref","element","callbackRef","hasOverflow","setHasOverflow","height","setHeight","handleResize","offsetHeight","scrollHeight"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useOverflow/useOverflow.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Ref } from 'react'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useResize } from '../useResize'\nimport { useCallbackRef } from '../useCallbackRef'\n\nexport type UseOverflowProps = {\n  hasOverflow: boolean\n}\n\nexport const useOverflow = (\n  ref?: Ref<HTMLElement>\n): [boolean, (node: HTMLElement | null) => void] => {\n  const [element, callbackRef] = useCallbackRef(ref)\n  const [hasOverflow, setHasOverflow] = useState(false)\n  const [height, setHeight] = useState(0)\n\n  const handleResize = useCallback(() => {\n    if (element) {\n      setHeight(element.offsetHeight)\n    }\n  }, [element])\n\n  useResize(element, handleResize)\n\n  useEffect(() => {\n    if (element) {\n      setHasOverflow(element.offsetHeight < element.scrollHeight)\n    }\n  }, [height, element])\n\n  return [hasOverflow, callbackRef]\n}\n"]},"metadata":{},"sourceType":"module"}