{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"children\", \"content\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { useDialog } from './useDialog';\nimport { DialogRender } from './DialogRender';\nexport const Dialog = _ref => {\n  let {\n    children,\n    content\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  if (!content && children) {\n    content = children;\n    children = undefined;\n  }\n\n  const dialogProps = useDialog(_objectSpread({\n    content\n  }, props));\n\n  if (!content && !children) {\n    console.error('Dialog cannot be used without specifying content');\n    return null;\n  }\n\n  return React.createElement(DialogRender, dialogProps, children);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AAmBA,OAAO,MAAMC,MAAM,GAAGC,QAAkD;EAAA,IAAjD;IAAEC,QAAF;IAAYC;EAAZ,IAA4CF,IAAK;EAAA,IAAzBG,KAAK,4CAAoB;;EAKtE,IAAI,CAACD,OAAD,IAAYD,QAAhB,EAA0B;IACxBC,OAAO,GAAGD,QAAVC;IACAD,QAAQ,GAAGG,SAAXH;EACF;;EAEA,MAAMI,WAAW,GAAGR,SAAS;IAAGK;EAAH,GAAeC,KAAf,EAA7B;;EAKA,IAAI,CAACD,OAAD,IAAY,CAACD,QAAjB,EAA2B;IAEzBK,OAAO,CAACC,KAARD,CAAc,kDAAdA;IACA,OAAO,IAAP;EACF;;EAEA,OAAOV,oBAACE,YAAD,EAAkBO,WAAlB,EAAgCJ,QAAhC,CAAP;AACD,CAtBM","names":["React","useDialog","DialogRender","Dialog","_ref","children","content","props","undefined","dialogProps","console","error"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Dialog/Dialog.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { ReactNode } from 'react'\nimport React from 'react'\nimport type { UseDialogProps } from './useDialog'\nimport { useDialog } from './useDialog'\nimport type { DialogRenderProp } from './DialogRender'\nimport { DialogRender } from './DialogRender'\n\nexport interface DialogProps extends Omit<UseDialogProps, 'content'> {\n  children?: DialogRenderProp | ReactNode\n  /**\n   * Content to rendered within the Dialog surface.\n   * SOON TO BE @required\n   *\n   * NOTE: _VERY SOON_ this will become a required property.\n   * DO NOT create new instances of `Dialog` without a content.\n   * Prop is only marked optional to support legacy implementations.\n   *\n   * If `content` is not supplied `children` will used as the Dialog content instead\n   *\n   * I18n recommended: content that is user visible should be treated for i18n\n   */\n  content?: ReactNode\n}\n\nexport const Dialog = ({ children, content, ...props }: DialogProps) => {\n  /**\n   * This is a short-term workaround for existing interface\n   * Remove when `content` is no longer marked as optional (very soon!)\n   */\n  if (!content && children) {\n    content = children\n    children = undefined\n  }\n\n  const dialogProps = useDialog({ content, ...props })\n\n  /**\n   * Second part of short-term workaround. Remove when `content` is no longer optional\n   */\n  if (!content && !children) {\n    // eslint-disable-next-line no-console\n    console.error('Dialog cannot be used without specifying content')\n    return null\n  }\n\n  return <DialogRender {...dialogProps}>{children}</DialogRender>\n}\n"]},"metadata":{},"sourceType":"module"}