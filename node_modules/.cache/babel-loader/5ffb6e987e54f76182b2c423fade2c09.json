{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"clickOutsideDeactivates\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { useMemo, useRef } from 'react';\nimport { FocusTrapContext } from '@looker/components-providers';\nimport { useTrapStack } from './useTrapStack';\nexport const useFocusTrap = _ref => {\n  let {\n    clickOutsideDeactivates\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  const returnFocusRef = useRef(null);\n  const options = useMemo(() => ({\n    clickOutsideDeactivates,\n    returnFocusRef\n  }), [returnFocusRef, clickOutsideDeactivates]);\n  return useTrapStack(_objectSpread({\n    context: FocusTrapContext,\n    options\n  }, props));\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AAEA,SAASC,gBAAT,QAAiC,8BAAjC;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,OAAO,MAAMC,YAAY,GAAGC,QAG4C;EAAA,IAHN;IAChEC;EADgE,IAGCD,IAAK;EAAA,IADnEE,KAAK,4CAC8D;;EACtE,MAAMC,cAAc,GAAGP,MAAM,CAAU,IAAV,CAA7B;EACA,MAAMQ,OAAO,GAAGT,OAAO,CACrB,OAAO;IAAEM,uBAAF;IAA2BE;EAA3B,CAAP,CADqB,EAErB,CAACA,cAAD,EAAiBF,uBAAjB,CAFqB,CAAvB;EAIA,OAAOH,YAAY;IACjBO,OAAO,EAAER,gBADQ;IAGjBO;EAHiB,GAIdF,KAJc,EAAnB;AAMD,CAfM","names":["useMemo","useRef","FocusTrapContext","useTrapStack","useFocusTrap","_ref","clickOutsideDeactivates","props","returnFocusRef","options","context"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useFocusTrap.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useMemo, useRef } from 'react'\nimport type { FocusTrapOptions } from '@looker/components-providers'\nimport { FocusTrapContext } from '@looker/components-providers'\nimport type { UseTrapStackBaseProps } from './useTrapStack'\nimport { useTrapStack } from './useTrapStack'\n\nexport const useFocusTrap = <E extends HTMLElement = HTMLElement>({\n  clickOutsideDeactivates,\n  ...props\n}: UseTrapStackBaseProps<E> & { clickOutsideDeactivates?: boolean }) => {\n  const returnFocusRef = useRef<Element>(null)\n  const options = useMemo(\n    () => ({ clickOutsideDeactivates, returnFocusRef }),\n    [returnFocusRef, clickOutsideDeactivates]\n  )\n  return useTrapStack<E, FocusTrapOptions>({\n    context: FocusTrapContext,\n    // If options.returnFocusRef is set, it will override this one\n    options,\n    ...props,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}