{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n\nlet _ = t => t,\n    _t;\n\nimport React, { forwardRef, useState } from 'react';\nimport styled, { useTheme } from 'styled-components';\nimport { useID } from '../../../utils';\nimport { useFormContext } from '../../Form';\nimport { InputText, InputTextContext } from '../../Inputs/InputText';\nimport { FloatingLabelField, omitFieldProps, pickFieldProps } from '../Field';\nimport { getHasValue } from '../Field/useFloatingLabel';\nconst FieldTextComponent = forwardRef((props, ref) => {\n  const id = useID(props.id);\n  const validationMessage = useFormContext(props);\n  const {\n    space\n  } = useTheme();\n  const [beforeWidth, setBeforeWidth] = useState(0);\n  let labelOffset;\n\n  if (props.iconBefore) {\n    labelOffset = space.u8;\n  } else if (props.before) {\n    labelOffset = `${beforeWidth}px`;\n  }\n\n  return React.createElement(InputTextContext.Provider, {\n    value: {\n      beforeWidth,\n      setBeforeWidth\n    }\n  }, React.createElement(FloatingLabelField, _extends({\n    id: id,\n    validationMessage: validationMessage,\n    hasValue: getHasValue(props),\n    labelOffset: labelOffset\n  }, pickFieldProps(props)), React.createElement(InputText, _extends({}, omitFieldProps(props), {\n    id: id,\n    \"aria-describedby\": `describedby-${id}`,\n    validationType: validationMessage && validationMessage.type,\n    ref: ref\n  }))));\n});\nFieldTextComponent.displayName = 'FieldTextComponent';\nexport const FieldText = styled(FieldTextComponent).withConfig({\n  displayName: \"FieldText\",\n  componentId: \"sc-rg64oz-0\"\n})(_t || (_t = _``));","map":{"version":3,"mappings":";;;;;AAMA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,MAAP,IAAiBC,QAAjB,QAAiC,mBAAjC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,cAAT,QAA+B,YAA/B;AAEA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,wBAA5C;AAEA,SAASC,kBAAT,EAA6BC,cAA7B,EAA6CC,cAA7C,QAAmE,UAAnE;AACA,SAASC,WAAT,QAA4B,2BAA5B;AAIA,MAAMC,kBAAkB,GAAGZ,UAAU,CACnC,CAACa,KAAD,EAAwBC,GAAxB,KAAuD;EACrD,MAAMC,EAAE,GAAGX,KAAK,CAACS,KAAK,CAACE,EAAP,CAAhB;EACA,MAAMC,iBAAiB,GAAGX,cAAc,CAACQ,KAAD,CAAxC;EACA,MAAM;IAAEI;EAAF,IAAYd,QAAQ,EAA1B;EACA,MAAM,CAACe,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,CAAD,CAA9C;EACA,IAAImB,WAAJ;;EACA,IAAIP,KAAK,CAACQ,UAAV,EAAsB;IACpBD,WAAW,GAAGH,KAAK,CAACK,EAApBF;EACD,CAFD,MAEO,IAAIP,KAAK,CAACU,MAAV,EAAkB;IACvBH,WAAW,GAAI,GAAEF,WAAY,IAA7BE;EACF;;EAEA,OACErB,oBAACQ,gBAAgB,CAACiB,QAAlB,EAA0B;IAACC,KAAK,EAAE;MAAEP,WAAF;MAAeC;IAAf;EAAR,CAA1B,EACEpB,oBAACS,kBAAD,EAAmBkB;IACjBX,EAAE,EAAEA,EADa;IAEjBC,iBAAiB,EAAEA,iBAFF;IAGjBW,QAAQ,EAAEhB,WAAW,CAACE,KAAD,CAHJ;IAIjBO,WAAW,EAAEA;EAJI,GAKbV,cAAc,CAACG,KAAD,CALD,CAAnB,EAOEd,oBAACO,SAAD,EAAUoB,aACJjB,cAAc,CAACI,KAAD,CADV,EACiB;IACzBE,EAAE,EAAEA,EADqB;IAEzB,oBAAmB,eAAcA,EAAG,EAFX;IAGzBa,cAAc,EAAEZ,iBAAiB,IAAIA,iBAAiB,CAACa,IAH9B;IAIzBf,GAAG,EAAEA;EAJoB,CADjB,CAAV,CAPF,CADF,CADF;AAmBD,CAhCkC,CAArC;AAmCAF,kBAAkB,CAACkB,WAAnBlB,GAAiC,oBAAjCA;AAEA,OAAO,MAAMmB,SAAS,GAAG7B,MAAM,CAACU,kBAAD,CAANV,CAA0B8B,UAA1B9B,CAA0B;EAAA4B;EAAAG;AAAA,CAA1B/B,EAA0BgC,aAAC,EAAD,CAA1BhC,CAAlB","names":["React","forwardRef","useState","styled","useTheme","useID","useFormContext","InputText","InputTextContext","FloatingLabelField","omitFieldProps","pickFieldProps","getHasValue","FieldTextComponent","props","ref","id","validationMessage","space","beforeWidth","setBeforeWidth","labelOffset","iconBefore","u8","before","Provider","value","_extends","hasValue","validationType","type","displayName","FieldText","withConfig","componentId","_t"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Fields/FieldText/FieldText.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Ref } from 'react'\nimport React, { forwardRef, useState } from 'react'\nimport styled, { useTheme } from 'styled-components'\nimport { useID } from '../../../utils'\nimport { useFormContext } from '../../Form'\nimport type { InputTextProps } from '../../Inputs/InputText'\nimport { InputText, InputTextContext } from '../../Inputs/InputText'\nimport type { FieldProps } from '../Field'\nimport { FloatingLabelField, omitFieldProps, pickFieldProps } from '../Field'\nimport { getHasValue } from '../Field/useFloatingLabel'\n\nexport interface FieldTextProps extends FieldProps, InputTextProps {}\n\nconst FieldTextComponent = forwardRef(\n  (props: FieldTextProps, ref: Ref<HTMLInputElement>) => {\n    const id = useID(props.id)\n    const validationMessage = useFormContext(props)\n    const { space } = useTheme()\n    const [beforeWidth, setBeforeWidth] = useState(0)\n    let labelOffset\n    if (props.iconBefore) {\n      labelOffset = space.u8\n    } else if (props.before) {\n      labelOffset = `${beforeWidth}px`\n    }\n\n    return (\n      <InputTextContext.Provider value={{ beforeWidth, setBeforeWidth }}>\n        <FloatingLabelField\n          id={id}\n          validationMessage={validationMessage}\n          hasValue={getHasValue(props)}\n          labelOffset={labelOffset}\n          {...pickFieldProps(props)}\n        >\n          <InputText\n            {...omitFieldProps(props)}\n            id={id}\n            aria-describedby={`describedby-${id}`}\n            validationType={validationMessage && validationMessage.type}\n            ref={ref}\n          />\n        </FloatingLabelField>\n      </InputTextContext.Provider>\n    )\n  }\n)\n\nFieldTextComponent.displayName = 'FieldTextComponent'\n\nexport const FieldText = styled(FieldTextComponent)``\n"]},"metadata":{},"sourceType":"module"}