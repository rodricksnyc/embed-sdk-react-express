{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"onChange\"];\n\nlet _ = t => t,\n    _t;\n\nimport React, { forwardRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { FloatingLabelField, omitFieldProps, pickFieldProps } from '../Field';\nimport { getHasValue } from '../Field/useFloatingLabel';\nimport { useFormContext } from '../../Form';\nimport { Tooltip } from '../../../Tooltip';\nimport { useID, useTranslation } from '../../../utils';\nimport { InputTimeSelect } from '../../Inputs/InputTimeSelect';\nimport { VisuallyHidden } from '../../../VisuallyHidden';\nexport const FieldTimeSelect = styled(forwardRef((props, ref) => {\n  const validationMessage = useFormContext(props);\n  const id = useID(props.id);\n\n  const _omitFieldProps = omitFieldProps(props),\n        {\n    onChange: propsOnChange\n  } = _omitFieldProps,\n        fieldProps = _objectWithoutProperties(_omitFieldProps, _excluded);\n\n  const [formatError, setFormatError] = useState('');\n  const {\n    t\n  } = useTranslation('FieldTimeSelect');\n\n  const onChange = value => {\n    propsOnChange === null || propsOnChange === void 0 ? void 0 : propsOnChange(value);\n\n    if (value) {\n      setFormatError('');\n    } else {\n      setFormatError(t('Please use format HHMM'));\n    }\n  };\n\n  const onBlur = () => {\n    setFormatError('');\n  };\n\n  const errorMessage = formatError ? {\n    message: formatError,\n    type: 'error'\n  } : validationMessage;\n  return React.createElement(FloatingLabelField, _extends({\n    \"data-testid\": \"FieldSelectMultiId\"\n  }, pickFieldProps(props), {\n    id: id,\n    hasValue: getHasValue(props)\n  }), React.createElement(Tooltip, {\n    placement: \"top-end\",\n    content: formatError,\n    isOpen: true,\n    canClose: () => false\n  }, React.createElement(\"div\", null, React.createElement(VisuallyHidden, {\n    \"aria-live\": \"polite\"\n  }, formatError), React.createElement(InputTimeSelect, _extends({}, fieldProps, {\n    \"aria-labelledby\": `labelledby-${id}`,\n    id: id,\n    validationType: errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.type,\n    ref: ref,\n    onChange: onChange,\n    onBlur: onBlur\n  })))));\n})).withConfig({\n  displayName: \"FieldTimeSelect\",\n  componentId: \"sc-18cfbnj-0\"\n})(_t || (_t = _``));","map":{"version":3,"mappings":";;;;;;;AAMA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAGA,SAASC,kBAAT,EAA6BC,cAA7B,EAA6CC,cAA7C,QAAmE,UAAnE;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,KAAT,EAAgBC,cAAhB,QAAsC,gBAAtC;AAEA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,cAAT,QAA+B,yBAA/B;AAMA,OAAO,MAAMC,eAAe,GAAGX,MAAM,CACnCF,UAAU,CAAC,CAACc,KAAD,EAA8BC,GAA9B,KAA6D;EACtE,MAAMC,iBAAiB,GAAGT,cAAc,CAACO,KAAD,CAAxC;EACA,MAAMG,EAAE,GAAGR,KAAK,CAACK,KAAK,CAACG,EAAP,CAAhB;;EACA,wBAAmDb,cAAc,CAACU,KAAD,CAAjE;EAAA,MAAM;IAAEI,QAAQ,EAAEC;EAAZ,IAA0CC,eAAhD;EAAA,MAAoCC,UAAU,uDAA9C;;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM;IAAEuB;EAAF,IAAQd,cAAc,CAAC,iBAAD,CAA5B;;EACA,MAAMQ,QAAQ,GAAIO,KAAc,IAAK;IACnCN,aAAa,SAAbA,iBAAa,WAAbA,GAAa,MAAbA,gBAAa,CAAGM,KAAH,CAAbN;;IACA,IAAIM,KAAJ,EAAW;MACTF,cAAc,CAAC,EAAD,CAAdA;IACD,CAFD,MAEO;MACLA,cAAc,CAACC,CAAC,CAAC,wBAAD,CAAF,CAAdD;IACF;EACD,CAPD;;EASA,MAAMG,MAAM,GAAG,MAAM;IAGnBH,cAAc,CAAC,EAAD,CAAdA;EACD,CAJD;;EAKA,MAAMI,YAAY,GAChBL,WAAW,GAAG;IAAEM,OAAO,EAAEN,WAAX;IAAwBO,IAAI,EAAE;EAA9B,CAAH,GAA6Cb,iBAD1D;EAGA,OACEjB,oBAACI,kBAAD,EAAmB2B;IACjB,eAAY;EADK,GAEbzB,cAAc,CAACS,KAAD,CAFD,EAEQ;IACzBG,EAAE,EAAEA,EADqB;IAEzBc,QAAQ,EAAEzB,WAAW,CAACQ,KAAD;EAFI,CAFR,CAAnB,EAMEf,oBAACS,OAAD,EAAQ;IACNwB,SAAS,EAAC,SADJ;IAENC,OAAO,EAAEX,WAFH;IAGNY,MAAM,EAAE,IAHF;IAINC,QAAQ,EAAE,MAAM;EAJV,CAAR,EAMEpC,iCACEA,oBAACa,cAAD,EAAe;IAAC,aAAU;EAAX,CAAf,EAAoCU,WAApC,CADF,EAEEvB,oBAACY,eAAD,EAAgBmB,aACVT,UADU,EACA;IACd,mBAAkB,cAAaJ,EAAG,EADpB;IAEdA,EAAE,EAAEA,EAFU;IAGdmB,cAAc,EAAET,YAAY,SAAZA,gBAAY,WAAZA,GAAY,MAAZA,eAAY,CAAEE,IAHhB;IAIdd,GAAG,EAAEA,GAJS;IAKdG,QAAQ,EAAEA,QALI;IAMdQ,MAAM,EAAEA;EANM,CADA,CAAhB,CAFF,CANF,CANF,CADF;AA4BD,CAnDS,CADyB,CAANxB,CAqD9BmC,UArD8BnC,CAqD9B;EAAAoC;EAAAC;AAAA,CArD8BrC,EAqD9BsC,aAAC,EAAD,CArD8BtC,CAAxB","names":["React","forwardRef","useState","styled","FloatingLabelField","omitFieldProps","pickFieldProps","getHasValue","useFormContext","Tooltip","useID","useTranslation","InputTimeSelect","VisuallyHidden","FieldTimeSelect","props","ref","validationMessage","id","onChange","propsOnChange","_omitFieldProps","fieldProps","formatError","setFormatError","t","value","onBlur","errorMessage","message","type","_extends","hasValue","placement","content","isOpen","canClose","validationType","withConfig","displayName","componentId","_t"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Fields/FieldTimeSelect/FieldTimeSelect.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Ref } from 'react'\nimport React, { forwardRef, useState } from 'react'\nimport styled from 'styled-components'\nimport type { FloatingLabelFieldProps } from '../Field/types'\nimport type { ValidationMessageProps } from '../../ValidationMessage'\nimport { FloatingLabelField, omitFieldProps, pickFieldProps } from '../Field'\nimport { getHasValue } from '../Field/useFloatingLabel'\nimport { useFormContext } from '../../Form'\nimport { Tooltip } from '../../../Tooltip'\nimport { useID, useTranslation } from '../../../utils'\nimport type { InputTimeSelectProps } from '../../Inputs/InputTimeSelect'\nimport { InputTimeSelect } from '../../Inputs/InputTimeSelect'\nimport { VisuallyHidden } from '../../../VisuallyHidden'\n\nexport interface FieldTimeSelectProps\n  extends FloatingLabelFieldProps,\n    InputTimeSelectProps {}\n\nexport const FieldTimeSelect = styled(\n  forwardRef((props: FieldTimeSelectProps, ref: Ref<HTMLInputElement>) => {\n    const validationMessage = useFormContext(props)\n    const id = useID(props.id)\n    const { onChange: propsOnChange, ...fieldProps } = omitFieldProps(props)\n    const [formatError, setFormatError] = useState('')\n    const { t } = useTranslation('FieldTimeSelect')\n    const onChange = (value?: string) => {\n      propsOnChange?.(value)\n      if (value) {\n        setFormatError('')\n      } else {\n        setFormatError(t('Please use format HHMM'))\n      }\n    }\n\n    const onBlur = () => {\n      // Clear the format errors on blur since the combobox will revert back to\n      // the previously selected value or the new value is it is valid\n      setFormatError('')\n    }\n    const errorMessage = (\n      formatError ? { message: formatError, type: 'error' } : validationMessage\n    ) as ValidationMessageProps\n    return (\n      <FloatingLabelField\n        data-testid=\"FieldSelectMultiId\"\n        {...pickFieldProps(props)}\n        id={id}\n        hasValue={getHasValue(props)}\n      >\n        <Tooltip\n          placement=\"top-end\"\n          content={formatError}\n          isOpen={true}\n          canClose={() => false}\n        >\n          <div>\n            <VisuallyHidden aria-live=\"polite\">{formatError}</VisuallyHidden>\n            <InputTimeSelect\n              {...fieldProps}\n              aria-labelledby={`labelledby-${id}`}\n              id={id}\n              validationType={errorMessage?.type}\n              ref={ref}\n              onChange={onChange}\n              onBlur={onBlur}\n            />\n          </div>\n        </Tooltip>\n      </FloatingLabelField>\n    )\n  })\n)``\n"]},"metadata":{},"sourceType":"module"}