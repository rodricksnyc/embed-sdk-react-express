{"ast":null,"code":"import { useCallback } from 'react';\nexport function useWrapEvent(ourHandler, theirHandler) {\n  return useCallback(event => {\n    theirHandler && theirHandler(event);\n\n    if (!event.defaultPrevented) {\n      return ourHandler(event);\n    }\n  }, [ourHandler, theirHandler]);\n}","map":{"version":3,"mappings":"AAMA,SAASA,WAAT,QAA4B,OAA5B;AAEA,OAAO,SAASC,YAAT,CACLC,UADK,EAELC,YAFK,EAGL;EACA,OAAOH,WAAW,CACfI,KAAQ,IAAK;IACZD,YAAY,IAAIA,YAAY,CAACC,KAAD,CAA5BD;;IACA,IAAI,CAACC,KAAK,CAACC,gBAAX,EAA6B;MAC3B,OAAOH,UAAU,CAACE,KAAD,CAAjB;IACF;EACD,CANe,EAOhB,CAACF,UAAD,EAAaC,YAAb,CAPgB,CAAlB;AASF","names":["useCallback","useWrapEvent","ourHandler","theirHandler","event","defaultPrevented"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useWrapEvent.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { SyntheticEvent } from 'react'\nimport { useCallback } from 'react'\n\nexport function useWrapEvent<E extends SyntheticEvent>(\n  ourHandler: (e: E) => void,\n  theirHandler?: (e: E) => void\n) {\n  return useCallback(\n    (event: E) => {\n      theirHandler && theirHandler(event)\n      if (!event.defaultPrevented) {\n        return ourHandler(event)\n      }\n    },\n    [ourHandler, theirHandler]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}