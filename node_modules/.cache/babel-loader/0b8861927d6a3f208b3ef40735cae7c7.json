{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nconst _excluded = [\"children\"];\nimport React, { Children, Fragment } from 'react';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport { Span } from '../Text';\n\nconst DefaultReplace = props => React.createElement(Span, _extends({\n  fontWeight: \"semiBold\",\n  textDecoration: \"underline\"\n}, props));\n\nconst ReplaceString = _ref2 => {\n  let {\n    children,\n    match,\n    replace: _replace = DefaultReplace\n  } = _ref2;\n  const matchRegExp = new RegExp(`(${escapeRegExp(match)})`, 'gi');\n  const stringArr = children.split(matchRegExp);\n  return React.createElement(React.Fragment, null, stringArr.map((stringItem, index) => React.createElement(Fragment, {\n    key: index\n  }, index % 2 === 1 ? _replace({\n    children: stringItem\n  }) : stringItem || null)));\n};\n\nexport const ReplaceText = _ref => {\n  let {\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (!rest.match) return React.createElement(React.Fragment, null, children);\n  return React.createElement(React.Fragment, null, Children.map(children, child => typeof child === 'string' ? React.createElement(ReplaceString, rest, child) : child));\n};","map":{"version":3,"mappings":";;;AAKA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,SAASC,IAAT,QAAqB,SAArB;;AAWA,MAAMC,cAAgC,GAAIC,KAAmB,IAC3DN,oBAACI,IAAD,EAAKG;EAACC,UAAU,EAAC,UAAZ;EAAuBC,cAAc,EAAC;AAAtC,GAAsDH,KAAtD,CAAL,CADF;;AAKA,MAAMI,aAAa,GAAG,SAImC;EAAA,IAJlC;IACrBC,QADqB;IAErBC,KAFqB;IAGrBC,OAAO,EAAPA,QAAO,GAAGR;EAHW,CAIkC;EAEvD,MAAMS,WAAW,GAAG,IAAIC,MAAJ,CAAY,IAAGZ,YAAY,CAACS,KAAD,CAAQ,GAAnC,EAAuC,IAAvC,CAApB;EACA,MAAMI,SAAS,GAAGL,QAAQ,CAACM,KAATN,CAAeG,WAAfH,CAAlB;EAGA,OACEX,0CACGgB,SAAS,CAACE,GAAVF,CAAc,CAACG,UAAD,EAAqBC,KAArB,KACbpB,oBAACE,QAAD,EAAS;IAACmB,GAAG,EAAED;EAAN,CAAT,EACGA,KAAK,GAAG,CAARA,KAAc,CAAdA,GACGP,QAAO,CAAC;IAAEF,QAAQ,EAAEQ;EAAZ,CAAD,CADVC,GAEGD,UAAU,IAAI,IAHpB,CADDH,CADH,CADF;AAWD,CArBD;;AAsCA,OAAO,MAAMM,WAAW,GAAGC,QAA6C;EAAA,IAA5C;IAAEZ;EAAF,IAAuCY,IAAK;EAAA,IAA7BC,IAAI,4CAAyB;;EACtE,IAAI,CAACA,IAAI,CAACZ,KAAV,EAAiB,OAAOZ,0CAAGW,QAAH,CAAP;EAEjB,OACEX,0CACGC,QAAQ,CAACiB,GAATjB,CAAaU,QAAbV,EAAwBwB,KAAgB,IACvC,OAAOA,KAAP,KAAiB,QAAjB,GACEzB,oBAACU,aAAD,EAAmBc,IAAnB,EAA0BC,KAA1B,CADF,GAGEA,KAJHxB,CADH,CADF;AAWD,CAdM","names":["React","Children","Fragment","escapeRegExp","Span","DefaultReplace","props","_extends","fontWeight","textDecoration","ReplaceString","children","match","replace","matchRegExp","RegExp","stringArr","split","map","stringItem","index","key","ReplaceText","_ref","rest","child"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/ReplaceText/ReplaceText.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { ReactNode } from 'react'\nimport React, { Children, Fragment } from 'react'\nimport escapeRegExp from 'lodash/escapeRegExp'\nimport { Span } from '../Text'\n\nexport type ReplaceProps = {\n  /**\n   * The text that will be highlighted\n   */\n  children: string\n}\n\nexport type ReplaceComponent = (props: ReplaceProps) => ReactNode\n\nconst DefaultReplace: ReplaceComponent = (props: ReplaceProps) => (\n  <Span fontWeight=\"semiBold\" textDecoration=\"underline\" {...props} />\n)\n\n// Wraps matched substrings in the replace component\nconst ReplaceString = ({\n  children,\n  match,\n  replace = DefaultReplace,\n}: Omit<ReplaceTextProps, 'children'> & ReplaceProps) => {\n  // Convert match to capturing, case-insensitive, global RegExp\n  const matchRegExp = new RegExp(`(${escapeRegExp(match)})`, 'gi')\n  const stringArr = children.split(matchRegExp)\n\n  // With capturing RegExp + split, captured elements are included in array\n  return (\n    <>\n      {stringArr.map((stringItem: string, index: number) => (\n        <Fragment key={index}>\n          {index % 2 === 1\n            ? replace({ children: stringItem })\n            : stringItem || null}\n        </Fragment>\n      ))}\n    </>\n  )\n}\n\nexport interface ReplaceTextProps {\n  /**\n   * Any non-text children will be passed along as-is\n   */\n  children?: ReactNode | ReactNode[]\n  /**\n   * A string to search for in the children (case-insensitive, global)\n   */\n  match?: string\n  /**\n   * A component to wrap the matched text. Defaults to a span with semi-bold/underline style.\n   */\n  replace?: ReplaceComponent\n}\n\nexport const ReplaceText = ({ children, ...rest }: ReplaceTextProps) => {\n  if (!rest.match) return <>{children}</>\n\n  return (\n    <>\n      {Children.map(children, (child: ReactNode) =>\n        typeof child === 'string' ? (\n          <ReplaceString {...rest}>{child}</ReplaceString>\n        ) : (\n          child\n        )\n      )}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}