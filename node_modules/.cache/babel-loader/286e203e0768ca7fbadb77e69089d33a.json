{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nlet _ = t => t,\n    _t,\n    _t2,\n    _t3,\n    _t4;\n\nconst _excluded = [\"className\", \"defaultValue\", \"onChange\", \"placeholder\", \"type\", \"value\"];\nimport React, { forwardRef, useState } from 'react';\nimport isFunction from 'lodash/isFunction';\nimport styled from 'styled-components';\nimport { omitStyledProps, typography } from '@looker/design-tokens';\nimport { pickInputProps } from '../InputProps';\nimport { innerInputStyle } from '../innerInputStyle';\nconst InlineInputTextLayout = forwardRef((_ref, ref) => {\n  let {\n    className,\n    defaultValue,\n    onChange,\n    placeholder,\n    type = 'text',\n    value: valueProp\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  const [value, setValueChange] = useState(valueProp || defaultValue || '');\n  const displayValue = isFunction(onChange) ? valueProp : value;\n\n  const handleValueChange = event => {\n    setValueChange(event.currentTarget.value);\n  };\n\n  const handleChange = isFunction(onChange) ? onChange : handleValueChange;\n  return React.createElement(\"span\", {\n    className: className\n  }, React.createElement(StyledInput, _extends({\n    onChange: handleChange,\n    value: displayValue,\n    placeholder: placeholder,\n    type: type,\n    ref: ref\n  }, omitStyledProps(pickInputProps(props)))), React.createElement(StyledText, null, displayValue || placeholder || ' '));\n});\nconst StyledInput = styled.input.withConfig({\n  displayName: \"InlineInputText__StyledInput\",\n  componentId: \"sc-1nk1o3l-0\"\n})(_t || (_t = _`\n  ${0}\n  cursor: ${0};\n  font: inherit;\n  left: 0;\n  padding: 0;\n  position: absolute;\n  text-align: inherit;\n  text-transform: inherit;\n  top: 0;\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    appearance: none;\n  }\n  &[type='number'] {\n    appearance: textfield;\n  }\n`), innerInputStyle, _ref2 => {\n  let {\n    readOnly,\n    disabled\n  } = _ref2;\n  return readOnly || disabled ? 'not-allowed' : undefined;\n});\nconst StyledText = styled.span.withConfig({\n  displayName: \"InlineInputText__StyledText\",\n  componentId: \"sc-1nk1o3l-1\"\n})(_t2 || (_t2 = _`\n  align-self: center;\n  color: transparent;\n  line-height: inherit;\n  /* max-width & overflow keep this span from blocking the x button\n  in InputSearch, etc, with autoResize and maxWidth */\n  max-width: 100%;\n  overflow: hidden;\n  text-align: inherit;\n  white-space: pre;\n`));\nexport const InlineInputTextBase = styled(InlineInputTextLayout).withConfig({\n  displayName: \"InlineInputText__InlineInputTextBase\",\n  componentId: \"sc-1nk1o3l-2\"\n})(_t3 || (_t3 = _`\n  display: inline-flex;\n  justify-content: center;\n  min-width: 2rem;\n  position: relative;\n`));\nexport const InlineInputText = styled(InlineInputTextBase).withConfig({\n  displayName: \"InlineInputText\",\n  componentId: \"sc-1nk1o3l-3\"\n})(_t4 || (_t4 = _`\n  ${0}\n  border: none;\n  border-bottom: 1px dashed;\n  border-bottom-color: ${0};\n  color: inherit;\n  flex-direction: column;\n  max-width: 100%;\n  overflow: hidden;\n  text-align: inherit;\n\n  :focus,\n  :hover {\n    background-color: ${0};\n    border-bottom-color: ${0};\n    outline: none;\n  }\n\n  :focus {\n    border-bottom-style: solid;\n  }\n\n  :disabled,\n  :hover {\n    border-bottom-color: ${0};\n  }\n\n  :hover {\n    border-bottom-color: ${0};\n  }\n\n  input:disabled {\n    color: ${0};\n    -webkit-text-fill-color: ${0};\n  }\n`), typography, _ref3 => {\n  let {\n    theme,\n    underlineOnlyOnHover,\n    simple,\n    readOnly\n  } = _ref3;\n  return underlineOnlyOnHover || simple || readOnly ? 'transparent' : theme.colors.ui3;\n}, _ref4 => {\n  let {\n    theme\n  } = _ref4;\n  return theme.colors.ui1;\n}, _ref5 => {\n  let {\n    theme\n  } = _ref5;\n  return theme.colors.key;\n}, _ref6 => {\n  let {\n    theme\n  } = _ref6;\n  return theme.colors.text1;\n}, _ref7 => {\n  let {\n    readOnly\n  } = _ref7;\n  return readOnly && 'transparent';\n}, _ref8 => {\n  let {\n    theme\n  } = _ref8;\n  return theme.colors.text1;\n}, _ref9 => {\n  let {\n    theme\n  } = _ref9;\n  return theme.colors.text1;\n});","map":{"version":3,"mappings":"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","names":["React","forwardRef","useState","isFunction","styled","omitStyledProps","typography","pickInputProps","innerInputStyle","InlineInputTextLayout","ref","className","defaultValue","onChange","placeholder","type","value","valueProp","_ref","props","setValueChange","displayValue","handleValueChange","event","currentTarget","handleChange","StyledInput","_extends","StyledText","input","withConfig","displayName","componentId","_t","readOnly","disabled","undefined","span","_t2","InlineInputTextBase","_t3","InlineInputText","_t4","theme","underlineOnlyOnHover","simple","colors","ui3","ui1","key","text1"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Inputs/InlineInputText/InlineInputText.tsx"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { ChangeEvent, Ref } from 'react'\nimport React, { forwardRef, useState } from 'react'\nimport isFunction from 'lodash/isFunction'\nimport styled from 'styled-components'\nimport type { TypographyProps } from '@looker/design-tokens'\nimport { omitStyledProps, typography } from '@looker/design-tokens'\nimport type { InputProps, InputTextTypeProps } from '../InputProps'\nimport { pickInputProps } from '../InputProps'\nimport { innerInputStyle } from '../innerInputStyle'\n\nexport interface InlineInputTextProps\n  extends TypographyProps,\n    Omit<InputProps, 'type'>,\n    InputTextTypeProps {\n  underlineOnlyOnHover?: boolean\n  simple?: boolean\n}\n\nconst InlineInputTextLayout = forwardRef(\n  (\n    {\n      className,\n      defaultValue,\n      onChange,\n      placeholder,\n      type = 'text',\n      value: valueProp,\n      ...props\n    }: InlineInputTextProps,\n    ref: Ref<HTMLInputElement>\n  ) => {\n    const [value, setValueChange] = useState(valueProp || defaultValue || '')\n\n    const displayValue = isFunction(onChange) ? valueProp : value\n\n    const handleValueChange = (event: ChangeEvent<HTMLInputElement>) => {\n      setValueChange(event.currentTarget.value)\n    }\n\n    const handleChange = isFunction(onChange) ? onChange : handleValueChange\n\n    return (\n      <span className={className}>\n        <StyledInput\n          onChange={handleChange}\n          value={displayValue}\n          placeholder={placeholder}\n          type={type}\n          ref={ref}\n          {...omitStyledProps(pickInputProps(props))}\n        />\n        <StyledText>{displayValue || placeholder || ' '}</StyledText>\n      </span>\n    )\n  }\n)\n\nconst StyledInput = styled.input`\n  ${innerInputStyle}\n  cursor: ${({ readOnly, disabled }) =>\n    readOnly || disabled ? 'not-allowed' : undefined};\n  font: inherit;\n  left: 0;\n  padding: 0;\n  position: absolute;\n  text-align: inherit;\n  text-transform: inherit;\n  top: 0;\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    appearance: none;\n  }\n  &[type='number'] {\n    appearance: textfield;\n  }\n`\n\nconst StyledText = styled.span`\n  align-self: center;\n  color: transparent;\n  line-height: inherit;\n  /* max-width & overflow keep this span from blocking the x button\n  in InputSearch, etc, with autoResize and maxWidth */\n  max-width: 100%;\n  overflow: hidden;\n  text-align: inherit;\n  white-space: pre;\n`\n\nexport const InlineInputTextBase = styled(InlineInputTextLayout)`\n  display: inline-flex;\n  justify-content: center;\n  min-width: 2rem;\n  position: relative;\n`\n\nexport const InlineInputText = styled(InlineInputTextBase)`\n  ${typography}\n  border: none;\n  border-bottom: 1px dashed;\n  border-bottom-color: ${({ theme, underlineOnlyOnHover, simple, readOnly }) =>\n    underlineOnlyOnHover || simple || readOnly\n      ? 'transparent'\n      : theme.colors.ui3};\n  color: inherit;\n  flex-direction: column;\n  max-width: 100%;\n  overflow: hidden;\n  text-align: inherit;\n\n  :focus,\n  :hover {\n    background-color: ${({ theme }) => theme.colors.ui1};\n    border-bottom-color: ${({ theme }) => theme.colors.key};\n    outline: none;\n  }\n\n  :focus {\n    border-bottom-style: solid;\n  }\n\n  :disabled,\n  :hover {\n    border-bottom-color: ${({ theme }) => theme.colors.text1};\n  }\n\n  :hover {\n    border-bottom-color: ${({ readOnly }) => readOnly && 'transparent'};\n  }\n\n  input:disabled {\n    color: ${({ theme }) => theme.colors.text1};\n    -webkit-text-fill-color: ${({ theme }) => theme.colors.text1};\n  }\n`\n"]},"metadata":{},"sourceType":"module"}