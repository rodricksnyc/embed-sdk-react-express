{"ast":null,"code":"import throttle from 'lodash/throttle';\nimport { useEffect, useState } from 'react';\nexport const useScrollPosition = element => {\n  const [scrollPosition, setScrollPosition] = useState(0);\n  useEffect(() => {\n    const scrollListener = throttle(() => {\n      if (element) {\n        setScrollPosition(element.scrollTop);\n      }\n    }, 50, {\n      leading: true,\n      trailing: true\n    });\n\n    if (element) {\n      element.addEventListener('scroll', scrollListener);\n      scrollListener();\n    }\n\n    return () => {\n      element && element.removeEventListener('scroll', scrollListener);\n      setScrollPosition(0);\n    };\n  }, [element]);\n  return scrollPosition;\n};","map":{"version":3,"mappings":"AAKA,OAAOA,QAAP,MAAqB,iBAArB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAMA,OAAO,MAAMC,iBAAiB,GAAIC,OAA2B,IAAK;EAChE,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCJ,QAAQ,CAAC,CAAD,CAApD;EACAD,SAAS,CAAC,MAAM;IACd,MAAMM,cAAc,GAAGP,QAAQ,CAC7B,MAAM;MACJ,IAAII,OAAJ,EAAa;QACXE,iBAAiB,CAACF,OAAO,CAACI,SAAT,CAAjBF;MACF;IACD,CAL4B,EAM7B,EAN6B,EAO7B;MAAEG,OAAO,EAAE,IAAX;MAAiBC,QAAQ,EAAE;IAA3B,CAP6B,CAA/B;;IAUA,IAAIN,OAAJ,EAAa;MACXA,OAAO,CAACO,gBAARP,CAAyB,QAAzBA,EAAmCG,cAAnCH;MACAG,cAAc;IAChB;;IAEA,OAAO,MAAM;MACXH,OAAO,IAAIA,OAAO,CAACQ,mBAARR,CAA4B,QAA5BA,EAAsCG,cAAtCH,CAAXA;MACAE,iBAAiB,CAAC,CAAD,CAAjBA;IACD,CAHD;EAID,CApBQ,EAoBN,CAACF,OAAD,CApBM,CAATH;EAsBA,OAAOI,cAAP;AACD,CAzBM","names":["throttle","useEffect","useState","useScrollPosition","element","scrollPosition","setScrollPosition","scrollListener","scrollTop","leading","trailing","addEventListener","removeEventListener"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useScrollPosition.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport throttle from 'lodash/throttle'\nimport { useEffect, useState } from 'react'\n\n/**\n * Returns the scroll top position of an element\n * @param element the element that is being scrolled\n */\nexport const useScrollPosition = (element: HTMLElement | null) => {\n  const [scrollPosition, setScrollPosition] = useState(0)\n  useEffect(() => {\n    const scrollListener = throttle(\n      () => {\n        if (element) {\n          setScrollPosition(element.scrollTop)\n        }\n      },\n      50,\n      { leading: true, trailing: true }\n    )\n\n    if (element) {\n      element.addEventListener('scroll', scrollListener)\n      scrollListener()\n    }\n\n    return () => {\n      element && element.removeEventListener('scroll', scrollListener)\n      setScrollPosition(0)\n    }\n  }, [element])\n\n  return scrollPosition\n}\n"]},"metadata":{},"sourceType":"module"}