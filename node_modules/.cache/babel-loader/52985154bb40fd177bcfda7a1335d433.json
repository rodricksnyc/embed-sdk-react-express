{"ast":null,"code":"import { useState } from 'react';\nimport { useWrapEvent } from '../../utils';\nexport const useTreeHandlers = props => {\n  const [hovered, setHovered] = useState(false);\n\n  const onBlur = event => {\n    const nextFocusTarget = event.relatedTarget;\n\n    if (nextFocusTarget && !event.currentTarget.contains(nextFocusTarget)) {\n      setHovered(false);\n    }\n  };\n\n  const onFocus = useWrapEvent(useWrapEvent(() => setHovered(true), props.onFocus));\n  const onMouseEnter = useWrapEvent(() => setHovered(true), props.onMouseEnter);\n  const onMouseLeave = useWrapEvent(() => setHovered(false), props.onMouseLeave);\n  return {\n    contentHandlers: {\n      onFocus\n    },\n    hovered,\n    wrapperHandlers: {\n      onBlur,\n      onMouseEnter,\n      onMouseLeave\n    }\n  };\n};","map":{"version":3,"mappings":"AAOA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,YAAT,QAA6B,aAA7B;AAEA,OAAO,MAAMC,eAAe,GAC1BC,KAGC,IACE;EACH,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;;EAGA,MAAMM,MAAM,GAAIC,KAA8B,IAAK;IACjD,MAAMC,eAAe,GAAGD,KAAK,CAACE,aAA9B;;IAEA,IAAID,eAAe,IAAI,CAACD,KAAK,CAACG,aAANH,CAAoBI,QAApBJ,CAA6BC,eAA7BD,CAAxB,EAAuE;MACrEF,UAAU,CAAC,KAAD,CAAVA;IACF;EACD,CAND;;EAOA,MAAMO,OAAO,GAAGX,YAAY,CAC1BA,YAAY,CAAC,MAAMI,UAAU,CAAC,IAAD,CAAjB,EAAyBF,KAAK,CAACS,OAA/B,CADc,CAA5B;EAIA,MAAMC,YAAY,GAAGZ,YAAY,CAAC,MAAMI,UAAU,CAAC,IAAD,CAAjB,EAAyBF,KAAK,CAACU,YAA/B,CAAjC;EACA,MAAMC,YAAY,GAAGb,YAAY,CAAC,MAAMI,UAAU,CAAC,KAAD,CAAjB,EAA0BF,KAAK,CAACW,YAAhC,CAAjC;EAEA,OAAO;IACLC,eAAe,EAAE;MACfH;IADe,CADZ;IAILR,OAJK;IAKLY,eAAe,EAAE;MACfV,MADe;MAEfO,YAFe;MAGfC;IAHe;EALZ,CAAP;AAWD,CAlCM","names":["useState","useWrapEvent","useTreeHandlers","props","hovered","setHovered","onBlur","event","nextFocusTarget","relatedTarget","currentTarget","contains","onFocus","onMouseEnter","onMouseLeave","contentHandlers","wrapperHandlers"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Tree/utils/useTreeHandlers.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { CompatibleHTMLProps } from '@looker/design-tokens'\nimport type { FocusEvent } from 'react'\nimport { useState } from 'react'\nimport { useWrapEvent } from '../../utils'\n\nexport const useTreeHandlers = (\n  props: Pick<\n    CompatibleHTMLProps<HTMLElement>,\n    'onFocus' | 'onMouseEnter' | 'onMouseLeave'\n  >\n) => {\n  const [hovered, setHovered] = useState(false)\n\n  // This is needed so that hover disclosed elements don't get lost during keyboard nav\n  const onBlur = (event: FocusEvent<HTMLElement>) => {\n    const nextFocusTarget = event.relatedTarget\n\n    if (nextFocusTarget && !event.currentTarget.contains(nextFocusTarget)) {\n      setHovered(false)\n    }\n  }\n  const onFocus = useWrapEvent(\n    useWrapEvent(() => setHovered(true), props.onFocus)\n  )\n\n  const onMouseEnter = useWrapEvent(() => setHovered(true), props.onMouseEnter)\n  const onMouseLeave = useWrapEvent(() => setHovered(false), props.onMouseLeave)\n\n  return {\n    contentHandlers: {\n      onFocus,\n    },\n    hovered,\n    wrapperHandlers: {\n      onBlur,\n      onMouseEnter,\n      onMouseLeave,\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}