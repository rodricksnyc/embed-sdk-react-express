{"ast":null,"code":"import isValid from 'date-fns/isValid';\nimport en from 'date-fns/locale/en-US';\nimport parse from 'date-fns/parse';\nexport const formatYear = date => {\n  const year = date.getFullYear();\n\n  if (year < 100) {\n    return year + 2000;\n  } else if (year < 1000) {\n    return parseInt(`${year}0`);\n  }\n\n  return year;\n};\nexport const parseDateFromString = function (value) {\n  let locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : en;\n  let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'P';\n  const parsedValue = parse(value, format, new Date(), {\n    locale\n  });\n  parsedValue.setFullYear(formatYear(parsedValue));\n  return isValid(parsedValue) && parsedValue;\n};","map":{"version":3,"mappings":"AAKA,OAAOA,OAAP,MAAoB,kBAApB;AACA,OAAOC,EAAP,MAAe,uBAAf;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAGA,OAAO,MAAMC,UAAU,GAAIC,IAAU,IAAa;EAChD,MAAMC,IAAI,GAAGD,IAAI,CAACE,WAALF,EAAb;;EACA,IAAIC,IAAI,GAAG,GAAX,EAAgB;IAEd,OAAOA,IAAI,GAAG,IAAd;EACD,CAHD,MAGO,IAAIA,IAAI,GAAG,IAAX,EAAiB;IAEtB,OAAOE,QAAQ,CAAE,GAAEF,IAAK,GAAT,CAAf;EACF;;EACA,OAAOA,IAAP;AACD,CAVM;AAYP,OAAO,MAAMG,mBAAmB,GAAG,UACjCC,KADiC,EAIhB;EAAA,IAFjBC,MAEiB,uEAFAT,EAEA;EAAA,IADjBU,MACiB,uEADc,GACd;EAEjB,MAAMC,WAAW,GAAGV,KAAK,CAACO,KAAD,EAAQE,MAAR,EAAgB,IAAIE,IAAJ,EAAhB,EAA4B;IACnDH;EADmD,CAA5B,CAAzB;EAIAE,WAAW,CAACE,WAAZF,CAAwBT,UAAU,CAACS,WAAD,CAAlCA;EAEA,OAAOZ,OAAO,CAACY,WAAD,CAAPZ,IAAwBY,WAA/B;AACD,CAbM","names":["isValid","en","parse","formatYear","date","year","getFullYear","parseInt","parseDateFromString","value","locale","format","parsedValue","Date","setFullYear"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Calendar/utils/parseDateFromString.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport isValid from 'date-fns/isValid'\nimport en from 'date-fns/locale/en-US'\nimport parse from 'date-fns/parse'\nimport type { DateFormats } from './formatDateString'\n\nexport const formatYear = (date: Date): number => {\n  const year = date.getFullYear()\n  if (year < 100) {\n    // convert 2-digit year (2/2/20) to 4-digit year (2/2/2020)\n    return year + 2000\n  } else if (year < 1000) {\n    // convert 3-digit partial-year (2/2/201) to 4-digit year (2/2/2010)\n    return parseInt(`${year}0`)\n  }\n  return year\n}\n\nexport const parseDateFromString = (\n  value: string,\n  locale: Locale = en,\n  format: DateFormats | string = 'P'\n): Date | false => {\n  // Date format 'P' represents localized dates in date-fns\n  const parsedValue = parse(value, format, new Date(), {\n    locale,\n  })\n\n  parsedValue.setFullYear(formatYear(parsedValue))\n\n  return isValid(parsedValue) && parsedValue\n}\n"]},"metadata":{},"sourceType":"module"}