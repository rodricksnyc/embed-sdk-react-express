{"ast":null,"code":"export const partitionAriaProps = props => {\n  const aria = {};\n  const remainder = {};\n  Object.entries(props).forEach(_ref => {\n    let [key, value] = _ref;\n    return key.startsWith('aria-') ? aria[key] = value : remainder[key] = value;\n  });\n  return [aria, remainder];\n};","map":{"version":3,"mappings":"AAcA,OAAO,MAAMA,kBAAkB,GAC7BC,KAAQ,IACL;EACH,MAAMC,IAA+B,GAAG,EAAxC;EACA,MAAMC,SAAoC,GAAG,EAA7C;EAEAC,MAAM,CAACC,OAAPD,CAAeH,KAAfG,EAAsBE,OAAtBF,CAA8B;IAAA,IAAC,CAACG,GAAD,EAAMC,KAAN,CAAD;IAAA,OAC5BD,GAAG,CAACE,UAAJF,CAAe,OAAfA,IAA2BL,IAAI,CAACK,GAAD,CAAJL,GAAYM,KAAvCD,GAAiDJ,SAAS,CAACI,GAAD,CAATJ,GAAiBK,KADtC;EAAA,CAA9BJ;EAIA,OAAO,CAACF,IAAD,EAAOC,SAAP,CAAP;AACD,CAXM","names":["partitionAriaProps","props","aria","remainder","Object","entries","forEach","key","value","startsWith"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/partitionAriaProps.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type React from 'react'\n\n/**\n * Partitions an object into 2 objects, the first containing all aria related prop keys and their respective values\n * and the second containing all other prop keys and their respective values\n *\n * @param {T extends React.AriaAttribute} props\n * @returns {Array} A tuple where the first object contains all aria related props and the second object contains the remaining props\n */\nexport const partitionAriaProps = <T extends React.AriaAttributes>(\n  props: T\n) => {\n  const aria: { [key: string]: string } = {}\n  const remainder: { [key: string]: string } = {}\n\n  Object.entries(props).forEach(([key, value]) =>\n    key.startsWith('aria-') ? (aria[key] = value) : (remainder[key] = value)\n  )\n\n  return [aria, remainder]\n}\n"]},"metadata":{},"sourceType":"module"}