{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"theme\"];\n\nlet _ = t => t,\n    _t;\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { rippleStyle } from '../../../Ripple';\n\nconst getColor = _ref2 => {\n  let {\n    on,\n    validationType\n  } = _ref2;\n\n  if (on) {\n    if (validationType === 'error') return 'critical';\n    return 'key';\n  }\n\n  return 'field';\n};\n\nexport const Handle = styled(_ref3 => {\n  let {\n    className,\n    style\n  } = _ref3;\n  return React.createElement(\"div\", {\n    className: className,\n    style: style,\n    \"data-testid\": \"handle\"\n  }, React.createElement(\"div\", null));\n}).withConfig({\n  displayName: \"Handle\",\n  componentId: \"sc-1qvjj89-0\"\n})(_t || (_t = _`\n  ${0}\n  height: ${0};\n  left: 0;\n  padding: ${0};\n  position: absolute;\n  top: 0;\n  transform: ${0};\n  transition: ${0}ms;\n  width: ${0};\n  div {\n    background: ${0};\n    border-radius: 50%;\n    box-shadow: ${0};\n    height: 100%;\n    /* This nested relative position div allows the handle\n    to appear on top of the ripple bg */\n    position: relative;\n    width: 100%;\n  }\n`), rippleStyle, _ref4 => {\n  let {\n    theme\n  } = _ref4;\n  return theme.space.u6;\n}, _ref5 => {\n  let {\n    theme\n  } = _ref5;\n  return theme.space.u05;\n}, _ref6 => {\n  let {\n    on,\n    theme\n  } = _ref6;\n  return on ? `translateX(${theme.space.u4})` : undefined;\n}, _ref7 => {\n  let {\n    theme\n  } = _ref7;\n  return theme.transitions.rapid;\n}, _ref8 => {\n  let {\n    theme\n  } = _ref8;\n  return theme.space.u6;\n}, _ref => {\n  let {\n    theme\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return theme.colors[getColor(props)];\n}, _ref9 => {\n  let {\n    theme\n  } = _ref9;\n  return theme.elevations.plus1;\n});","map":{"version":3,"mappings":";;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,QAA4B,iBAA5B;;AAGA,MAAMC,QAAQ,GAAG,SAA8D;EAAA,IAA7D;IAAEC,EAAF;IAAMC;EAAN,CAA6D;;EAC7E,IAAID,EAAJ,EAAQ;IACN,IAAIC,cAAc,KAAK,OAAvB,EAAgC,OAAO,UAAP;IAChC,OAAO,KAAP;EACF;;EACA,OAAO,OAAP;AACD,CAND;;AAQA,OAAO,MAAMC,MAAM,GAAGL,MAAM,CAAC;EAAA,IAAC;IAAEM,SAAF;IAAaC;EAAb,CAAD;EAAA,OAC3BR;IAAKO,SAAS,EAAEA,SAAhB;IAA2BC,KAAK,EAAEA,KAAlC;IAAyC,eAAY;EAArD,GACER,gCADF,CAD2B;AAAA,CAAD,CAANC,CAIpBQ,UAJoBR,CAIpB;EAAAS;EAAAC;AAAA,CAJoBV,EAIpBW,aAAC;AACH,IAAE,CAAc;AAChB,YAAU,CAAgC;AAC1C;AACA,aAAW,CAAiC;AAC5C;AACA;AACA,eAAa,CACwC;AACrD,gBAAc,CAAyC;AACvD,WAAS,CAAgC;AACzC;AACA,kBAAgB,CAAyD;AACzE;AACA,kBAAgB,CAAwC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,CArBE,CAJoBX,EAKlBC,WALkBD,EAMV;EAAA,IAAC;IAAEY;EAAF,CAAD;EAAA,OAAeA,KAAK,CAACC,KAAND,CAAYE,EAA3B;AAAA,CANUd,EAQT;EAAA,IAAC;IAAEY;EAAF,CAAD;EAAA,OAAeA,KAAK,CAACC,KAAND,CAAYG,GAA3B;AAAA,CARSf,EAWP;EAAA,IAAC;IAAEG,EAAF;IAAMS;EAAN,CAAD;EAAA,OACXT,EAAE,GAAI,cAAaS,KAAK,CAACC,KAAND,CAAYI,EAAG,GAAhC,GAAqCC,SAD5B;AAAA,CAXOjB,EAaN;EAAA,IAAC;IAAEY;EAAF,CAAD;EAAA,OAAeA,KAAK,CAACM,WAANN,CAAkBO,KAAjC;AAAA,CAbMnB,EAcX;EAAA,IAAC;IAAEY;EAAF,CAAD;EAAA,OAAeA,KAAK,CAACC,KAAND,CAAYE,EAA3B;AAAA,CAdWd,EAgBJoB;EAAA,IAAC;IAAER;EAAF,IAAmBQ,IAApB;EAAA,IAAaC,KAAK,4CAAlB;;EAAkB,OAAOT,KAAK,CAACU,MAANV,CAAaV,QAAQ,CAACmB,KAAD,CAArBT,CAAP;AAAoC,CAhBlDZ,EAkBJ;EAAA,IAAC;IAAEY;EAAF,CAAD;EAAA,OAAeA,KAAK,CAACW,UAANX,CAAiBY,KAAhC;AAAA,CAlBIxB,CAAf","names":["React","styled","rippleStyle","getColor","on","validationType","Handle","className","style","withConfig","displayName","componentId","_t","theme","space","u6","u05","u4","undefined","transitions","rapid","_ref","props","colors","elevations","plus1"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Inputs/ToggleSwitch/Handle.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Colors } from '@looker/design-tokens'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { rippleStyle } from '../../../Ripple'\nimport type { SwitchElementProps } from './types'\n\nconst getColor = ({ on, validationType }: SwitchElementProps): keyof Colors => {\n  if (on) {\n    if (validationType === 'error') return 'critical'\n    return 'key'\n  }\n  return 'field'\n}\n\nexport const Handle = styled(({ className, style }: SwitchElementProps) => (\n  <div className={className} style={style} data-testid=\"handle\">\n    <div />\n  </div>\n))`\n  ${rippleStyle}\n  height: ${({ theme }) => theme.space.u6};\n  left: 0;\n  padding: ${({ theme }) => theme.space.u05};\n  position: absolute;\n  top: 0;\n  transform: ${({ on, theme }) =>\n    on ? `translateX(${theme.space.u4})` : undefined};\n  transition: ${({ theme }) => theme.transitions.rapid}ms;\n  width: ${({ theme }) => theme.space.u6};\n  div {\n    background: ${({ theme, ...props }) => theme.colors[getColor(props)]};\n    border-radius: 50%;\n    box-shadow: ${({ theme }) => theme.elevations.plus1};\n    height: 100%;\n    /* This nested relative position div allows the handle\n    to appear on top of the ripple bg */\n    position: relative;\n    width: 100%;\n  }\n`\n"]},"metadata":{},"sourceType":"module"}