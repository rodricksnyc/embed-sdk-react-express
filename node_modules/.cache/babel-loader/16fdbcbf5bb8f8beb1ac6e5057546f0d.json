{"ast":null,"code":"import { useCallback } from 'react';\nimport { useWrapEvent } from '../utils';\nexport const rippleHandlerKeys = ['onBlur', 'onFocus', 'onKeyDown', 'onKeyUp', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseUp'];\nexport const useRippleHandlers = (_ref, currentHandlers, disabled) => {\n  let {\n    startBG,\n    endBG,\n    startFG,\n    endFG\n  } = _ref;\n  const handleKeyDown = useCallback(e => {\n    switch (e.key) {\n      case 'Enter':\n      case ' ':\n        startFG();\n        break;\n    }\n  }, [startFG]);\n  const handleMouseLeave = useCallback(() => {\n    endBG();\n    endFG();\n  }, [endFG, endBG]);\n  const wrappedCallbacks = {\n    onBlur: useWrapEvent(endBG, currentHandlers.onBlur),\n    onFocus: useWrapEvent(startBG, currentHandlers.onFocus),\n    onKeyDown: useWrapEvent(handleKeyDown, currentHandlers.onKeyDown),\n    onKeyUp: useWrapEvent(endFG, currentHandlers.onKeyUp),\n    onMouseDown: useWrapEvent(startFG, currentHandlers.onMouseDown),\n    onMouseEnter: useWrapEvent(startBG, currentHandlers.onMouseEnter),\n    onMouseLeave: useWrapEvent(handleMouseLeave, currentHandlers.onMouseLeave),\n    onMouseUp: useWrapEvent(endFG, currentHandlers.onMouseUp)\n  };\n  return disabled ? {} : wrappedCallbacks;\n};","map":{"version":3,"mappings":"AAMA,SAASA,WAAT,QAA4B,OAA5B;AAEA,SAASC,YAAT,QAA6B,UAA7B;AAGA,OAAO,MAAMC,iBAAiB,GAAG,CAC/B,QAD+B,EAE/B,SAF+B,EAG/B,WAH+B,EAI/B,SAJ+B,EAK/B,aAL+B,EAM/B,cAN+B,EAO/B,cAP+B,EAQ/B,WAR+B,CAA1B;AAuBP,OAAO,MAAMC,iBAAiB,GAAG,OAE/BC,eAF+B,EAG/BC,QAH+B,KAIT;EAAA,IAHtB;IAAEC,OAAF;IAAWC,KAAX;IAAkBC,OAAlB;IAA2BC;EAA3B,CAGsB;EACtB,MAAMC,aAAa,GAAGV,WAAW,CAC9BW,CAAgB,IAAK;IACpB,QAAQA,CAAC,CAACC,GAAV;MAEE,KAAK,OAAL;MACA,KAAK,GAAL;QACEJ,OAAO;QACP;IALJ;EAOD,CAT8B,EAU/B,CAACA,OAAD,CAV+B,CAAjC;EAaA,MAAMK,gBAAgB,GAAGb,WAAW,CAAC,MAAM;IACzCO,KAAK;IAELE,KAAK;EACN,CAJmC,EAIjC,CAACA,KAAD,EAAQF,KAAR,CAJiC,CAApC;EAMA,MAAMO,gBAAgB,GAAG;IACvBC,MAAM,EAAEd,YAAY,CAACM,KAAD,EAAQH,eAAe,CAACW,MAAxB,CADG;IAEvBC,OAAO,EAAEf,YAAY,CAACK,OAAD,EAAUF,eAAe,CAACY,OAA1B,CAFE;IAGvBC,SAAS,EAAEhB,YAAY,CAACS,aAAD,EAAgBN,eAAe,CAACa,SAAhC,CAHA;IAIvBC,OAAO,EAAEjB,YAAY,CAACQ,KAAD,EAAQL,eAAe,CAACc,OAAxB,CAJE;IAKvBC,WAAW,EAAElB,YAAY,CAACO,OAAD,EAAUJ,eAAe,CAACe,WAA1B,CALF;IAMvBC,YAAY,EAAEnB,YAAY,CAACK,OAAD,EAAUF,eAAe,CAACgB,YAA1B,CANH;IAOvBC,YAAY,EAAEpB,YAAY,CAACY,gBAAD,EAAmBT,eAAe,CAACiB,YAAnC,CAPH;IAQvBC,SAAS,EAAErB,YAAY,CAACQ,KAAD,EAAQL,eAAe,CAACkB,SAAxB;EARA,CAAzB;EAWA,OAAOjB,QAAQ,GAAG,EAAH,GAAQS,gBAAvB;AACD,CApCM","names":["useCallback","useWrapEvent","rippleHandlerKeys","useRippleHandlers","currentHandlers","disabled","startBG","endBG","startFG","endFG","handleKeyDown","e","key","handleMouseLeave","wrappedCallbacks","onBlur","onFocus","onKeyDown","onKeyUp","onMouseDown","onMouseEnter","onMouseLeave","onMouseUp"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Ripple/useRippleHandlers.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { KeyboardEvent } from 'react'\nimport { useCallback } from 'react'\nimport type { CompatibleHTMLProps } from '@looker/design-tokens'\nimport { useWrapEvent } from '../utils'\nimport type { RippleCallbacks } from './types'\n\nexport const rippleHandlerKeys = [\n  'onBlur',\n  'onFocus',\n  'onKeyDown',\n  'onKeyUp',\n  'onMouseDown',\n  'onMouseEnter',\n  'onMouseLeave',\n  'onMouseUp',\n] as const\n\nexport type RippleHandlers<E extends HTMLElement> = Pick<\n  CompatibleHTMLProps<E>,\n  typeof rippleHandlerKeys[number]\n>\n\n/**\n *\n * @param callbacks from useRipple, start and end functions for foreground and background\n * @param currentHandlers existing event handlers for the element will be wrapped\n * @param disabled\n * @returns wrapped event handlers\n */\nexport const useRippleHandlers = <E extends HTMLElement>(\n  { startBG, endBG, startFG, endFG }: RippleCallbacks,\n  currentHandlers: RippleHandlers<E>,\n  disabled?: boolean\n): RippleHandlers<E> => {\n  const handleKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      switch (e.key) {\n        // Only start the ripple for enter or space key\n        case 'Enter':\n        case ' ':\n          startFG()\n          break\n      }\n    },\n    [startFG]\n  )\n\n  const handleMouseLeave = useCallback(() => {\n    endBG()\n    // If the user hovers off of the element while pressing, end the ripple\n    endFG()\n  }, [endFG, endBG])\n\n  const wrappedCallbacks = {\n    onBlur: useWrapEvent(endBG, currentHandlers.onBlur),\n    onFocus: useWrapEvent(startBG, currentHandlers.onFocus),\n    onKeyDown: useWrapEvent(handleKeyDown, currentHandlers.onKeyDown),\n    onKeyUp: useWrapEvent(endFG, currentHandlers.onKeyUp),\n    onMouseDown: useWrapEvent(startFG, currentHandlers.onMouseDown),\n    onMouseEnter: useWrapEvent(startBG, currentHandlers.onMouseEnter),\n    onMouseLeave: useWrapEvent(handleMouseLeave, currentHandlers.onMouseLeave),\n    onMouseUp: useWrapEvent(endFG, currentHandlers.onMouseUp),\n  }\n\n  return disabled ? {} : wrappedCallbacks\n}\n"]},"metadata":{},"sourceType":"module"}