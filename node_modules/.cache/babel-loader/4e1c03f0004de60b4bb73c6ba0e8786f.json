{"ast":null,"code":"import { useEffect, useRef } from 'react';\nexport function useReadOnlyWarn(name, value, onChange) {\n  const unintentionalReadOnly = useRef(false);\n  useEffect(() => {\n    if (value && !onChange) {\n      console.error(`Warning: Failed prop type: You provided a \\`value\\` prop to <${name} /> without an \\`onChange\\` handler. This will render a read-only field. If the field should be mutable use \\`defaultValue\\` instead. Otherwise, please provide an \\`onChange\\` callback.`);\n      unintentionalReadOnly.current = true;\n    }\n  }, [value, onChange, name]);\n  return unintentionalReadOnly.current;\n}","map":{"version":3,"mappings":"AAIA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAGA,OAAO,SAASC,eAAT,CAAgCC,IAAhC,EAA8CC,KAA9C,EAAwDC,QAAxD,EAAsE;EAC3E,MAAMC,qBAAqB,GAAGL,MAAM,CAAC,KAAD,CAApC;EACAD,SAAS,CAAC,MAAM;IACd,IAAII,KAAK,IAAI,CAACC,QAAd,EAAwB;MAEtBE,OAAO,CAACC,KAARD,CACG,gEAA+DJ,IAAK,2LADvEI;MAGAD,qBAAqB,CAACG,OAAtBH,GAAgC,IAAhCA;IACF;EACD,CARQ,EAQN,CAACF,KAAD,EAAQC,QAAR,EAAkBF,IAAlB,CARM,CAATH;EASA,OAAOM,qBAAqB,CAACG,OAA7B;AACF","names":["useEffect","useRef","useReadOnlyWarn","name","value","onChange","unintentionalReadOnly","console","error","current"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useReadOnlyWarn.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { useEffect, useRef } from 'react'\n\n// render a console warning if developers pass in a value without a change listener\nexport function useReadOnlyWarn<V, CB>(name: string, value: V, onChange: CB) {\n  const unintentionalReadOnly = useRef(false)\n  useEffect(() => {\n    if (value && !onChange) {\n      // eslint-disable-next-line no-console\n      console.error(\n        `Warning: Failed prop type: You provided a \\`value\\` prop to <${name} /> without an \\`onChange\\` handler. This will render a read-only field. If the field should be mutable use \\`defaultValue\\` instead. Otherwise, please provide an \\`onChange\\` callback.`\n      )\n      unintentionalReadOnly.current = true\n    }\n  }, [value, onChange, name])\n  return unintentionalReadOnly.current\n}\n"]},"metadata":{},"sourceType":"module"}