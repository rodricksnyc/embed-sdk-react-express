{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"className\", \"firstDayOfWeek\", \"isRange\", \"locale\", \"onSelectDate\", \"onSelectRange\", \"onMonthChange\", \"readOnly\", \"selectedDate\", \"selectedRange\", \"showNextButton\", \"showPreviousButton\", \"viewMonth\"];\n\nlet _ = t => t,\n    _t;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { getDateLocale } from '@looker/i18n';\nimport { isAfter, isBefore, isSameDay } from 'date-fns';\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { Divider } from '../Divider';\nimport { useToggle } from '../utils';\nimport { DialogContext } from '../Dialog/DialogContext';\nimport { DaysOfWeek } from './DaysOfWeek';\nimport { CalendarNav } from './CalendarNav';\nimport { MonthList } from './MonthList';\nimport { MonthPickerNav } from './MonthPickerNav';\n\nconst getDatesSelected = (date, range) => {\n  if (date && !range) return [date];\n\n  if (range) {\n    return [...(range.from ? [range.from] : []), ...(range.to ? [range.to] : [])];\n  }\n\n  return [];\n};\n\nexport const Calendar = styled(_ref => {\n  var _locale$options;\n\n  let {\n    className,\n    firstDayOfWeek,\n    isRange,\n    locale = getDateLocale(),\n    onSelectDate,\n    onSelectRange,\n    onMonthChange,\n    readOnly,\n    selectedDate,\n    selectedRange,\n    showNextButton,\n    showPreviousButton,\n    viewMonth = new Date()\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  const datesSelected = getDatesSelected(selectedDate, selectedRange);\n  const [draftTo, setDraftTo] = useState();\n  const [baseMonth, setBaseMonth] = useState(viewMonth);\n  const [activeInput, setActiveInput] = useState('from');\n  const {\n    value: showMonthPicker,\n    setOn,\n    setOff\n  } = useToggle(false);\n  const onOpenMonthPicker = useCallback(() => {\n    setOn();\n    setBaseMonth(viewMonth);\n  }, [setOn, viewMonth]);\n  const handleDraftSelect = useCallback(date => {\n    if (isRange && selectedRange !== null && selectedRange !== void 0 && selectedRange.from && !selectedRange.to) {\n      if (isSameDay(date, selectedRange.from) || isBefore(date, selectedRange.from)) {\n        setDraftTo(undefined);\n      } else {\n        setDraftTo(date);\n      }\n    }\n  }, [isRange, selectedRange]);\n  const {\n    closeModal\n  } = useContext(DialogContext);\n  const handleSelect = useCallback(date => {\n    onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(date);\n\n    if (isRange) {\n      const beforeFrom = (selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.from) && isBefore(date, selectedRange.from);\n      const afterTo = (selectedRange === null || selectedRange === void 0 ? void 0 : selectedRange.to) && isAfter(date, selectedRange.to);\n\n      if (activeInput === 'from') {\n        if (!afterTo) {\n          onSelectRange === null || onSelectRange === void 0 ? void 0 : onSelectRange(_objectSpread(_objectSpread({}, selectedRange), {}, {\n            from: date\n          }));\n          setActiveInput('to');\n        } else {\n          onSelectRange === null || onSelectRange === void 0 ? void 0 : onSelectRange(_objectSpread(_objectSpread({}, selectedRange), {}, {\n            to: date\n          }));\n        }\n      } else if (activeInput === 'to') {\n        if (!beforeFrom) {\n          onSelectRange === null || onSelectRange === void 0 ? void 0 : onSelectRange(_objectSpread(_objectSpread({}, selectedRange), {}, {\n            to: date\n          }));\n          setActiveInput('from');\n        } else {\n          onSelectRange === null || onSelectRange === void 0 ? void 0 : onSelectRange(_objectSpread(_objectSpread({}, selectedRange), {}, {\n            from: date\n          }));\n        }\n      }\n    } else {\n      closeModal();\n    }\n  }, [closeModal, selectedRange, onSelectRange, onSelectDate, activeInput, isRange]);\n  const monthChangedFromScroll = useRef(false);\n  useEffect(() => {\n    if (!monthChangedFromScroll.current) {\n      setBaseMonth(viewMonth);\n    }\n  }, [viewMonth]);\n  const handleMonthChangeByScroll = useCallback(newMonth => {\n    monthChangedFromScroll.current = true;\n    onMonthChange(newMonth);\n    window.setTimeout(() => {\n      monthChangedFromScroll.current = false;\n    }, 50);\n  }, [onMonthChange]);\n  const localeProps = {\n    firstDayOfWeek: firstDayOfWeek || ((_locale$options = locale.options) === null || _locale$options === void 0 ? void 0 : _locale$options.weekStartsOn) || 0,\n    locale\n  };\n  return React.createElement(\"div\", _extends({\n    className: className\n  }, props), showMonthPicker ? React.createElement(MonthPickerNav, {\n    locale: locale,\n    date: viewMonth,\n    onClose: setOff,\n    onMonthChange: onMonthChange\n  }) : React.createElement(React.Fragment, null, React.createElement(CalendarNav, {\n    locale: locale,\n    monthYear: viewMonth,\n    onMonthChange: onMonthChange,\n    onOpenMonthPicker: onOpenMonthPicker\n  }), React.createElement(Divider, {\n    appearance: \"light\"\n  }), React.createElement(DaysOfWeek, localeProps), React.createElement(MonthList, _extends({}, localeProps, {\n    onSelect: handleSelect,\n    onDraftSelect: handleDraftSelect,\n    draftTo: draftTo,\n    currentDate: viewMonth,\n    datesSelected: datesSelected,\n    onMonthChange: handleMonthChangeByScroll,\n    baseMonth: baseMonth,\n    setBaseMonth: setBaseMonth\n  }))));\n}).withConfig({\n  displayName: \"Calendar\",\n  componentId: \"sc-16c71io-0\"\n})(_t || (_t = _`\n  font-family: ${0};\n  width: fit-content;\n`), _ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return theme.fonts.brand;\n});","map":{"version":3,"mappings":"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","names":["getDateLocale","isAfter","isBefore","isSameDay","React","useCallback","useContext","useEffect","useRef","useState","styled","Divider","useToggle","DialogContext","DaysOfWeek","CalendarNav","MonthList","MonthPickerNav","getDatesSelected","date","range","from","to","Calendar","_ref","className","firstDayOfWeek","isRange","locale","onSelectDate","onSelectRange","onMonthChange","readOnly","selectedDate","selectedRange","showNextButton","showPreviousButton","viewMonth","Date","props","datesSelected","draftTo","setDraftTo","baseMonth","setBaseMonth","activeInput","setActiveInput","value","showMonthPicker","setOn","setOff","onOpenMonthPicker","handleDraftSelect","undefined","closeModal","handleSelect","beforeFrom","afterTo","monthChangedFromScroll","current","handleMonthChangeByScroll","newMonth","window","setTimeout","localeProps","options","_locale$options","weekStartsOn","onClose","monthYear","appearance","_extends","onSelect","onDraftSelect","currentDate","withConfig","displayName","componentId","_t","theme","fonts","brand"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Calendar/Calendar.tsx"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport { getDateLocale } from '@looker/i18n'\nimport type { CompatibleHTMLProps } from '@looker/design-tokens'\nimport { isAfter, isBefore, isSameDay } from 'date-fns'\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport styled from 'styled-components'\nimport { Divider } from '../Divider'\nimport { useToggle } from '../utils'\nimport { DialogContext } from '../Dialog/DialogContext'\nimport { DaysOfWeek } from './DaysOfWeek'\nimport type { CalendarLocaleProps, NavCB, RangeModifier } from './types'\nimport { CalendarNav } from './CalendarNav'\nimport { MonthList } from './MonthList'\nimport { MonthPickerNav } from './MonthPickerNav'\n\nexport type CalendarProps = Partial<CalendarLocaleProps> &\n  CompatibleHTMLProps<HTMLDivElement> & {\n    onMonthChange: NavCB\n    readOnly?: boolean\n    showNextButton?: boolean\n    showPreviousButton?: boolean\n    /**\n     * Set the month displayed. Defaults to the current month\n     */\n    viewMonth: Date\n    /**\n     * Set to true for range selection mode\n     */\n    isRange?: boolean\n    /**\n     * Control the selected date for single date selection mode\n     */\n    selectedDate?: Date\n    /**\n     * Callback when the user selects a date (both single date and range selection mode)\n     */\n    onSelectDate?: NavCB\n    /**\n     * Control the date range for range selection mode (use with isRange: true)\n     */\n    selectedRange?: RangeModifier\n    /**\n     * Callback for range selection mode (use with isRange: true)\n     */\n    onSelectRange?: (range: RangeModifier) => void\n  }\n\nconst getDatesSelected = (date?: Date, range?: RangeModifier): Date[] => {\n  // single date selection\n  if (date && !range) return [date]\n  // range selection\n  if (range) {\n    // may only have `from` or may have `to` as well\n    return [\n      ...(range.from ? [range.from] : []),\n      ...(range.to ? [range.to] : []),\n    ]\n  }\n  // no current selection\n  return []\n}\n\nexport const Calendar = styled(\n  ({\n    className,\n    firstDayOfWeek,\n    isRange,\n    locale = getDateLocale(),\n    onSelectDate,\n    onSelectRange,\n    onMonthChange,\n    readOnly,\n    selectedDate,\n    selectedRange,\n    showNextButton,\n    showPreviousButton,\n    viewMonth = new Date(),\n    ...props\n  }: CalendarProps) => {\n    const datesSelected = getDatesSelected(selectedDate, selectedRange)\n    // For showing the user the potential range selection as they hover/focus\n    // after selecting the from date\n    const [draftTo, setDraftTo] = useState<Date>()\n    // The base for the scrolling list of months\n    // to be updated when user scrolls all the way to the top or bottom\n    const [baseMonth, setBaseMonth] = useState(viewMonth)\n\n    const [activeInput, setActiveInput] = useState<'from' | 'to'>('from')\n\n    // Toggle the month picker view\n    const { value: showMonthPicker, setOn, setOff } = useToggle(false)\n    const onOpenMonthPicker = useCallback(() => {\n      setOn()\n      // Reset the baseMonth for MonthList so it will scroll to the\n      // right location if the month picker view closes without\n      // selecting a new month\n      setBaseMonth(viewMonth)\n    }, [setOn, viewMonth])\n\n    const handleDraftSelect = useCallback(\n      (date: Date) => {\n        if (isRange && selectedRange?.from && !selectedRange.to) {\n          if (\n            isSameDay(date, selectedRange.from) ||\n            isBefore(date, selectedRange.from)\n          ) {\n            setDraftTo(undefined)\n          } else {\n            setDraftTo(date)\n          }\n        }\n      },\n      [isRange, selectedRange]\n    )\n    const { closeModal } = useContext(DialogContext)\n\n    const handleSelect = useCallback(\n      (date: Date) => {\n        // Always call onSelectDate whether single or range mode\n        // it may also be useful for range selection, for validation, etc\n        onSelectDate?.(date)\n\n        if (isRange) {\n          // check if date is earlier than from\n          const beforeFrom =\n            selectedRange?.from && isBefore(date, selectedRange.from)\n          // check if date is after to\n          const afterTo = selectedRange?.to && isAfter(date, selectedRange.to)\n          // if activeInput is from and\n          if (activeInput === 'from') {\n            // if date clicked is not later than to\n            if (!afterTo) {\n              onSelectRange?.({ ...selectedRange, from: date })\n              setActiveInput('to')\n            } else {\n              // otherwise expand selection by setting date to to\n              onSelectRange?.({ ...selectedRange, to: date })\n            }\n          } else if (activeInput === 'to') {\n            // if date clicked is not earlier than from\n            if (!beforeFrom) {\n              onSelectRange?.({ ...selectedRange, to: date })\n              setActiveInput('from')\n            } else {\n              // otherwise expand selection by setting date to from\n              onSelectRange?.({ ...selectedRange, from: date })\n            }\n          }\n        } else {\n          closeModal()\n        }\n      },\n      [\n        closeModal,\n        selectedRange,\n        onSelectRange,\n        onSelectDate,\n        activeInput,\n        isRange,\n      ]\n    )\n\n    // Keep track of when the month was updated from scrolling\n    // and don't update the baseMonth in that case\n    const monthChangedFromScroll = useRef(false)\n    useEffect(() => {\n      if (!monthChangedFromScroll.current) {\n        setBaseMonth(viewMonth)\n      }\n    }, [viewMonth])\n    const handleMonthChangeByScroll = useCallback(\n      (newMonth: Date) => {\n        monthChangedFromScroll.current = true\n        onMonthChange(newMonth)\n        window.setTimeout(() => {\n          monthChangedFromScroll.current = false\n        }, 50)\n      },\n      [onMonthChange]\n    )\n\n    const localeProps = {\n      firstDayOfWeek: firstDayOfWeek || locale.options?.weekStartsOn || 0,\n      locale,\n    }\n    return (\n      <div className={className} {...props}>\n        {showMonthPicker ? (\n          <MonthPickerNav\n            locale={locale}\n            date={viewMonth}\n            onClose={setOff}\n            onMonthChange={onMonthChange}\n          />\n        ) : (\n          <>\n            <CalendarNav\n              locale={locale}\n              monthYear={viewMonth}\n              onMonthChange={onMonthChange}\n              onOpenMonthPicker={onOpenMonthPicker}\n            />\n            <Divider appearance=\"light\" />\n            <DaysOfWeek {...localeProps} />\n            <MonthList\n              {...localeProps}\n              onSelect={handleSelect}\n              onDraftSelect={handleDraftSelect}\n              draftTo={draftTo}\n              currentDate={viewMonth}\n              datesSelected={datesSelected}\n              onMonthChange={handleMonthChangeByScroll}\n              baseMonth={baseMonth}\n              setBaseMonth={setBaseMonth}\n            />\n          </>\n        )}\n      </div>\n    )\n  }\n)`\n  font-family: ${({ theme }) => theme.fonts.brand};\n  width: fit-content;\n`\n"]},"metadata":{},"sourceType":"module"}