{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport React, { isValidElement, cloneElement } from 'react';\n\nconst isRenderProp = children => typeof children === 'function';\n\nexport const DialogRender = _ref => {\n  let {\n    children,\n    dialog,\n    domProps\n  } = _ref;\n\n  if (children === undefined) {\n    return React.createElement(React.Fragment, null, dialog);\n  } else if (isValidElement(children)) {\n    children = cloneElement(children, _objectSpread({}, domProps));\n  } else if (isRenderProp(children)) {\n    children = children(domProps);\n  } else {\n    console.warn(`Element \"${typeof children}\" can't be used as target for Drawer`);\n  }\n\n  return React.createElement(React.Fragment, null, dialog, children);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,OAAOA,KAAP,IAAgBC,cAAhB,EAAgCC,YAAhC,QAAoD,OAApD;;AAKA,MAAMC,YAAY,GAChBC,QAAsC,IACL,OAAOA,QAAP,KAAoB,UAFvD;;AAQA,OAAO,MAAMC,YAAY,GAAG,QAIH;EAAA,IAJI;IAC3BD,QAD2B;IAE3BE,MAF2B;IAG3BC;EAH2B,CAIJ;;EACvB,IAAIH,QAAQ,KAAKI,SAAjB,EAA4B;IAC1B,OAAOR,0CAAGM,MAAH,CAAP;EACD,CAFD,MAEO,IAAIL,cAAc,CAACG,QAAD,CAAlB,EAA8B;IACnCA,QAAQ,GAAGF,YAAY,CAACE,QAAD,EAASK,kBAC3BF,QAD2B,CAAT,CAAvBH;EAGD,CAJM,MAIA,IAAID,YAAY,CAACC,QAAD,CAAhB,EAA4B;IACjCA,QAAQ,GAAGA,QAAQ,CAACG,QAAD,CAAnBH;EACD,CAFM,MAEA;IAELM,OAAO,CAACC,IAARD,CACG,YAAW,OAAON,QAAS,sCAD9BM;EAGF;;EAEA,OACEV,0CACGM,MADH,EAEGF,QAFH,CADF;AAMD,CA1BM","names":["React","isValidElement","cloneElement","isRenderProp","children","DialogRender","dialog","domProps","undefined","_objectSpread","console","warn"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Dialog/DialogRender.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { ReactNode } from 'react'\nimport React, { isValidElement, cloneElement } from 'react'\nimport type { UseDialogResponse, UseDialogResponseDom } from './useDialog'\n\nexport type DialogRenderProp = (props: UseDialogResponseDom) => ReactNode\n\nconst isRenderProp = (\n  children: ReactNode | DialogRenderProp\n): children is DialogRenderProp => typeof children === 'function'\n\ntype DialogRenderProps = UseDialogResponse & {\n  children?: ReactNode\n}\n\nexport const DialogRender = ({\n  children,\n  dialog,\n  domProps,\n}: DialogRenderProps) => {\n  if (children === undefined) {\n    return <>{dialog}</>\n  } else if (isValidElement(children)) {\n    children = cloneElement(children, {\n      ...domProps,\n    })\n  } else if (isRenderProp(children)) {\n    children = children(domProps)\n  } else {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Element \"${typeof children}\" can't be used as target for Drawer`\n    )\n  }\n\n  return (\n    <>\n      {dialog}\n      {children}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}