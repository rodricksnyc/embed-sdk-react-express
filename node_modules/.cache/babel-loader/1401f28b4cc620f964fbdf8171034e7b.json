{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { getCurrentNode } from './getCurrentNode';\nimport { useCallbackRef } from './useCallbackRef';\nexport function useHovered(hoverElement) {\n  const [newElement, callbackRef] = useCallbackRef();\n  const element = typeof hoverElement === 'undefined' ? newElement : hoverElement;\n  const [isHovered, setIsHovered] = useState(hoverElement === undefined);\n  useEffect(() => {\n    function handleMouseEnter() {\n      setIsHovered(true);\n    }\n\n    function handleMouseLeave() {\n      window.requestAnimationFrame(() => {\n        const node = getCurrentNode(element);\n        const relationship = document.activeElement && node ? node.compareDocumentPosition(document.activeElement) : Node.DOCUMENT_POSITION_DISCONNECTED;\n        const activeElementIsChildOfNode = relationship === Node.DOCUMENT_POSITION_FOLLOWING + Node.DOCUMENT_POSITION_CONTAINED_BY;\n        if (!activeElementIsChildOfNode) setIsHovered(false);\n      });\n    }\n\n    const node = getCurrentNode(element);\n\n    if (node) {\n      node.addEventListener('mouseleave', handleMouseLeave);\n      node.addEventListener('mouseenter', handleMouseEnter);\n      node.addEventListener('focusout', handleMouseLeave);\n      node.addEventListener('focusin', handleMouseEnter);\n    }\n\n    return () => {\n      if (node) {\n        node.removeEventListener('mouseleave', handleMouseLeave);\n        node.removeEventListener('mouseenter', handleMouseEnter);\n        node.removeEventListener('focusout', handleMouseLeave);\n        node.removeEventListener('focusin', handleMouseEnter);\n      }\n    };\n  }, [element]);\n  return [isHovered, callbackRef];\n}","map":{"version":3,"mappings":"AAMA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAKA,OAAO,SAASC,UAAT,CACLC,YADK,EAEyC;EAC9C,MAAM,CAACC,UAAD,EAAaC,WAAb,IAA4BJ,cAAc,EAAhD;EACA,MAAMK,OAAO,GACX,OAAOH,YAAP,KAAwB,WAAxB,GAAsCC,UAAtC,GAAmDD,YADrD;EAYA,MAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAACI,YAAY,KAAKM,SAAlB,CAA1C;EAEAX,SAAS,CAAC,MAAM;IACd,SAASY,gBAAT,GAA4B;MAC1BF,YAAY,CAAC,IAAD,CAAZA;IACF;;IACA,SAASG,gBAAT,GAA4B;MAC1BC,MAAM,CAACC,qBAAPD,CAA6B,MAAM;QACjC,MAAME,IAAI,GAAGd,cAAc,CAACM,OAAD,CAA3B;QAEA,MAAMS,YAAY,GAChBC,QAAQ,CAACC,aAATD,IAA0BF,IAA1BE,GACIF,IAAI,CAACI,uBAALJ,CAA6BE,QAAQ,CAACC,aAAtCH,CADJE,GAEIG,IAAI,CAACC,8BAHX;QAMA,MAAMC,0BAA0B,GAC9BN,YAAY,KACZI,IAAI,CAACG,2BAALH,GAAmCA,IAAI,CAACI,8BAF1C;QAIA,IAAI,CAACF,0BAAL,EAAiCb,YAAY,CAAC,KAAD,CAAZA;MAClC,CAdDI;IAeF;;IAEA,MAAME,IAAI,GAAGd,cAAc,CAACM,OAAD,CAA3B;;IACA,IAAIQ,IAAJ,EAAU;MACRA,IAAI,CAACU,gBAALV,CAAsB,YAAtBA,EAAoCH,gBAApCG;MACAA,IAAI,CAACU,gBAALV,CAAsB,YAAtBA,EAAoCJ,gBAApCI;MACAA,IAAI,CAACU,gBAALV,CAAsB,UAAtBA,EAAkCH,gBAAlCG;MACAA,IAAI,CAACU,gBAALV,CAAsB,SAAtBA,EAAiCJ,gBAAjCI;IACF;;IACA,OAAO,MAAM;MACX,IAAIA,IAAJ,EAAU;QACRA,IAAI,CAACW,mBAALX,CAAyB,YAAzBA,EAAuCH,gBAAvCG;QACAA,IAAI,CAACW,mBAALX,CAAyB,YAAzBA,EAAuCJ,gBAAvCI;QACAA,IAAI,CAACW,mBAALX,CAAyB,UAAzBA,EAAqCH,gBAArCG;QACAA,IAAI,CAACW,mBAALX,CAAyB,SAAzBA,EAAoCJ,gBAApCI;MACF;IACD,CAPD;EAQD,CArCQ,EAqCN,CAACR,OAAD,CArCM,CAATR;EAuCA,OAAO,CAACS,SAAD,EAAYF,WAAZ,CAAP;AACF","names":["useEffect","useState","getCurrentNode","useCallbackRef","useHovered","hoverElement","newElement","callbackRef","element","isHovered","setIsHovered","undefined","handleMouseEnter","handleMouseLeave","window","requestAnimationFrame","node","relationship","document","activeElement","compareDocumentPosition","Node","DOCUMENT_POSITION_DISCONNECTED","activeElementIsChildOfNode","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_CONTAINED_BY","addEventListener","removeEventListener"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useHovered.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { RefObject } from 'react'\nimport { useEffect, useState } from 'react'\nimport { getCurrentNode } from './getCurrentNode'\nimport { useCallbackRef } from './useCallbackRef'\n\n/**\n * Get the hover / focus state of an element over which the current component has no control\n */\nexport function useHovered<E extends HTMLElement = HTMLElement>(\n  hoverElement?: E | null | RefObject<E>\n): [boolean, ((node: E | null) => void) | null] {\n  const [newElement, callbackRef] = useCallbackRef<E>()\n  const element =\n    typeof hoverElement === 'undefined' ? newElement : hoverElement\n\n  // If the hoverElement is either null nor a dom node, isHovered defaults to false\n\n  // (This works well except for the edge case where\n  // element is under the mouse at time of dom attachment.\n  // If handling this edge case is crucial, use React callbacks onMouseEnter and onMouseLeave\n  // instead of this hook)\n\n  // If the hoverElement is undefined the hover \"gate\" is not being used so\n  // isHovered defaults to true\n  const [isHovered, setIsHovered] = useState(hoverElement === undefined)\n\n  useEffect(() => {\n    function handleMouseEnter() {\n      setIsHovered(true)\n    }\n    function handleMouseLeave() {\n      window.requestAnimationFrame(() => {\n        const node = getCurrentNode(element)\n\n        const relationship =\n          document.activeElement && node\n            ? node.compareDocumentPosition(document.activeElement)\n            : Node.DOCUMENT_POSITION_DISCONNECTED\n\n        // Don't set isHovered to false if a child of the element is currently focused\n        const activeElementIsChildOfNode =\n          relationship ===\n          Node.DOCUMENT_POSITION_FOLLOWING + Node.DOCUMENT_POSITION_CONTAINED_BY\n\n        if (!activeElementIsChildOfNode) setIsHovered(false)\n      })\n    }\n\n    const node = getCurrentNode(element)\n    if (node) {\n      node.addEventListener('mouseleave', handleMouseLeave)\n      node.addEventListener('mouseenter', handleMouseEnter)\n      node.addEventListener('focusout', handleMouseLeave)\n      node.addEventListener('focusin', handleMouseEnter)\n    }\n    return () => {\n      if (node) {\n        node.removeEventListener('mouseleave', handleMouseLeave)\n        node.removeEventListener('mouseenter', handleMouseEnter)\n        node.removeEventListener('focusout', handleMouseLeave)\n        node.removeEventListener('focusin', handleMouseEnter)\n      }\n    }\n  }, [element])\n\n  return [isHovered, callbackRef]\n}\n"]},"metadata":{},"sourceType":"module"}