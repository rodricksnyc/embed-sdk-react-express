{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"children\", \"contentDomProps\", \"disclosureProps\", \"isOpen\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport React, { Children, isValidElement } from 'react';\nimport { mergeClassNames } from '../utils';\nimport { AccordionContent } from './AccordionContent';\nimport { AccordionDisclosure } from './AccordionDisclosure';\nexport const isLegacyComposition = children => Children.count(children) === 2;\nexport const AccordionLegacy = _ref => {\n  let {\n    children,\n    contentDomProps,\n    disclosureProps,\n    isOpen\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  const accordionChildren = [];\n  Children.forEach(children, child => {\n    if (isValidElement(child)) {\n      const isAccordionDisclosure = child.type === AccordionDisclosure;\n      const isAccordionContent = child.type === AccordionContent;\n\n      if (isAccordionDisclosure) {\n        accordionChildren.push(React.cloneElement(child, _objectSpread(_objectSpread({}, disclosureProps), {}, {\n          className: mergeClassNames([disclosureProps.className, child.props.className]),\n          key: 'accordion-disclosure'\n        })));\n      } else if (isAccordionContent && isOpen) {\n        accordionChildren.push(React.cloneElement(child, _objectSpread(_objectSpread({}, contentDomProps), {}, {\n          className: mergeClassNames([child.props.className, contentDomProps.className]),\n          key: 'accordion-content'\n        })));\n      }\n    }\n  });\n  return React.createElement(\"div\", props, accordionChildren);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,cAA1B,QAAgD,OAAhD;AACA,SAASC,eAAT,QAAgC,UAAhC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAEA,OAAO,MAAMC,mBAAmB,GAAIC,QAAmB,IACrDN,QAAQ,CAACO,KAATP,CAAeM,QAAfN,MAA6B,CADxB;AAYP,OAAO,MAAMQ,eAAe,GAAGC,QAMH;EAAA,IANI;IAC9BH,QAD8B;IAE9BI,eAF8B;IAG9BC,eAH8B;IAI9BC;EAJ8B,IAMTH,IAAK;EAAA,IADvBI,KAAK,4CACkB;;EAC1B,MAAMC,iBAAiB,GAAG,EAA1B;EAEAd,QAAQ,CAACe,OAATf,CAAiBM,QAAjBN,EAA2BgB,KAAK,IAAI;IAClC,IAAIf,cAAc,CAACe,KAAD,CAAlB,EAA2B;MACzB,MAAMC,qBAAqB,GACxBD,KAAK,CAA2BE,IAAhCF,KAAyCZ,mBAD5C;MAEA,MAAMe,kBAAkB,GACrBH,KAAK,CAA2BE,IAAhCF,KAAyCb,gBAD5C;;MAGA,IAAIc,qBAAJ,EAA2B;QACzBH,iBAAiB,CAACM,IAAlBN,CACEf,KAAK,CAACsB,YAANtB,CAAmBiB,KAAnBjB,EAAwBuB,gCACnBX,eADmB,GACJ,EADI,EACJ;UAClBY,SAAS,EAAErB,eAAe,CAAC,CACzBS,eAAe,CAACY,SADS,EAEzBP,KAAK,CAACH,KAANG,CAAYO,SAFa,CAAD,CADR;UAKlBC,GAAG,EAAE;QALa,CADI,CAAxBzB,CADFe;MAUD,CAXD,MAWO,IAAIK,kBAAkB,IAAIP,MAA1B,EAAkC;QACvCE,iBAAiB,CAACM,IAAlBN,CACEf,KAAK,CAACsB,YAANtB,CAAmBiB,KAAnBjB,EAAwBuB,gCACnBZ,eADmB,GACJ,EADI,EACJ;UAClBa,SAAS,EAAErB,eAAe,CAAC,CACzBc,KAAK,CAACH,KAANG,CAAYO,SADa,EAEzBb,eAAe,CAACa,SAFS,CAAD,CADR;UAKlBC,GAAG,EAAE;QALa,CADI,CAAxBzB,CADFe;MAUF;IACF;EACD,CA/BDd;EAiCA,OAAOD,2BAASc,KAAT,EAAiBC,iBAAjB,CAAP;AACD,CA3CM","names":["React","Children","isValidElement","mergeClassNames","AccordionContent","AccordionDisclosure","isLegacyComposition","children","count","AccordionLegacy","_ref","contentDomProps","disclosureProps","isOpen","props","accordionChildren","forEach","child","isAccordionDisclosure","type","isAccordionContent","push","cloneElement","_objectSpread","className","key"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Accordion/AccordionLegacy.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { CompatibleHTMLProps } from '@looker/design-tokens'\nimport type { ReactElement, ReactNode } from 'react'\nimport React, { Children, isValidElement } from 'react'\nimport { mergeClassNames } from '../utils'\nimport { AccordionContent } from './AccordionContent'\nimport { AccordionDisclosure } from './AccordionDisclosure'\n\nexport const isLegacyComposition = (children: ReactNode) =>\n  Children.count(children) === 2\n\ntype DomProps = CompatibleHTMLProps<HTMLElement>\n\ntype AccordionLegacyProps = DomProps & {\n  children: ReactNode\n  contentDomProps: DomProps\n  disclosureProps: DomProps\n  isOpen: boolean\n}\n\nexport const AccordionLegacy = ({\n  children,\n  contentDomProps,\n  disclosureProps,\n  isOpen,\n  ...props\n}: AccordionLegacyProps) => {\n  const accordionChildren = [] as ReactNode[]\n\n  Children.forEach(children, child => {\n    if (isValidElement(child)) {\n      const isAccordionDisclosure =\n        (child as ReactElement<unknown>).type === AccordionDisclosure\n      const isAccordionContent =\n        (child as ReactElement<unknown>).type === AccordionContent\n\n      if (isAccordionDisclosure) {\n        accordionChildren.push(\n          React.cloneElement(child, {\n            ...disclosureProps,\n            className: mergeClassNames([\n              disclosureProps.className,\n              child.props.className,\n            ]),\n            key: 'accordion-disclosure',\n          })\n        )\n      } else if (isAccordionContent && isOpen) {\n        accordionChildren.push(\n          React.cloneElement(child, {\n            ...contentDomProps,\n            className: mergeClassNames([\n              child.props.className,\n              contentDomProps.className,\n            ]),\n            key: 'accordion-content',\n          })\n        )\n      }\n    }\n  })\n\n  return <div {...props}>{accordionChildren}</div>\n}\n"]},"metadata":{},"sourceType":"module"}