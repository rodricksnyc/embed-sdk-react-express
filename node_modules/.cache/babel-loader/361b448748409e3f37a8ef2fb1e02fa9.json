{"ast":null,"code":"let _ = t => t,\n    _t;\n\nimport { useMemo, useState } from 'react';\nimport { css } from 'styled-components';\nexport const focusVisibleCSSWrapper = styleFn => css(_t || (_t = _`\n  &:focus-visible {\n    ${0}\n  }\n  ${0}\n`), styleFn, _ref => {\n  let {\n    focusVisible\n  } = _ref;\n  return focusVisible && styleFn;\n});\nexport const useFocusVisible = _ref2 => {\n  let {\n    onBlur,\n    onKeyUp\n  } = _ref2;\n  const [isFocusVisible, setFocusVisible] = useState(false);\n  return useMemo(() => {\n    return {\n      focusVisible: isFocusVisible,\n      onBlur: e => {\n        setFocusVisible(false);\n        onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);\n      },\n      onKeyUp: e => {\n        if (e.currentTarget === e.target) {\n          setFocusVisible(true);\n        }\n\n        onKeyUp === null || onKeyUp === void 0 ? void 0 : onKeyUp(e);\n      }\n    };\n  }, [isFocusVisible, onBlur, onKeyUp]);\n};","map":{"version":3,"mappings":";;;AAOA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC;AAMA,SAASC,GAAT,QAAoB,mBAApB;AAWA,OAAO,MAAMC,sBAAsB,GACjCC,OAEiE,IAC9DF,GAAG,cAAQ;AAChB;AACA,MAAI,CAAU;AACd;AACA,IAAE,CAAgD;AAClD,CALQ,GAEFE,OAFE,EAIJ;EAAA,IAAC;IAAEC;EAAF,CAAD;EAAA,OAAsBA,YAAY,IAAID,OAAtC;AAAA,CAJI,CAJD;AAWP,OAAO,MAAME,eAAe,GAAG,SAGA;EAAA,IAHsC;IACnEC,MADmE;IAEnEC;EAFmE,CAGtC;EAC7B,MAAM,CAACC,cAAD,EAAiBC,eAAjB,IAAoCT,QAAQ,CAAC,KAAD,CAAlD;EAEA,OAAOD,OAAO,CAAC,MAAM;IACnB,OAAO;MACLK,YAAY,EAAEI,cADT;MAELF,MAAM,EAAGI,CAAgB,IAAK;QAC5BD,eAAe,CAAC,KAAD,CAAfA;QACAH,MAAM,SAANA,UAAM,WAANA,GAAM,MAANA,SAAM,CAAGI,CAAH,CAANJ;MACD,CALI;MAMLC,OAAO,EAAGG,CAAmB,IAAK;QAChC,IAAIA,CAAC,CAACC,aAAFD,KAAoBA,CAAC,CAACE,MAA1B,EAAkC;UAChCH,eAAe,CAAC,IAAD,CAAfA;QACF;;QACAF,OAAO,SAAPA,WAAO,WAAPA,GAAO,MAAPA,UAAO,CAAGG,CAAH,CAAPH;MACF;IAXK,CAAP;EAaD,CAda,EAcX,CAACC,cAAD,EAAiBF,MAAjB,EAAyBC,OAAzB,CAdW,CAAd;AAeD,CArBM","names":["useMemo","useState","css","focusVisibleCSSWrapper","styleFn","focusVisible","useFocusVisible","onBlur","onKeyUp","isFocusVisible","setFocusVisible","e","currentTarget","target"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useFocusVisible.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { CompatibleHTMLProps } from '@looker/design-tokens'\nimport type { FocusEvent, KeyboardEvent } from 'react'\nimport { useMemo, useState } from 'react'\nimport type {\n  DefaultTheme,\n  FlattenInterpolation,\n  ThemedStyledProps,\n} from 'styled-components'\nimport { css } from 'styled-components'\n\nexport interface FocusVisibleProps {\n  focusVisible: boolean\n}\n\nexport type UseFocusVisibleProps<E extends HTMLElement> = Pick<\n  CompatibleHTMLProps<E>,\n  'onBlur' | 'onKeyUp'\n>\n\nexport const focusVisibleCSSWrapper = <Props extends FocusVisibleProps>(\n  styleFn: (\n    props: ThemedStyledProps<Props, DefaultTheme>\n  ) => FlattenInterpolation<ThemedStyledProps<Props, DefaultTheme>>\n) => css<Props>`\n  &:focus-visible {\n    ${styleFn}\n  }\n  ${({ focusVisible }) => focusVisible && styleFn}\n`\n\nexport const useFocusVisible = <E extends HTMLElement = HTMLElement>({\n  onBlur,\n  onKeyUp,\n}: UseFocusVisibleProps<E>) => {\n  const [isFocusVisible, setFocusVisible] = useState(false)\n\n  return useMemo(() => {\n    return {\n      focusVisible: isFocusVisible,\n      onBlur: (e: FocusEvent<E>) => {\n        setFocusVisible(false)\n        onBlur?.(e)\n      },\n      onKeyUp: (e: KeyboardEvent<E>) => {\n        if (e.currentTarget === e.target) {\n          setFocusVisible(true)\n        }\n        onKeyUp?.(e)\n      },\n    }\n  }, [isFocusVisible, onBlur, onKeyUp])\n}\n"]},"metadata":{},"sourceType":"module"}