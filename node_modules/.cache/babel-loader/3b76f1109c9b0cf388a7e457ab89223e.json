{"ast":null,"code":"let _ = t => t,\n    _t;\n\nimport { itemSelectedColor } from '@looker/design-tokens';\nimport { css } from 'styled-components';\nexport const listItemBackgroundColor = _ref => {\n  let {\n    color,\n    disabled,\n    hovered: propsHovered,\n    ripple,\n    selected,\n    theme: {\n      colors\n    }\n  } = _ref;\n  const stateColors = color ? {\n    all: colors[`${color}Subtle`],\n    hovered: colors.ui1,\n    selected: colors[`${color}Subtle`]\n  } : {\n    all: itemSelectedColor(colors.ui2),\n    hovered: colors.ui1,\n    selected: itemSelectedColor(colors.ui2)\n  };\n  let renderedColor;\n  const hovered = !ripple && propsHovered;\n  if (disabled) renderedColor = 'transparent';else if (selected && hovered) renderedColor = stateColors.all;else if (selected) renderedColor = stateColors.selected;else if (hovered) renderedColor = stateColors.hovered;else renderedColor = 'transparent';\n  return css(_t || (_t = _`\n    background: ${0};\n  `), renderedColor);\n};","map":{"version":3,"mappings":";;;AAMA,SAASA,iBAAT,QAAkC,uBAAlC;AACA,SAASC,GAAT,QAAoB,mBAApB;AAiBA,OAAO,MAAMC,uBAAuB,GAAG,QAOgB;EAAA,IAPf;IACtCC,KADsC;IAEtCC,QAFsC;IAGtCC,OAAO,EAAEC,YAH6B;IAItCC,MAJsC;IAKtCC,QALsC;IAMtCC,KAAK,EAAE;MAAEC;IAAF;EAN+B,CAOe;EACrD,MAAMC,WAAW,GAAGR,KAAK,GACrB;IACES,GAAG,EAAEF,MAAM,CAAE,GAAEP,KAAM,QAAV,CADb;IAEEE,OAAO,EAAEK,MAAM,CAACG,GAFlB;IAGEL,QAAQ,EAAEE,MAAM,CAAE,GAAEP,KAAM,QAAV;EAHlB,CADqB,GAMrB;IACES,GAAG,EAAEZ,iBAAiB,CAACU,MAAM,CAACI,GAAR,CADxB;IAEET,OAAO,EAAEK,MAAM,CAACG,GAFlB;IAGEL,QAAQ,EAAER,iBAAiB,CAACU,MAAM,CAACI,GAAR;EAH7B,CANJ;EAYA,IAAIC,aAAJ;EACA,MAAMV,OAAO,GAAG,CAACE,MAAD,IAAWD,YAA3B;EAEA,IAAIF,QAAJ,EAAcW,aAAa,GAAG,aAAhBA,CAAd,KACK,IAAIP,QAAQ,IAAIH,OAAhB,EAAyBU,aAAa,GAAGJ,WAAW,CAACC,GAA5BG,CAAzB,KACA,IAAIP,QAAJ,EAAcO,aAAa,GAAGJ,WAAW,CAACH,QAA5BO,CAAd,KACA,IAAIV,OAAJ,EAAaU,aAAa,GAAGJ,WAAW,CAACN,OAA5BU,CAAb,KACAA,aAAa,GAAG,aAAhBA;EAEL,OAAOd,GAAG,cAAC;AACb,kBAAgB,CAAgB;AAChC,GAFY,GACMc,aADN,CAAV;AAGD,CAhCM","names":["itemSelectedColor","css","listItemBackgroundColor","color","disabled","hovered","propsHovered","ripple","selected","theme","colors","stateColors","all","ui1","ui2","renderedColor"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/ListItem/utils/listItemBackgroundColor.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Colors, Theme } from '@looker/design-tokens'\nimport { itemSelectedColor } from '@looker/design-tokens'\nimport { css } from 'styled-components'\nimport type { ListItemColorProp, ListItemStatefulProps } from '../types'\n\nexport type ListItemBackgroundColorProps = ListItemStatefulProps &\n  ListItemColorProp & {\n    /**\n     * Indicates ripple is enabled and hover should not be used\n     */\n    ripple?: boolean\n  }\n\n/**\n * @TODO Remove hovered prop and hovered logic when ripple effect\n * is implemented in LkField components. All other ListItem related\n * components (i.e. ListItem, NavTreeItem, TreeItem) all use ripple\n * to handle hover state.\n */\nexport const listItemBackgroundColor = ({\n  color,\n  disabled,\n  hovered: propsHovered,\n  ripple,\n  selected,\n  theme: { colors },\n}: ListItemBackgroundColorProps & { theme: Theme }) => {\n  const stateColors = color\n    ? {\n        all: colors[`${color}Subtle` as keyof Colors],\n        hovered: colors.ui1,\n        selected: colors[`${color}Subtle` as keyof Colors],\n      }\n    : {\n        all: itemSelectedColor(colors.ui2),\n        hovered: colors.ui1,\n        selected: itemSelectedColor(colors.ui2),\n      }\n\n  let renderedColor\n  const hovered = !ripple && propsHovered\n\n  if (disabled) renderedColor = 'transparent'\n  else if (selected && hovered) renderedColor = stateColors.all\n  else if (selected) renderedColor = stateColors.selected\n  else if (hovered) renderedColor = stateColors.hovered\n  else renderedColor = 'transparent'\n\n  return css`\n    background: ${renderedColor};\n  `\n}\n"]},"metadata":{},"sourceType":"module"}