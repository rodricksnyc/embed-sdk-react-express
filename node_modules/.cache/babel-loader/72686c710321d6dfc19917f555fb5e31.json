{"ast":null,"code":"import React, { useCallback, useState } from 'react';\nimport { convertRemToPx, BreakpointRamp } from '@looker/design-tokens';\nimport isArray from 'lodash/isArray';\nimport { useTheme } from 'styled-components';\nimport { useResize } from '../utils';\nexport const Breakpoint = _ref => {\n  let {\n    children,\n    show\n  } = _ref;\n  const [from = 'mobile', to = 'xl'] = isArray(show) ? show : [show, show];\n  const [screenWidth, setScreenWidth] = useState(typeof document === 'undefined' ? 800 : document.body.clientWidth);\n  const theme = useTheme();\n  const breakpointPx = theme.breakpoints.map(b => convertRemToPx(parseInt(b.replace('rem', ''))));\n  const fromIndex = theme.breakpoints.indexOf(BreakpointRamp[from]);\n  const toIndex = theme.breakpoints.indexOf(BreakpointRamp[to]);\n  const handleResize = useCallback(() => {\n    if (document) {\n      setScreenWidth(document.body.clientWidth);\n    }\n  }, []);\n  useResize(typeof document === 'undefined' ? null : document.body, handleResize);\n  const screenMin = from === 'mobile' ? 0 : breakpointPx[fromIndex - 1];\n  const screenMax = to === 'xl' ? Infinity : breakpointPx[toIndex];\n  return React.createElement(React.Fragment, null, screenWidth > screenMin && screenWidth <= screenMax ? children : null);\n};","map":{"version":3,"mappings":"AAKA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AAGA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,uBAA/C;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,SAAT,QAA0B,UAA1B;AAUA,OAAO,MAAMC,UAAU,GAAG,QAAyC;EAAA,IAAxC;IAAEC,QAAF;IAAYC;EAAZ,CAAwC;EAIjE,MAAM,CAACC,IAAI,GAAG,QAAR,EAAkBC,EAAE,GAAG,IAAvB,IAA+BP,OAAO,CAACK,IAAD,CAAPL,GAAgBK,IAAhBL,GAAuB,CAACK,IAAD,EAAOA,IAAP,CAA5D;EACA,MAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAC5C,OAAOa,QAAP,KAAoB,WAApB,GAAkC,GAAlC,GAAwCA,QAAQ,CAACC,IAATD,CAAcE,WADV,CAA9C;EAGA,MAAMC,KAAK,GAAGZ,QAAQ,EAAtB;EACA,MAAMa,YAAY,GAAGD,KAAK,CAACE,WAANF,CAAkBG,GAAlBH,CAAuBI,CAAS,IACnDnB,cAAc,CAACoB,QAAQ,CAACD,CAAC,CAACE,OAAFF,CAAU,KAAVA,EAAiB,EAAjBA,CAAD,CAAT,CADKJ,CAArB;EAIA,MAAMO,SAAS,GAAGP,KAAK,CAACE,WAANF,CAAkBQ,OAAlBR,CAA0Bd,cAAc,CAACO,IAAD,CAAxCO,CAAlB;EACA,MAAMS,OAAO,GAAGT,KAAK,CAACE,WAANF,CAAkBQ,OAAlBR,CAA0Bd,cAAc,CAACQ,EAAD,CAAxCM,CAAhB;EAEA,MAAMU,YAAY,GAAG3B,WAAW,CAAC,MAAM;IACrC,IAAIc,QAAJ,EAAc;MAEZD,cAAc,CAACC,QAAQ,CAACC,IAATD,CAAcE,WAAf,CAAdH;IACF;EACD,CAL+B,EAK7B,EAL6B,CAAhC;EAOAP,SAAS,CACP,OAAOQ,QAAP,KAAoB,WAApB,GAAkC,IAAlC,GAAyCA,QAAQ,CAACC,IAD3C,EAEPY,YAFO,CAATrB;EAKA,MAAMsB,SAAS,GAAGlB,IAAI,KAAK,QAATA,GAAoB,CAApBA,GAAwBQ,YAAY,CAACM,SAAS,GAAG,CAAb,CAAtD;EACA,MAAMK,SAAS,GAAGlB,EAAE,KAAK,IAAPA,GAAcmB,QAAdnB,GAAyBO,YAAY,CAACQ,OAAD,CAAvD;EAEA,OACE3B,0CAAGa,WAAW,GAAGgB,SAAdhB,IAA2BA,WAAW,IAAIiB,SAA1CjB,GAAsDJ,QAAtDI,GAAiE,IAApE,CADF;AAGD,CAlCM","names":["React","useCallback","useState","convertRemToPx","BreakpointRamp","isArray","useTheme","useResize","Breakpoint","children","show","from","to","screenWidth","setScreenWidth","document","body","clientWidth","theme","breakpointPx","breakpoints","map","b","parseInt","replace","fromIndex","indexOf","toIndex","handleResize","screenMin","screenMax","Infinity"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Breakpoint/Breakpoint.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React, { useCallback, useState } from 'react'\nimport type { ReactNode } from 'react'\nimport type { NamedBreakpoints } from '@looker/design-tokens'\nimport { convertRemToPx, BreakpointRamp } from '@looker/design-tokens'\nimport isArray from 'lodash/isArray'\nimport { useTheme } from 'styled-components'\nimport { useResize } from '../utils'\n\nexport interface BreakpointProps {\n  /*\n   * Define a single screen size or range of screen sizes to render the children.\n   */\n  show: NamedBreakpoints | [NamedBreakpoints?, NamedBreakpoints?]\n  children?: ReactNode\n}\n\nexport const Breakpoint = ({ children, show }: BreakpointProps) => {\n  // Define screen size range.\n  // If they pass a single value, e.g. 'mobile', it should be equivalent to\n  // \"from mobile, to mobile\"\n  const [from = 'mobile', to = 'xl'] = isArray(show) ? show : [show, show]\n  const [screenWidth, setScreenWidth] = useState(\n    typeof document === 'undefined' ? 800 : document.body.clientWidth\n  )\n  const theme = useTheme()\n  const breakpointPx = theme.breakpoints.map((b: string) =>\n    convertRemToPx(parseInt(b.replace('rem', '')))\n  )\n\n  const fromIndex = theme.breakpoints.indexOf(BreakpointRamp[from])\n  const toIndex = theme.breakpoints.indexOf(BreakpointRamp[to])\n\n  const handleResize = useCallback(() => {\n    if (document) {\n      // document is not available in server side rendering\n      setScreenWidth(document.body.clientWidth)\n    }\n  }, [])\n\n  useResize(\n    typeof document === 'undefined' ? null : document.body,\n    handleResize\n  )\n\n  const screenMin = from === 'mobile' ? 0 : breakpointPx[fromIndex - 1] // mobile screens start at 0px\n  const screenMax = to === 'xl' ? Infinity : breakpointPx[toIndex] // xl includes xl breakpoint and above\n\n  return (\n    <>{screenWidth > screenMin && screenWidth <= screenMax ? children : null}</>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}