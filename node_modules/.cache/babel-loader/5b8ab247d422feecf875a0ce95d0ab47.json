{"ast":null,"code":"\"use strict\";\n/*\n\n MIT License\n\n Copyright (c) 2019 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});","map":{"version":3,"mappings":";AAAA","names":[],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/embed-sdk/src/types.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2019 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { LookerEmbedBase } from './embed_base'\nimport type { LookerEmbedDashboard } from './dashboard_client'\nimport type { LookerEmbedLook } from './look_client'\n\n/**\n * Auth server configuration\n */\nexport interface LookerAuthConfig {\n  url: string\n  headers?: Array<{ name: string; value: string }>\n  params?: Array<{ name: string; value: string }>\n  withCredentials?: boolean\n}\n\n/**\n * Cookieless request init\n * Looker 22.20+\n */\nexport interface CookielessRequestInit extends RequestInit {\n  url: string\n}\n\n/**\n * Cookieless request callback function\n * Looker 22.20+\n */\n\nexport type CookielessCallback = () => Promise<LookerEmbedCookielessSessionData>\n\n/**\n * Cookieless session data\n * Looker 23.0+\n */\nexport interface LookerEmbedCookielessSessionData {\n  /**\n   * One time use token used to establish the cookieless embed session.\n   */\n  authentication_token?: string | null\n  /**\n   * Authentication token time to live in seconds.\n   */\n  authentication_token_ttl?: number | null\n  /**\n   * Token used to load and navigate between pages in the embedded session. This token is appended to the embed iframe url.\n   */\n  navigation_token?: string | null\n  /**\n   * Navigation token time to live in seconds.\n   */\n  navigation_token_ttl?: number | null\n  /**\n   * Token to used to call Looker APIs. The host application MUST send the api token to the embedded Looker application. Do not expose the token in the dom.\n   */\n  api_token?: string | null\n  /**\n   * api_token time to live in seconds.\n   */\n  api_token_ttl?: number | null\n  /**\n   * Session time to live in seconds.\n   */\n  session_reference_token_ttl?: number | null\n}\n\n/**\n * Data structure for filters.\n */\n\nexport interface LookerEmbedFilterParams {\n  [key: string]: string\n}\n\n/**\n * Dashboard Layout\n *\n * Contains details of dashboard layout.\n */\n\nexport interface DashboardLayout {\n  id: string\n  dashboard_id: string\n  type: 'newspaper'\n  active: boolean\n  column_width: number\n  width: number | null\n  deleted: boolean\n  dashboard_layout_components: DashboardLayoutComponent[]\n}\n\n/**\n * Dashboard Layout Component\n *\n * Contains details of individual dashboard element layout.\n */\n\nexport interface DashboardLayoutComponent {\n  id: string\n  dashboard_layout_id: string\n  dashboard_element_id: string\n  row: number\n  column: number\n  width: number\n  height: number\n  deleted: boolean\n}\n\n/**\n * Visualization Config interface\n */\n\nexport interface VisConfig {\n  type: string\n  [key: string]: any\n}\n\n/**\n * Element Options interface\n */\n\nexport interface ElementOptionItems {\n  title?: string | null\n  title_hidden?: boolean\n  vis_config?: VisConfig | null\n}\n\n/**\n * Element to element options mapping interface\n */\nexport interface ElementOptions {\n  [id: string]: ElementOptionItems\n}\n\n/**\n * Options interface\n */\n\nexport interface LookerDashboardOptions {\n  elements?: ElementOptions\n  layouts?: DashboardLayout[]\n}\n\n/**\n * A generic Looker embed event\n */\n\nexport interface LookerEmbedEvent {\n  type: string\n\n  [key: string]: any\n}\n\n/**\n * A generic Looker event detail\n */\n\nexport interface EventDetail {\n  [key: string]: any\n}\n\n/**\n * Cookieless embed session token request\n * Looker 22.20+\n */\n\nexport type SessionTokenRequest = EventDetail\n\n/**\n * Cookieless session status event\n * Looker 23.0+\n */\n\nexport interface SessionStatus extends EventDetail {\n  /**\n   * Session time to live in seconds\n   */\n  session_ttl: number\n  /**\n   * Session expired when true\n   */\n  expired: boolean\n  /**\n   * Session interrupted when true. This means new\n   * tokens could not be retrieved in a timely manner.\n   * Can happen if server is temporarily unavailable\n   * for some reason\n   */\n  interrupted: boolean\n  /**\n   * Interrupted session can be recovered. When false\n   * session cannot continue. This is most likely\n   * a problem with the embedding application.\n   */\n  recoverable?: boolean\n}\n\n/**\n * Detailed dashboard data returned by dashboard events\n */\n\nexport interface DashboardEventDetail extends EventDetail {\n  id: string | number\n  title: string\n  canEdit: boolean\n  dashboard_filters: LookerEmbedFilterParams\n  absoluteUrl: string\n  url: string\n  options: LookerDashboardOptions\n}\n\n/**\n * Detailed tile data returned by dashboard events\n */\n\nexport interface DashboardTileEventDetail extends EventDetail {\n  id: string | number\n  title: string\n  listen: Record<string, string | null>\n}\n\n/**\n * Dashboard tile status\n *\n * Available on Dashboards Next\n *\n * Requires Looker 21.14\n */\n\nexport interface TileStatus {\n  tileId: string\n  status: 'error' | 'complete'\n  errors?: Array<QueryError>\n}\n\n/**\n * Dashboard event\n */\n\nexport interface DashboardEvent extends LookerEmbedEvent {\n  dashboard: DashboardEventDetail\n  /// Available on Dashboards Next\n  status?: 'complete' | 'error' | 'stopped'\n  /// Available on Dashboards Next\n  /// Requires Looker 21.14\n  tileStatuses: Array<TileStatus>\n}\n\n/**\n * Query error detail\n *\n * Requires Looker 21.14\n */\n\nexport interface QueryError {\n  message: string | null\n  message_details: string | null\n  params: string | null\n  error_pos: string | null\n  level: string\n  fatal?: boolean\n  sql_error_loc: {\n    [key: string]: any\n  }\n}\n\n/**\n * Dashboard tile event\n */\n\nexport interface DashboardTileEvent {\n  dashboard: DashboardEventDetail\n  tile: DashboardTileEventDetail\n  /// Available on Dashboards Next\n  status?: 'complete' | 'error'\n  /// Available on Dashboards Next\n  truncated?: boolean\n  /// Available on Dashboards Next\n  /// Requires Looker 21.14\n  errors?: Array<QueryError>\n}\n\n/**\n * Dashboard tile download event\n */\n\nexport interface DashboardTileDownloadEvent extends DashboardTileEvent {\n  fileFormat: string\n}\n\n/**\n * Dashboard tile Explore from Here event\n *\n * Requires Looker 6.20\n */\n\nexport interface DashboardTileExploreEvent extends DashboardTileEvent {\n  label: string\n  url: string\n}\n\n/**\n * Dashboard tile View Original Look event\n *\n * Requires Looker 6.20\n */\n\nexport interface DashboardTileViewEvent extends DashboardTileEvent {\n  label: string\n  url: string\n}\n\n/**\n * Drill menu addFilterJson data\n */\n\nexport interface AddFilterJson {\n  rendered: string\n  field: string\n  add: string\n}\n\n/**\n * Drill menu event\n */\n\nexport interface DrillMenuEvent extends LookerEmbedEvent {\n  label: string\n  link_type: string\n  url: string\n  modal: boolean\n  context: string\n  addFilterJson: AddFilterJson\n}\n\n/**\n * Drill Modal Explore from Here event\n *\n * Requires Looker 6.20\n */\nexport interface DrillModalExploreEvent extends LookerEmbedEvent {\n  label: string\n  url: string\n}\n\n/**\n * Look page event details\n */\n\nexport interface LookEventDetail extends EventDetail {\n  absoluteUrl: string\n  url: string\n}\n\n/**\n * Look page event\n */\nexport interface LookEvent extends LookerEmbedEvent {\n  look: LookEventDetail\n}\n\n/**\n * Look save event details\n * Looker version 21.6+\n */\n\nexport interface LookSaveEventDetail extends LookEventDetail {\n  /**\n   * Folder Look is associated with\n   * Looker version 21.8+\n   */\n  spaceId: number\n}\n\n/**\n * Look save event\n * Looker version 21.6+\n */\nexport interface LookSaveEvent extends LookerEmbedEvent {\n  look: LookSaveEventDetail\n}\n\n/**\n * Explore page event details\n */\n\nexport interface ExploreEventDetail extends EventDetail {\n  absoluteUrl: string\n  url: string\n}\n\n/**\n * Explore page event.\n */\n\nexport interface ExploreEvent extends LookerEmbedEvent {\n  explore: ExploreEventDetail\n}\n\n/**\n * Page changed event details\n */\n\nexport interface PageChangedEventDetail extends EventDetail {\n  type: string\n  url: string\n  absoluteUrl: string\n}\n\n/**\n * Page changed event. These are generated when navigating from one page to another.\n */\nexport interface PageChangedEvent extends LookerEmbedEvent {\n  page: PageChangedEventDetail\n}\n\n/**\n * Page properties changed event. These are generated when a significant property changes on a page,\n * like when a dashboard's height changes.\n */\n\nexport interface PagePropertiesChangedEvent extends LookerEmbedEvent {\n  height?: number\n}\n\n/**\n * Cancellable event response\n */\n\nexport interface CancellableEventResponse {\n  cancel: boolean\n}\n\n/**\n * Current Looker embed events as of version 6.20 (except where stated)\n */\n\nexport interface LookerEmbedEventMap {\n  'dashboard:run:start': (\n    this: LookerEmbedDashboard,\n    event: DashboardEvent\n  ) => void\n  'dashboard:run:complete': (\n    this: LookerEmbedDashboard,\n    event: DashboardEvent\n  ) => void\n  'dashboard:filters:changed': (\n    this: LookerEmbedDashboard,\n    event: DashboardEvent\n  ) => void\n  /**\n   * Dashboard editing started event.\n   * Not available to legacy dashboards.\n   * Looker 22.20+\n   */\n  'dashboard:edit:start': (\n    this: LookerEmbedDashboard,\n    event: DashboardEvent\n  ) => void\n  /**\n   * Dashboard editing cancelled event.\n   * Not available to legacy dashboards.\n   * Looker 22.20+\n   */\n  'dashboard:edit:cancel': (\n    this: LookerEmbedDashboard,\n    event: DashboardEvent\n  ) => void\n  /**\n   * Dashboard saved event. Fired when a dashboard\n   * being edited is saved. Use in conjunction with\n   * `dashboard:edit:start` and `dashboard:edit:save`.\n   * Looker 21.6+\n   */\n  'dashboard:save:complete': (\n    this: LookerEmbedDashboard,\n    event: DashboardEvent\n  ) => void\n  /**\n   * Dashboard deleted event\n   * Looker 21.6+\n   */\n  'dashboard:delete:complete': (\n    this: LookerEmbedDashboard,\n    event: DashboardEvent\n  ) => void\n  'dashboard:tile:start': (\n    this: LookerEmbedDashboard,\n    event: DashboardTileEvent\n  ) => void\n  'dashboard:tile:complete': (\n    this: LookerEmbedDashboard,\n    event: DashboardTileEvent\n  ) => void\n  'dashboard:tile:download': (\n    this: LookerEmbedDashboard,\n    event: DashboardTileDownloadEvent\n  ) => void\n  'dashboard:tile:explore': (\n    this: LookerEmbedDashboard,\n    event: DashboardTileExploreEvent\n  ) => CancellableEventResponse | undefined\n  'dashboard:tile:view': (\n    this: LookerEmbedDashboard,\n    event: DashboardTileViewEvent\n  ) => CancellableEventResponse | undefined\n\n  'drillmenu:click': (\n    this: LookerEmbedBase,\n    event: DrillMenuEvent\n  ) => CancellableEventResponse | undefined\n  'drillmodal:explore': (\n    this: LookerEmbedBase,\n    event: DrillModalExploreEvent\n  ) => CancellableEventResponse | undefined\n\n  'explore:run:start': (this: LookerEmbedLook, event: ExploreEvent) => void\n  'explore:run:complete': (this: LookerEmbedLook, event: ExploreEvent) => void\n  'explore:ready': (this: LookerEmbedLook, event: ExploreEvent) => void\n  'explore:state:changed': (this: LookerEmbedLook, event: ExploreEvent) => void\n\n  'look:run:start': (this: LookerEmbedLook, event: LookEvent) => void\n  'look:run:complete': (this: LookerEmbedLook, event: LookEvent) => void\n  /**\n   * Look saved event\n   * Looker 21.6+\n   */\n  'look:save:complete': (this: LookerEmbedLook, event: LookSaveEvent) => void\n  /**\n   * Look deleted event\n   * Looker 21.6+\n   */\n  'look:delete:complete': (this: LookerEmbedLook, event: LookSaveEvent) => void\n  'look:ready': (this: LookerEmbedLook, event: LookEvent) => void\n  'look:state:changed': (this: LookerEmbedLook, event: LookEvent) => void\n\n  'page:changed': (this: LookerEmbedBase, event: PageChangedEvent) => void\n  'page:properties:changed': (\n    this: LookerEmbedBase,\n    event: PagePropertiesChangedEvent\n  ) => void\n  /**\n   * Cookieless embed session tokens request event\n   * Looker 22.20+\n   */\n  'session:token:request': (\n    this: LookerEmbedBase,\n    event: SessionTokenRequest\n  ) => void\n  /**\n   * Cookieless embed session status event\n   * Looker 23.0+\n   */\n  'session:status': (this: LookerEmbedBase, event: SessionStatus) => void\n\n  [key: string]: any\n}\n"]},"metadata":{},"sourceType":"script"}