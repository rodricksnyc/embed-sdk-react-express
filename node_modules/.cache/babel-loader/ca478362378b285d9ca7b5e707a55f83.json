{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n\nlet _ = t => t,\n    _t;\n\nimport React, { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { useID } from '../../../utils';\nimport { useFormContext } from '../../Form';\nimport { SelectMulti } from '../../Inputs/Select/SelectMulti';\nimport { FloatingLabelField, omitFieldProps, pickFieldProps } from '../Field';\n\nconst getHasValue = _ref => {\n  let {\n    values,\n    defaultValues\n  } = _ref;\n  if (values !== undefined) return values.length > 0;\n  if (defaultValues !== undefined) return defaultValues.length > 0;\n  return false;\n};\n\nconst checkValueOnBlur = e => {\n  const target = e.currentTarget;\n  const options = target.querySelectorAll('[role=\"option\"]');\n  return options.length !== 0;\n};\n\nconst FieldSelectMultiComponent = forwardRef((props, ref) => {\n  const validationMessage = useFormContext(props);\n  const id = useID(props.id);\n  return React.createElement(FloatingLabelField, _extends({\n    \"data-testid\": \"FieldSelectMultiId\"\n  }, pickFieldProps(props), {\n    id: id,\n    ariaLabelOnly: true,\n    validationMessage: validationMessage,\n    hasValue: getHasValue(props),\n    checkValueOnBlur: checkValueOnBlur\n  }), React.createElement(SelectMulti, _extends({}, omitFieldProps(props), {\n    \"aria-describedby\": `describedby-${id}`,\n    \"aria-labelledby\": `labelledby-${id}`,\n    id: id,\n    validationType: validationMessage && validationMessage.type,\n    ref: ref\n  })));\n});\nFieldSelectMultiComponent.displayName = 'FieldSelectMultiComponent';\nexport const FieldSelectMulti = styled(FieldSelectMultiComponent).withConfig({\n  displayName: \"FieldSelectMulti\",\n  componentId: \"sc-ze3grr-0\"\n})(_t || (_t = _`\n  width: 100%;\n`));","map":{"version":3,"mappings":";;;;;AAMA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,cAAT,QAA+B,YAA/B;AAEA,SAASC,WAAT,QAA4B,iCAA5B;AAEA,SAASC,kBAAT,EAA6BC,cAA7B,EAA6CC,cAA7C,QAAmE,UAAnE;;AAMA,MAAMC,WAAW,GAAG,QAAiD;EAAA,IAAhD;IAAEC,MAAF;IAAUC;EAAV,CAAgD;EACnE,IAAID,MAAM,KAAKE,SAAf,EAA0B,OAAOF,MAAM,CAACG,MAAPH,GAAgB,CAAvB;EAC1B,IAAIC,aAAa,KAAKC,SAAtB,EAAiC,OAAOD,aAAa,CAACE,MAAdF,GAAuB,CAA9B;EACjC,OAAO,KAAP;AACD,CAJD;;AAMA,MAAMG,gBAAgB,GAAIC,CAAa,IAAK;EAC1C,MAAMC,MAAM,GAAGD,CAAC,CAACE,aAAjB;EACA,MAAMC,OAAO,GAAGF,MAAM,CAACG,gBAAPH,CAAwB,iBAAxBA,CAAhB;EACA,OAAOE,OAAO,CAACL,MAARK,KAAmB,CAA1B;AACD,CAJD;;AAMA,MAAME,yBAAyB,GAAGnB,UAAU,CAC1C,CAACoB,KAAD,EAA+BC,GAA/B,KAA8D;EAC5D,MAAMC,iBAAiB,GAAGnB,cAAc,CAACiB,KAAD,CAAxC;EACA,MAAMG,EAAE,GAAGrB,KAAK,CAACkB,KAAK,CAACG,EAAP,CAAhB;EACA,OACExB,oBAACM,kBAAD,EAAmBmB;IACjB,eAAY;EADK,GAEbjB,cAAc,CAACa,KAAD,CAFD,EAEQ;IACzBG,EAAE,EAAEA,EADqB;IAEzBE,aAAa,MAFY;IAGzBH,iBAAiB,EAAEA,iBAHM;IAIzBI,QAAQ,EAAElB,WAAW,CAACY,KAAD,CAJI;IAKzBP,gBAAgB,EAAEA;EALO,CAFR,CAAnB,EASEd,oBAACK,WAAD,EAAYoB,aACNlB,cAAc,CAACc,KAAD,CADR,EACe;IACzB,oBAAmB,eAAcG,EAAG,EADX;IAEzB,mBAAkB,cAAaA,EAAG,EAFT;IAGzBA,EAAE,EAAEA,EAHqB;IAIzBI,cAAc,EAAEL,iBAAiB,IAAIA,iBAAiB,CAACM,IAJ9B;IAKzBP,GAAG,EAAEA;EALoB,CADf,CAAZ,CATF,CADF;AAoBD,CAxByC,CAA5C;AA2BAF,yBAAyB,CAACU,WAA1BV,GAAwC,2BAAxCA;AAEA,OAAO,MAAMW,gBAAgB,GAAG7B,MAAM,CAACkB,yBAAD,CAANlB,CAAiC8B,UAAjC9B,CAAiC;EAAA4B;EAAAG;AAAA,CAAjC/B,EAAiCgC,aAAC;AAClE;AACA,CAFiE,CAAjChC,CAAzB","names":["React","forwardRef","styled","useID","useFormContext","SelectMulti","FloatingLabelField","omitFieldProps","pickFieldProps","getHasValue","values","defaultValues","undefined","length","checkValueOnBlur","e","target","currentTarget","options","querySelectorAll","FieldSelectMultiComponent","props","ref","validationMessage","id","_extends","ariaLabelOnly","hasValue","validationType","type","displayName","FieldSelectMulti","withConfig","componentId","_t"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Fields/FieldSelectMulti/FieldSelectMulti.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { FocusEvent, Ref } from 'react'\nimport React, { forwardRef } from 'react'\nimport styled from 'styled-components'\nimport { useID } from '../../../utils'\nimport { useFormContext } from '../../Form'\nimport type { SelectMultiProps } from '../../Inputs/Select/SelectMulti'\nimport { SelectMulti } from '../../Inputs/Select/SelectMulti'\nimport type { FloatingLabelFieldProps } from '../Field'\nimport { FloatingLabelField, omitFieldProps, pickFieldProps } from '../Field'\n\nexport interface FieldSelectMultiProps\n  extends FloatingLabelFieldProps,\n    SelectMultiProps {}\n\nconst getHasValue = ({ values, defaultValues }: SelectMultiProps) => {\n  if (values !== undefined) return values.length > 0\n  if (defaultValues !== undefined) return defaultValues.length > 0\n  return false\n}\n\nconst checkValueOnBlur = (e: FocusEvent) => {\n  const target = e.currentTarget\n  const options = target.querySelectorAll('[role=\"option\"]')\n  return options.length !== 0\n}\n\nconst FieldSelectMultiComponent = forwardRef(\n  (props: FieldSelectMultiProps, ref: Ref<HTMLInputElement>) => {\n    const validationMessage = useFormContext(props)\n    const id = useID(props.id)\n    return (\n      <FloatingLabelField\n        data-testid=\"FieldSelectMultiId\"\n        {...pickFieldProps(props)}\n        id={id}\n        ariaLabelOnly\n        validationMessage={validationMessage}\n        hasValue={getHasValue(props)}\n        checkValueOnBlur={checkValueOnBlur}\n      >\n        <SelectMulti\n          {...omitFieldProps(props)}\n          aria-describedby={`describedby-${id}`}\n          aria-labelledby={`labelledby-${id}`}\n          id={id}\n          validationType={validationMessage && validationMessage.type}\n          ref={ref}\n        />\n      </FloatingLabelField>\n    )\n  }\n)\n\nFieldSelectMultiComponent.displayName = 'FieldSelectMultiComponent'\n\nexport const FieldSelectMulti = styled(FieldSelectMultiComponent)`\n  width: 100%;\n`\n"]},"metadata":{},"sourceType":"module"}