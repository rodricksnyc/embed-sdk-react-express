{"ast":null,"code":"var _jsxFileName = \"/Users/elizabethrodricks/Downloads/express-react-starter-master/src/components/EmbedDashboard1.js\",\n    _s = $RefreshSig$();\n\n// Embedded dashboards let you build an interactive and highly curated data experience within your application\n// This file is used to embed a dashboard using LookerEmbedSDK with EmbedBuilder to initialize your connection and help create the iframe element\nimport React, { useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { LookerEmbedSDK } from \"@looker/embed-sdk\";\nimport { Space } from \"@looker/components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EmbedDashboard1 = () => {\n  _s();\n\n  const [loading, setLoading] = React.useState(true);\n  /*\n   Step 1 Initialization of the EmbedSDK happens when the user first access the application\n   See App.js for reference\n  */\n\n  const makeDashboard = useCallback(el => {\n    if (!el) {\n      return;\n    }\n\n    el.innerHTML = \"\";\n    /*\n      Step 2 Create your dashboard (or other piece of embedded content) through a simple set of chained methods\n    */\n\n    LookerEmbedSDK.createDashboardWithId(\"data_block_acs_bigquery::acs_census_overview\") // adds the iframe to the DOM as a child of a specific element\n    .appendTo(el) // the .on() method allows us to listen for and respond to events inside the iframe. See here for a list of events: https://docs.looker.com/reference/embedding/embed-javascript-events\n    .on(\"dashboard:loaded\", e => {\n      console.log(\"LookerEmbedSDK.createDashboardWithId()::Successfully Loaded!\");\n    }) // this line performs the call to the auth service to get the iframe's src='' url, places it in the iframe and the client performs the request to Looker\n    .build() // this establishes event communication between the iframe and parent page\n    .connect().then(() => setLoading(false)) // catch various errors which can occur in the process (note: does not catch 404 on content)\n    .catch(error => {\n      console.error(\"An unexpected error occurred\", error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Space, {\n    height: \"calc(100% - 45px)\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"embed-dashboard-main\",\n      children: [\"/>\", /*#__PURE__*/_jsxDEV(Dashboard, {\n        ref: makeDashboard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}; // A little bit of style here for heights and widths.\n\n\n_s(EmbedDashboard1, \"Cb0PAQMV0K/T95Q2cEl/Bfm2Whg=\");\n\n_c = EmbedDashboard1;\nconst Dashboard = styled.div`\n  width: 100%;\n  height: calc(100% - 30px);\n  & > iframe {\n    width: 100%;\n    height: 100%;\n  }\n`;\n_c2 = Dashboard;\nexport default EmbedDashboard1;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EmbedDashboard1\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"names":["React","useCallback","styled","LookerEmbedSDK","Space","EmbedDashboard1","loading","setLoading","useState","makeDashboard","el","innerHTML","createDashboardWithId","appendTo","on","e","console","log","build","connect","then","catch","error","Dashboard","div"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/src/components/EmbedDashboard1.js"],"sourcesContent":["// Embedded dashboards let you build an interactive and highly curated data experience within your application\n// This file is used to embed a dashboard using LookerEmbedSDK with EmbedBuilder to initialize your connection and help create the iframe element\n\nimport React, { useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { LookerEmbedSDK } from \"@looker/embed-sdk\";\nimport { Space } from \"@looker/components\";\n\n\n\n\nconst EmbedDashboard1 = () => {\n  const [loading, setLoading] = React.useState(true);\n  /*\n   Step 1 Initialization of the EmbedSDK happens when the user first access the application\n   See App.js for reference\n  */\n\n  const makeDashboard = useCallback((el) => {\n    if (!el) {\n      return;\n    }\n    el.innerHTML = \"\";\n    /*\n      Step 2 Create your dashboard (or other piece of embedded content) through a simple set of chained methods\n    */\n    LookerEmbedSDK.createDashboardWithId(\n      \"data_block_acs_bigquery::acs_census_overview\"\n    )\n      // adds the iframe to the DOM as a child of a specific element\n      .appendTo(el)\n      // the .on() method allows us to listen for and respond to events inside the iframe. See here for a list of events: https://docs.looker.com/reference/embedding/embed-javascript-events\n      .on(\"dashboard:loaded\", (e) => {\n        console.log(\"LookerEmbedSDK.createDashboardWithId()::Successfully Loaded!\");\n      })\n      // this line performs the call to the auth service to get the iframe's src='' url, places it in the iframe and the client performs the request to Looker\n      .build()\n      // this establishes event communication between the iframe and parent page\n      .connect()\n      .then(() => setLoading(false))\n      // catch various errors which can occur in the process (note: does not catch 404 on content)\n      .catch((error) => {\n        console.error(\"An unexpected error occurred\", error);\n      });\n  }, []);\n\n  return (\n    <Space height=\"calc(100% - 45px)\">\n      <div className={\"embed-dashboard-main\"}>\n\n      />\n        {/* Step 0) we have a simple container, which performs a callback to our makeDashboard function */}\n        <Dashboard ref={makeDashboard}></Dashboard>\n      </div>\n    </Space>\n  );\n};\n\n// A little bit of style here for heights and widths.\nconst Dashboard = styled.div`\n  width: 100%;\n  height: calc(100% - 30px);\n  & > iframe {\n    width: 100%;\n    height: 100%;\n  }\n`;\nexport default EmbedDashboard1;\n"],"mappings":";;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,KAAT,QAAsB,oBAAtB;;;AAKA,MAAMC,eAAe,GAAG,MAAM;EAAA;;EAC5B,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,KAAK,CAACQ,QAAN,CAAe,IAAf,CAA9B;EACA;AACF;AACA;AACA;;EAEE,MAAMC,aAAa,GAAGR,WAAW,CAAES,EAAD,IAAQ;IACxC,IAAI,CAACA,EAAL,EAAS;MACP;IACD;;IACDA,EAAE,CAACC,SAAH,GAAe,EAAf;IACA;AACJ;AACA;;IACIR,cAAc,CAACS,qBAAf,CACE,8CADF,EAGE;IAHF,CAIGC,QAJH,CAIYH,EAJZ,EAKE;IALF,CAMGI,EANH,CAMM,kBANN,EAM2BC,CAAD,IAAO;MAC7BC,OAAO,CAACC,GAAR,CAAY,8DAAZ;IACD,CARH,EASE;IATF,CAUGC,KAVH,GAWE;IAXF,CAYGC,OAZH,GAaGC,IAbH,CAaQ,MAAMb,UAAU,CAAC,KAAD,CAbxB,EAcE;IAdF,CAeGc,KAfH,CAeUC,KAAD,IAAW;MAChBN,OAAO,CAACM,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;IACD,CAjBH;EAkBD,CA1BgC,EA0B9B,EA1B8B,CAAjC;EA4BA,oBACE,QAAC,KAAD;IAAO,MAAM,EAAC,mBAAd;IAAA,uBACE;MAAK,SAAS,EAAE,sBAAhB;MAAA,8BAIE,QAAC,SAAD;QAAW,GAAG,EAAEb;MAAhB;QAAA;QAAA;QAAA;MAAA,QAJF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAUD,CA7CD,C,CA+CA;;;GA/CMJ,e;;KAAAA,e;AAgDN,MAAMkB,SAAS,GAAGrB,MAAM,CAACsB,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;MAAMD,S;AAQN,eAAelB,eAAf"},"metadata":{},"sourceType":"module"}