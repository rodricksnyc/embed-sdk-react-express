{"ast":null,"code":"import React from 'react';\nimport { Span } from '../Text/Span';\nimport { useTooltip } from '../Tooltip';\nimport { isOverflowing } from '../utils';\nexport const useTruncateTooltip = _ref => {\n  let {\n    children,\n    description,\n    element\n  } = _ref;\n  return useTooltip({\n    canOpen: triggerElement => description !== undefined || isOverflowing(element || triggerElement),\n    content: React.createElement(React.Fragment, null, children, description && React.createElement(React.Fragment, null, React.createElement(\"br\", null), React.createElement(Span, {\n      color: \"text2\"\n    }, description))),\n    invert: false,\n    placement: 'top-start',\n    textAlign: 'left',\n    width: 'auto'\n  });\n};","map":{"version":3,"mappings":"AAKA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,aAAT,QAA8B,UAA9B;AAQA,OAAO,MAAMC,kBAAkB,GAAG,QAIH;EAAA,IAJI;IACjCC,QADiC;IAEjCC,WAFiC;IAGjCC;EAHiC,CAIJ;EAC7B,OAAOL,UAAU,CAAC;IAEhBM,OAAO,EAAGC,cAA2B,IACnCH,WAAW,KAAKI,SAAhBJ,IAA6BH,aAAa,CAACI,OAAO,IAAIE,cAAZ,CAH5B;IAIhBE,OAAO,EACLX,0CACGK,QADH,EAEGC,WAAW,IACVN,0CACEA,+BADF,EAEEA,oBAACC,IAAD,EAAK;MAACW,KAAK,EAAC;IAAP,CAAL,EAAqBN,WAArB,CAFF,CAHJ,CALc;IAehBO,MAAM,EAAE,KAfQ;IAgBhBC,SAAS,EAAE,WAhBK;IAiBhBC,SAAS,EAAE,MAjBK;IAkBhBC,KAAK,EAAE;EAlBS,CAAD,CAAjB;AAoBD,CAzBM","names":["React","Span","useTooltip","isOverflowing","useTruncateTooltip","children","description","element","canOpen","triggerElement","undefined","content","color","invert","placement","textAlign","width"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Truncate/useTruncateTooltip.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport type { ReactNode } from 'react'\nimport { Span } from '../Text/Span'\nimport { useTooltip } from '../Tooltip'\nimport { isOverflowing } from '../utils'\n\nexport type UseTruncateTooltipProps = {\n  children: ReactNode\n  description?: string\n  element?: HTMLElement | null\n}\n\nexport const useTruncateTooltip = ({\n  children,\n  description,\n  element,\n}: UseTruncateTooltipProps) => {\n  return useTooltip({\n    // only render tooltip if text actually overflows (or if there's a description)\n    canOpen: (triggerElement: HTMLElement) =>\n      description !== undefined || isOverflowing(element || triggerElement),\n    content: (\n      <>\n        {children}\n        {description && (\n          <>\n            <br />\n            <Span color=\"text2\">{description}</Span>\n          </>\n        )}\n      </>\n    ),\n    invert: false,\n    placement: 'top-start',\n    textAlign: 'left',\n    width: 'auto',\n  })\n}\n"]},"metadata":{},"sourceType":"module"}