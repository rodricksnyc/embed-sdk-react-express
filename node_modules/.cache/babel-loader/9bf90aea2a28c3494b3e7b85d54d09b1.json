{"ast":null,"code":"export const mergeHandlers = (newHandler, existingHandler) => event => {\n  existingHandler === null || existingHandler === void 0 ? void 0 : existingHandler(event);\n\n  if (!event.defaultPrevented) {\n    newHandler === null || newHandler === void 0 ? void 0 : newHandler(event);\n  }\n};","map":{"version":3,"mappings":"AAYA,OAAO,MAAMA,aAAa,GACxB,CACEC,UADF,EAEEC,eAFF,KAICC,KAAQ,IAAK;EACZD,eAAe,SAAfA,mBAAe,WAAfA,GAAe,MAAfA,kBAAe,CAAGC,KAAH,CAAfD;;EACA,IAAI,CAACC,KAAK,CAACC,gBAAX,EAA6B;IAC3BH,UAAU,SAAVA,cAAU,WAAVA,GAAU,MAAVA,aAAU,CAAGE,KAAH,CAAVF;EACF;AACD,CAVI","names":["mergeHandlers","newHandler","existingHandler","event","defaultPrevented"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/mergeHandlers.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { SyntheticEvent } from 'react'\n\n/**\n * Merges 2 optional event handlers\n * @param newHandler called 2nd, if the 1st does not call preventDefault()\n * @param existingHandler called 1st, use preventDefault() to avoid calling the 2nd\n */\nexport const mergeHandlers =\n  <E extends SyntheticEvent>(\n    newHandler?: (e: E) => void,\n    existingHandler?: (e: E) => void\n  ) =>\n  (event: E) => {\n    existingHandler?.(event)\n    if (!event.defaultPrevented) {\n      newHandler?.(event)\n    }\n  }\n"]},"metadata":{},"sourceType":"module"}