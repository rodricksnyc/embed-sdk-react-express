{"ast":null,"code":"import React from 'react';\nimport { ChevronLeft } from '@styled-icons/material-rounded/ChevronLeft/ChevronLeft';\nimport { ChevronRight } from '@styled-icons/material-rounded/ChevronRight/ChevronRight';\nimport { ArrowDropDown } from '@styled-icons/material/ArrowDropDown/ArrowDropDown';\nimport { getMonth, setMonth } from 'date-fns';\nimport { ButtonTransparent, IconButton } from '../Button';\nimport { Space } from '../Layout';\nimport { useTranslation } from '../utils';\nimport { formatDateString } from './utils';\nexport const CalendarNav = _ref => {\n  let {\n    locale,\n    monthYear,\n    onMonthChange,\n    onOpenMonthPicker\n  } = _ref;\n  const {\n    t\n  } = useTranslation('CalendarNav');\n\n  const handleNextMonth = () => {\n    onMonthChange && onMonthChange(setMonth(monthYear, getMonth(monthYear) + 1));\n  };\n\n  const handlePreviousMonth = () => {\n    onMonthChange && onMonthChange(setMonth(monthYear, getMonth(monthYear) - 1));\n  };\n\n  return React.createElement(Space, {\n    py: \"u3\",\n    px: \"u4\"\n  }, React.createElement(ButtonTransparent, {\n    color: \"neutral\",\n    iconAfter: React.createElement(ArrowDropDown, null),\n    onClick: onOpenMonthPicker,\n    size: \"xsmall\"\n  }, formatDateString(monthYear, 'MMM yyyy', locale)), React.createElement(Space, {\n    justify: \"end\",\n    gap: \"xsmall\"\n  }, React.createElement(IconButton, {\n    icon: React.createElement(ChevronLeft, null),\n    label: t('previous month'),\n    onClick: handlePreviousMonth\n  }), React.createElement(IconButton, {\n    icon: React.createElement(ChevronRight, null),\n    label: t('next month'),\n    onClick: handleNextMonth\n  })));\n};","map":{"version":3,"mappings":"AAIA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,wDAA5B;AACA,SAASC,YAAT,QAA6B,0DAA7B;AACA,SAASC,aAAT,QAA8B,oDAA9B;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,UAAnC;AACA,SAASC,iBAAT,EAA4BC,UAA5B,QAA8C,WAA9C;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,cAAT,QAA+B,UAA/B;AAEA,SAASC,gBAAT,QAAiC,SAAjC;AAQA,OAAO,MAAMC,WAAW,GAAG,QAKH;EAAA,IALI;IAC1BC,MAD0B;IAE1BC,SAF0B;IAG1BC,aAH0B;IAI1BC;EAJ0B,CAKJ;EACtB,MAAM;IAAEC;EAAF,IAAQP,cAAc,CAAC,aAAD,CAA5B;;EAEA,MAAMQ,eAAe,GAAG,MAAM;IAC5BH,aAAa,IAAIA,aAAa,CAACT,QAAQ,CAACQ,SAAD,EAAYT,QAAQ,CAACS,SAAD,CAART,GAAsB,CAAlC,CAAT,CAA9BU;EACD,CAFD;;EAIA,MAAMI,mBAAmB,GAAG,MAAM;IAChCJ,aAAa,IAAIA,aAAa,CAACT,QAAQ,CAACQ,SAAD,EAAYT,QAAQ,CAACS,SAAD,CAART,GAAsB,CAAlC,CAAT,CAA9BU;EACD,CAFD;;EAIA,OACEd,oBAACQ,KAAD,EAAM;IAACW,EAAE,EAAC,IAAJ;IAASC,EAAE,EAAC;EAAZ,CAAN,EACEpB,oBAACM,iBAAD,EAAkB;IAChBe,KAAK,EAAC,SADU;IAEhBC,SAAS,EAAEtB,oBAACG,aAAD,EAAc,IAAd,CAFK;IAGhBoB,OAAO,EAAER,iBAHO;IAIhBS,IAAI,EAAC;EAJW,CAAlB,EAMGd,gBAAgB,CAACG,SAAD,EAAY,UAAZ,EAAwBD,MAAxB,CANnB,CADF,EASEZ,oBAACQ,KAAD,EAAM;IAACiB,OAAO,EAAC,KAAT;IAAeC,GAAG,EAAC;EAAnB,CAAN,EACE1B,oBAACO,UAAD,EAAW;IACToB,IAAI,EAAE3B,oBAACC,WAAD,EAAY,IAAZ,CADG;IAET2B,KAAK,EAAEZ,CAAC,CAAC,gBAAD,CAFC;IAGTO,OAAO,EAAEL;EAHA,CAAX,CADF,EAOElB,oBAACO,UAAD,EAAW;IACToB,IAAI,EAAE3B,oBAACE,YAAD,EAAa,IAAb,CADG;IAET0B,KAAK,EAAEZ,CAAC,CAAC,YAAD,CAFC;IAGTO,OAAO,EAAEN;EAHA,CAAX,CAPF,CATF,CADF;AAyBD,CAzCM","names":["React","ChevronLeft","ChevronRight","ArrowDropDown","getMonth","setMonth","ButtonTransparent","IconButton","Space","useTranslation","formatDateString","CalendarNav","locale","monthYear","onMonthChange","onOpenMonthPicker","t","handleNextMonth","handlePreviousMonth","py","px","color","iconAfter","onClick","size","justify","gap","icon","label"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Calendar/CalendarNav.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport { ChevronLeft } from '@styled-icons/material-rounded/ChevronLeft/ChevronLeft'\nimport { ChevronRight } from '@styled-icons/material-rounded/ChevronRight/ChevronRight'\nimport { ArrowDropDown } from '@styled-icons/material/ArrowDropDown/ArrowDropDown'\nimport { getMonth, setMonth } from 'date-fns'\nimport { ButtonTransparent, IconButton } from '../Button'\nimport { Space } from '../Layout'\nimport { useTranslation } from '../utils'\nimport type { CalendarLocaleProps, NavCB } from './types'\nimport { formatDateString } from './utils'\n\nexport type CalendarNavProps = Pick<CalendarLocaleProps, 'locale'> & {\n  monthYear: Date\n  onMonthChange: NavCB\n  onOpenMonthPicker: () => void\n}\n\nexport const CalendarNav = ({\n  locale,\n  monthYear,\n  onMonthChange,\n  onOpenMonthPicker,\n}: CalendarNavProps) => {\n  const { t } = useTranslation('CalendarNav')\n\n  const handleNextMonth = () => {\n    onMonthChange && onMonthChange(setMonth(monthYear, getMonth(monthYear) + 1))\n  }\n\n  const handlePreviousMonth = () => {\n    onMonthChange && onMonthChange(setMonth(monthYear, getMonth(monthYear) - 1))\n  }\n\n  return (\n    <Space py=\"u3\" px=\"u4\">\n      <ButtonTransparent\n        color=\"neutral\"\n        iconAfter={<ArrowDropDown />}\n        onClick={onOpenMonthPicker}\n        size=\"xsmall\"\n      >\n        {formatDateString(monthYear, 'MMM yyyy', locale)}\n      </ButtonTransparent>\n      <Space justify=\"end\" gap=\"xsmall\">\n        <IconButton\n          icon={<ChevronLeft />}\n          label={t('previous month')}\n          onClick={handlePreviousMonth}\n        />\n\n        <IconButton\n          icon={<ChevronRight />}\n          label={t('next month')}\n          onClick={handleNextMonth}\n        />\n      </Space>\n    </Space>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}