{"ast":null,"code":"import { useMemo } from 'react';\nexport const getFlatOptions = options => options.reduce((acc, option) => {\n  const optionAsGroup = option;\n\n  if (optionAsGroup.options) {\n    const groupPseudoOptions = [{}];\n\n    if (optionAsGroup.label) {\n      groupPseudoOptions.push({\n        label: optionAsGroup.label\n      });\n    }\n\n    return {\n      flatOptions: [...acc.flatOptions, ...groupPseudoOptions, ...optionAsGroup.options],\n      navigationOptions: [...acc.navigationOptions, ...optionAsGroup.options]\n    };\n  }\n\n  return {\n    flatOptions: [...acc.flatOptions, option],\n    navigationOptions: [...acc.navigationOptions, option]\n  };\n}, {\n  flatOptions: [],\n  navigationOptions: []\n});\nexport const useFlatOptions = options => {\n  return useMemo(() => {\n    if (!options) return {\n      flatOptions: undefined,\n      navigationOptions: undefined\n    };\n    return getFlatOptions(options);\n  }, [options]);\n};","map":{"version":3,"mappings":"AAKA,SAASA,OAAT,QAAwB,OAAxB;AAQA,OAAO,MAAMC,cAAc,GAAIC,OAA4B,IACzDA,OAAO,CAACC,MAARD,CACE,CACEE,GADF,EAKEC,MALF,KAMK;EACH,MAAMC,aAAa,GAAGD,MAAtB;;EACA,IAAIC,aAAa,CAACJ,OAAlB,EAA2B;IAEzB,MAAMK,kBAAkB,GAAG,CAAC,EAAD,CAA3B;;IACA,IAAID,aAAa,CAACE,KAAlB,EAAyB;MAEvBD,kBAAkB,CAACE,IAAnBF,CAAwB;QAAEC,KAAK,EAAEF,aAAa,CAACE;MAAvB,CAAxBD;IACF;;IACA,OAAO;MACLG,WAAW,EAAE,CACX,GAAGN,GAAG,CAACM,WADI,EAEX,GAAGH,kBAFQ,EAGX,GAAGD,aAAa,CAACJ,OAHN,CADR;MAMLS,iBAAiB,EAAE,CACjB,GAAGP,GAAG,CAACO,iBADU,EAEjB,GAAGL,aAAa,CAACJ,OAFA;IANd,CAAP;EAWF;;EACA,OAAO;IACLQ,WAAW,EAAE,CAAC,GAAGN,GAAG,CAACM,WAAR,EAAqBL,MAArB,CADR;IAELM,iBAAiB,EAAE,CACjB,GAAGP,GAAG,CAACO,iBADU,EAEjBN,MAFiB;EAFd,CAAP;AAOD,CAnCHH,EAoCE;EAAEQ,WAAW,EAAE,EAAf;EAAmBC,iBAAiB,EAAE;AAAtC,CApCFT,CADK;AA8CP,OAAO,MAAMU,cAAc,GAAIV,OAA6B,IAAK;EAC/D,OAAOF,OAAO,CAAC,MAAM;IACnB,IAAI,CAACE,OAAL,EACE,OAAO;MAAEQ,WAAW,EAAEG,SAAf;MAA0BF,iBAAiB,EAAEE;IAA7C,CAAP;IAEF,OAAOZ,cAAc,CAACC,OAAD,CAArB;EACD,CALa,EAKX,CAACA,OAAD,CALW,CAAd;AAMD,CAPM","names":["useMemo","getFlatOptions","options","reduce","acc","option","optionAsGroup","groupPseudoOptions","label","push","flatOptions","navigationOptions","useFlatOptions","undefined"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Form/Inputs/Select/utils/useFlatOptions.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useMemo } from 'react'\nimport type {\n  FlatOption,\n  SelectOptionGroupProps,\n  SelectOptionObject,\n  SelectOptionProps,\n} from '../types'\n\nexport const getFlatOptions = (options: SelectOptionProps[]) =>\n  options.reduce(\n    (\n      acc: {\n        flatOptions: FlatOption[]\n        navigationOptions: SelectOptionObject[]\n      },\n      option: SelectOptionProps\n    ) => {\n      const optionAsGroup = option as SelectOptionGroupProps\n      if (optionAsGroup.options) {\n        // Include the divider\n        const groupPseudoOptions = [{}]\n        if (optionAsGroup.label) {\n          // ...and header as pseudo options for windowing purposes\n          groupPseudoOptions.push({ label: optionAsGroup.label })\n        }\n        return {\n          flatOptions: [\n            ...acc.flatOptions,\n            ...groupPseudoOptions,\n            ...optionAsGroup.options,\n          ],\n          navigationOptions: [\n            ...acc.navigationOptions,\n            ...optionAsGroup.options,\n          ],\n        }\n      }\n      return {\n        flatOptions: [...acc.flatOptions, option],\n        navigationOptions: [\n          ...acc.navigationOptions,\n          option as SelectOptionObject,\n        ],\n      }\n    },\n    { flatOptions: [], navigationOptions: [] }\n  )\n\n/**\n * Takes potentially grouped options and returns 2 arrays of flattened options:\n * 1) flatOptions that includes dividers & headers (used for windowing), and\n * 2) navigationOptions that only includes options with values\n * @param options\n */\nexport const useFlatOptions = (options?: SelectOptionProps[]) => {\n  return useMemo(() => {\n    if (!options)\n      return { flatOptions: undefined, navigationOptions: undefined }\n\n    return getFlatOptions(options)\n  }, [options])\n}\n"]},"metadata":{},"sourceType":"module"}