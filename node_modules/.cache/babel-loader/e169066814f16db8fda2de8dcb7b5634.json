{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport { useSafeLayoutEffect } from './useSafeLayoutEffect';\nimport { isOverflowing } from './isOverflowing';\nexport const useIsTruncated = (element, identity) => {\n  const [isTruncated, setIsTruncated] = useState(false);\n  const handleResize = useCallback(() => {\n    element && setIsTruncated(isOverflowing(element));\n  }, [element]);\n  useSafeLayoutEffect(() => {\n    if (!element) {\n      return;\n    }\n\n    const resizeObserver = new ResizeObserver(() => handleResize());\n\n    if (element) {\n      resizeObserver.observe(element);\n    }\n\n    return () => {\n      if (!resizeObserver) {\n        return;\n      }\n\n      resizeObserver.disconnect();\n    };\n  }, [handleResize, element, identity]);\n  return isTruncated;\n};","map":{"version":3,"mappings":"AAKA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAMA,OAAO,MAAMC,cAAc,GAAG,CAC5BC,OAD4B,EAE5BC,QAF4B,KAGhB;EACZ,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,KAAD,CAA9C;EAKA,MAAMS,YAAY,GAAGR,WAAW,CAAC,MAAM;IACrCI,OAAO,IAAIG,cAAc,CAACL,aAAa,CAACE,OAAD,CAAd,CAAzBA;EACD,CAF+B,EAE7B,CAACA,OAAD,CAF6B,CAAhC;EAIAH,mBAAmB,CAAC,MAAM;IACxB,IAAI,CAACG,OAAL,EAAc;MACZ;IACF;;IAEA,MAAMK,cAAc,GAAG,IAAIC,cAAJ,CAAmB,MAAMF,YAAY,EAArC,CAAvB;;IACA,IAAIJ,OAAJ,EAAa;MACXK,cAAc,CAACE,OAAfF,CAAuBL,OAAvBK;IACF;;IAEA,OAAO,MAAM;MACX,IAAI,CAACA,cAAL,EAAqB;QACnB;MACF;;MAEAA,cAAc,CAACG,UAAfH;IACD,CAND;EAOD,CAjBkB,EAiBhB,CAACD,YAAD,EAAeJ,OAAf,EAAwBC,QAAxB,CAjBgB,CAAnBJ;EAmBA,OAAOK,WAAP;AACD,CAjCM","names":["useState","useCallback","useSafeLayoutEffect","isOverflowing","useIsTruncated","element","identity","isTruncated","setIsTruncated","handleResize","resizeObserver","ResizeObserver","observe","disconnect"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useIsTruncated.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useState, useCallback } from 'react'\nimport { useSafeLayoutEffect } from './useSafeLayoutEffect'\nimport { isOverflowing } from './isOverflowing'\n\n/**\n * Detects if an element's content overflows its width using a ResizeObserver.\n * Avoid using repeatedly in long lists for performance concerns.\n */\nexport const useIsTruncated = (\n  element: HTMLElement | null,\n  identity?: number\n): boolean => {\n  const [isTruncated, setIsTruncated] = useState(false)\n\n  // Re-run truncation detection when element is resized.\n  // Could run on window resize or just dom element change\n  // thanks to Resize Observer.\n  const handleResize = useCallback(() => {\n    element && setIsTruncated(isOverflowing(element))\n  }, [element])\n\n  useSafeLayoutEffect(() => {\n    if (!element) {\n      return\n    }\n\n    const resizeObserver = new ResizeObserver(() => handleResize())\n    if (element) {\n      resizeObserver.observe(element as unknown as HTMLElement)\n    }\n\n    return () => {\n      if (!resizeObserver) {\n        return\n      }\n\n      resizeObserver.disconnect()\n    }\n  }, [handleResize, element, identity])\n\n  return isTruncated\n}\n"]},"metadata":{},"sourceType":"module"}