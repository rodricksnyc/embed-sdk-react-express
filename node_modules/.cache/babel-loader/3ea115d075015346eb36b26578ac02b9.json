{"ast":null,"code":"import { useRef } from 'react';\nconst un = 'uncontrolled';\nconst cont = 'controlled';\n\nfunction warnComponentControl(componentName, controllingProps) {\n  const propsText = controllingProps.slice(0, -1).join(',') + ' and ' + controllingProps.slice(-1);\n  const check = `Check the ${propsText} being passed in.`;\n  return changingToControlled => {\n    const from = changingToControlled ? un : cont;\n    const to = changingToControlled ? cont : un;\n    const warning = `${componentName} is changing from ${from} to ${to}. \\\n      ${componentName} should not switch from ${from} to ${to} (or vice versa). \\\n      Decide between using a ${cont} or ${un} ${componentName} for the \\\n      lifetime of the component. `;\n    console.warn(`${warning} ${check}`);\n  };\n}\n\nexport function useControlWarn(_ref) {\n  let {\n    isControlledCheck,\n    name,\n    controllingProps\n  } = _ref;\n  const {\n    current: isControlled\n  } = useRef(isControlledCheck());\n  const bgWarn = warnComponentControl(name, controllingProps);\n\n  if (isControlled && !isControlledCheck()) {\n    bgWarn(false);\n  }\n\n  if (!isControlled && isControlledCheck()) {\n    bgWarn(true);\n  }\n\n  return isControlled;\n}","map":{"version":3,"mappings":"AAKA,SAASA,MAAT,QAAuB,OAAvB;AAEA,MAAMC,EAAE,GAAG,cAAX;AACA,MAAMC,IAAI,GAAG,YAAb;;AAEA,SAASC,oBAAT,CACEC,aADF,EAEEC,gBAFF,EAGE;EACA,MAAMC,SAAS,GACbD,gBAAgB,CAACE,KAAjBF,CAAuB,CAAvBA,EAA0B,CAAC,CAA3BA,EAA8BG,IAA9BH,CAAmC,GAAnCA,IACA,OADAA,GAEAA,gBAAgB,CAACE,KAAjBF,CAAuB,CAAC,CAAxBA,CAHF;EAIA,MAAMI,KAAK,GAAI,aAAYH,SAAU,mBAArC;EACA,OAAQI,oBAA6B,IAAK;IACxC,MAAMC,IAAI,GAAGD,oBAAoB,GAAGT,EAAH,GAAQC,IAAzC;IACA,MAAMU,EAAE,GAAGF,oBAAoB,GAAGR,IAAH,GAAUD,EAAzC;IACA,MAAMY,OAAO,GAAI,GAAET,aAAc,qBAAoBO,IAAK,OAAMC,EAAG;AACvE,QAAQR,aAAc,2BAA0BO,IAAK,OAAMC,EAAG;AAC9D,+BAA+BV,IAAK,OAAMD,EAAG,IAAGG,aAAc;AAC9D,kCAHI;IAKAU,OAAO,CAACC,IAARD,CAAc,GAAED,OAAQ,IAAGJ,KAAM,EAAjCK;EACD,CATD;AAUF;;AAQA,OAAO,SAASE,cAAT,OAIiB;EAAA,IAJO;IAC7BC,iBAD6B;IAE7BC,IAF6B;IAG7Bb;EAH6B,CAIP;EACtB,MAAM;IAAEc,OAAO,EAAEC;EAAX,IAA4BpB,MAAM,CAACiB,iBAAiB,EAAlB,CAAxC;EACA,MAAMI,MAAM,GAAGlB,oBAAoB,CAACe,IAAD,EAAOb,gBAAP,CAAnC;;EAEA,IAAIe,YAAY,IAAI,CAACH,iBAAiB,EAAtC,EAA0C;IACxCI,MAAM,CAAC,KAAD,CAANA;EACF;;EAEA,IAAI,CAACD,YAAD,IAAiBH,iBAAiB,EAAtC,EAA0C;IACxCI,MAAM,CAAC,IAAD,CAANA;EACF;;EAEA,OAAOD,YAAP;AACF","names":["useRef","un","cont","warnComponentControl","componentName","controllingProps","propsText","slice","join","check","changingToControlled","from","to","warning","console","warn","useControlWarn","isControlledCheck","name","current","isControlled","bgWarn"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/utils/useControlWarn.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useRef } from 'react'\n\nconst un = 'uncontrolled'\nconst cont = 'controlled'\n\nfunction warnComponentControl(\n  componentName: string,\n  controllingProps: string[]\n) {\n  const propsText =\n    controllingProps.slice(0, -1).join(',') +\n    ' and ' +\n    controllingProps.slice(-1)\n  const check = `Check the ${propsText} being passed in.`\n  return (changingToControlled: boolean) => {\n    const from = changingToControlled ? un : cont\n    const to = changingToControlled ? cont : un\n    const warning = `${componentName} is changing from ${from} to ${to}. \\\n      ${componentName} should not switch from ${from} to ${to} (or vice versa). \\\n      Decide between using a ${cont} or ${un} ${componentName} for the \\\n      lifetime of the component. `\n    // eslint-disable-next-line no-console\n    console.warn(`${warning} ${check}`)\n  }\n}\n\nexport interface UseControlWarnProps {\n  isControlledCheck: () => boolean\n  name: string\n  controllingProps: string[]\n}\n\nexport function useControlWarn({\n  isControlledCheck,\n  name,\n  controllingProps,\n}: UseControlWarnProps) {\n  const { current: isControlled } = useRef(isControlledCheck())\n  const bgWarn = warnComponentControl(name, controllingProps)\n\n  if (isControlled && !isControlledCheck()) {\n    bgWarn(false)\n  }\n\n  if (!isControlled && isControlledCheck()) {\n    bgWarn(true)\n  }\n\n  return isControlled\n}\n"]},"metadata":{},"sourceType":"module"}