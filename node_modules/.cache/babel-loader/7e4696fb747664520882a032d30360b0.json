{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n\nlet _ = t => t,\n    _t;\n\nimport { TrapStackProvider } from '@looker/components-providers';\nimport React, { createContext } from 'react';\nimport styled from 'styled-components';\nexport const PanelsContext = createContext({});\nPanelsContext.displayName = 'PanelsContext';\n\nconst activatePanel = _ref => {\n  let {\n    element\n  } = _ref;\n  const panel = element.closest('[data-panel]');\n  const container = element.closest('[data-panels]');\n\n  if (panel && container) {\n    container.style.visibility = 'hidden';\n    panel.style.visibility = 'visible';\n  }\n\n  return () => {\n    if (panel && container) {\n      panel.style.visibility = '';\n      container.style.visibility = '';\n    }\n  };\n};\n\nexport const Panels = styled(props => {\n  return React.createElement(TrapStackProvider, {\n    activate: activatePanel,\n    context: PanelsContext\n  }, React.createElement(\"div\", _extends({}, props, {\n    \"data-panels\": true\n  })));\n}).withConfig({\n  displayName: \"Panels\",\n  componentId: \"sc-1214ocx-0\"\n})(_t || (_t = _`\n  height: 100%;\n  position: relative;\n  width: 100%;\n`));","map":{"version":3,"mappings":";;;;;AAMA,SAASA,iBAAT,QAAkC,8BAAlC;AAEA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAO,MAAMC,aAAa,GAAGF,aAAa,CAAwB,EAAxB,CAAnC;AACPE,aAAa,CAACC,WAAdD,GAA4B,eAA5BA;;AAEA,MAAME,aAAa,GAAG,QAAuB;EAAA,IAAtB;IAAEC;EAAF,CAAsB;EAI3C,MAAMC,KAAK,GAAGD,OAAO,CAACE,OAARF,CAAgC,cAAhCA,CAAd;EACA,MAAMG,SAAS,GAAGH,OAAO,CAACE,OAARF,CAAgC,eAAhCA,CAAlB;;EACA,IAAIC,KAAK,IAAIE,SAAb,EAAwB;IAItBA,SAAS,CAACC,KAAVD,CAAgBE,UAAhBF,GAA6B,QAA7BA;IAEAF,KAAK,CAACG,KAANH,CAAYI,UAAZJ,GAAyB,SAAzBA;EACF;;EAGA,OAAO,MAAM;IACX,IAAIA,KAAK,IAAIE,SAAb,EAAwB;MACtBF,KAAK,CAACG,KAANH,CAAYI,UAAZJ,GAAyB,EAAzBA;MACAE,SAAS,CAACC,KAAVD,CAAgBE,UAAhBF,GAA6B,EAA7BA;IACF;EACD,CALD;AAMD,CAtBD;;AA0BA,OAAO,MAAMG,MAAM,GAAGV,MAAM,CAAEW,KAAkB,IAAK;EAGnD,OACEb,oBAACD,iBAAD,EAAkB;IAACe,QAAQ,EAAET,aAAX;IAA0BU,OAAO,EAAEZ;EAAnC,CAAlB,EACEH,wCAASa,KAAT,EAAc;IAAE;EAAF,CAAd,EADF,CADF;AAKD,CAR2B,CAANX,CAQpBc,UARoBd,CAQpB;EAAAE;EAAAa;AAAA,CARoBf,EAQpBgB,aAAC;AACH;AACA;AACA;AACA,CAJE,CARoBhB,CAAf","names":["TrapStackProvider","React","createContext","styled","PanelsContext","displayName","activatePanel","element","panel","closest","container","style","visibility","Panels","props","activate","context","withConfig","componentId","_t"],"sources":["/Users/elizabethrodricks/Downloads/express-react-starter-master/node_modules/@looker/components/src/Panel/Panels.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { TrapStackContextProps, Trap } from '@looker/components-providers'\nimport { TrapStackProvider } from '@looker/components-providers'\nimport type { CompatibleHTMLProps } from '@looker/design-tokens'\nimport React, { createContext } from 'react'\nimport styled from 'styled-components'\n\nexport const PanelsContext = createContext<TrapStackContextProps>({})\nPanelsContext.displayName = 'PanelsContext'\n\nconst activatePanel = ({ element }: Trap) => {\n  // The element is a hidden div inside the panel\n  // NOTE: data-panel & data-panels are used as a quick way to find these elemens\n  // in the absence of an appropriate aria role\n  const panel = element.closest<HTMLDivElement>('[data-panel]')\n  const container = element.closest<HTMLDivElement>('[data-panels]')\n  if (panel && container) {\n    // The active Panel covers all other content in Panels\n    // Adding visibility: hidden to Panels avoids moving focus\n    // to any hidden content via keyboard nav\n    container.style.visibility = 'hidden'\n    // Override visibility only in the active Panel\n    panel.style.visibility = 'visible'\n  }\n\n  // Deactivation, remove visibility styles\n  return () => {\n    if (panel && container) {\n      panel.style.visibility = ''\n      container.style.visibility = ''\n    }\n  }\n}\n\nexport type PanelsProps = CompatibleHTMLProps<HTMLDivElement>\n\nexport const Panels = styled((props: PanelsProps) => {\n  // TrapStackProvider calculates the topmost active Panel and activates\n  // the visibility styles accordingly\n  return (\n    <TrapStackProvider activate={activatePanel} context={PanelsContext}>\n      <div {...props} data-panels />\n    </TrapStackProvider>\n  )\n})`\n  height: 100%;\n  position: relative;\n  width: 100%;\n`\n"]},"metadata":{},"sourceType":"module"}